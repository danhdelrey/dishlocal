import 'package:bloc/bloc.dart';
import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/post/model/filter_sort_model/filter_sort_params.dart';
import 'package:dishlocal/data/categories/post/model/filter_sort_model/sort_option.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
import 'package:logging/logging.dart';
import 'package:bloc_concurrency/bloc_concurrency.dart';
import 'package:rxdart/rxdart.dart';

import '../../../../data/categories/post/failure/post_failure.dart' as post_failure;

part 'post_event.dart';
part 'post_state.dart'; // ƒê·ªïi t√™n file n·∫øu b·∫°n t√°ch ra
part 'post_bloc.freezed.dart';

// PostFetcher b√¢y gi·ªù ph·∫£i nh·∫≠n FilterSortParams
typedef PostFetcher = Future<Either<post_failure.PostFailure, List<Post>>> Function({
  required FilterSortParams params,
});

// Helper ƒë·ªÉ tr√°nh c√°c y√™u c·∫ßu fetch b·ªã ch·ªìng ch√©o
EventTransformer<E> throttleDroppable<E>(Duration duration) {
  return (events, mapper) {
    return droppable<E>().call(events.throttleTime(duration), mapper);
  };
}

class PostBloc extends Bloc<PostEvent, PostState> {
  final _log = Logger('PostBloc');
  final PostFetcher _postFetcher;
  static const _pageSize = 10;

  PostBloc(this._postFetcher) : super(PostState(filterSortParams: FilterSortParams.defaultParams())) {
    on<_FetchNextPageRequested>(
      _onFetchNextPageRequested,
      // NgƒÉn ng∆∞·ªùi d√πng spam y√™u c·∫ßu t·∫£i trang
      transformer: throttleDroppable(const Duration(milliseconds: 500)),
    );
    on<_RefreshRequested>(_onRefreshRequested);
    on<_FiltersChanged>(_onFiltersChanged);
  }

  /// Helper ƒë·ªÉ t√≠nh to√°n con tr·ªè (cursor) cho y√™u c·∫ßu ti·∫øp theo
  Map<String, dynamic> _calculateCursor(List<Post> currentPosts, SortOption sortOption) {
    if (currentPosts.isEmpty) {
      return {'mainCursor': null, 'dateCursor': null};
    }
    final lastPost = currentPosts.last;

    switch (sortOption.field) {
      case SortField.datePosted:
        // S·∫Øp x·∫øp theo ng√†y, ch·ªâ c·∫ßn con tr·ªè ch√≠nh
        return {'mainCursor': lastPost.createdAt, 'dateCursor': null};
      case SortField.likes:
      case SortField.comments:
      case SortField.saves:
        // S·∫Øp x·∫øp theo s·ªë, c·∫ßn c·∫£ hai
        final numericValue = sortOption.field == SortField.likes
            ? lastPost.likeCount
            : sortOption.field == SortField.comments
                ? lastPost.commentCount
                : lastPost.saveCount;
        return {
          'mainCursor': numericValue,
          'dateCursor': lastPost.createdAt,
        };
    }
  }

  Future<void> _onFetchNextPageRequested(
    _FetchNextPageRequested event,
    Emitter<PostState> emit,
  ) async {
    // NgƒÉn ch·∫∑n vi·ªác fetch n·∫øu ƒëang t·∫£i ho·∫∑c ƒë√£ h·∫øt trang
    if (state.status == PostStatus.loading || !state.hasNextPage) return;

    // N·∫øu ƒë√¢y l√† l·∫ßn t·∫£i ƒë·∫ßu ti√™n (danh s√°ch r·ªóng), tr·∫°ng th√°i l√† initial.
    // N·∫øu kh√¥ng, v·∫´n gi·ªØ tr·∫°ng th√°i success v√† hi·ªÉn th·ªã loading indicator ·ªü cu·ªëi.
    if (state.status == PostStatus.initial) {
      emit(state.copyWith(status: PostStatus.loading));
    }

    final cursorData = _calculateCursor(state.posts, state.filterSortParams.sortOption);

    _log.info('üì• ƒêang t·∫£i trang ti·∫øp theo. Cursor: ${cursorData['mainCursor']}, Tie-break: ${cursorData['dateCursor']}');

    final params = state.filterSortParams.copyWith(
      // G√°n con tr·ªè v√†o c√°c tr∆∞·ªùng t∆∞∆°ng ·ª©ng
      lastCursor: cursorData['mainCursor'],
      lastDateCursorForTieBreak: cursorData['dateCursor'],
      limit: _pageSize,
    );

    final result = await _postFetcher(params: params);

    result.fold(
      // Tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
      (failure) {
        _log.severe('‚ùå L·ªói khi t·∫£i b√†i vi·∫øt: $failure');
        emit(state.copyWith(status: PostStatus.failure, failure: failure));
      },
      // Tr∆∞·ªùng h·ª£p th√†nh c√¥ng
      (newPosts) {
        final isLastPage = newPosts.length < _pageSize;
        _log.info('‚úÖ T·∫£i ƒë∆∞·ª£c ${newPosts.length} b√†i vi·∫øt. isLastPage: $isLastPage');
        emit(state.copyWith(
          status: PostStatus.success,
          // N·ªëi danh s√°ch c≈© v·ªõi danh s√°ch m·ªõi
          posts: List.of(state.posts)..addAll(newPosts),
          hasNextPage: !isLastPage,
        ));
      },
    );
  }

  Future<void> _onRefreshRequested(
    _RefreshRequested event,
    Emitter<PostState> emit,
  ) async {
    _log.info('üîÑ Y√™u c·∫ßu l√†m m·ªõi...');
    // Reset state v·ªÅ ban ƒë·∫ßu, nh∆∞ng gi·ªØ l·∫°i b·ªô l·ªçc hi·ªán t·∫°i
    emit(PostState(filterSortParams: state.filterSortParams));
    // G·ªçi event fetch ƒë·ªÉ t·∫£i l·∫°i t·ª´ ƒë·∫ßu
    add(const PostEvent.fetchNextPageRequested());
  }

  Future<void> _onFiltersChanged(
    _FiltersChanged event,
    Emitter<PostState> emit,
  ) async {
    _log.info('üîÑ B·ªô l·ªçc thay ƒë·ªïi. ƒêang l√†m m·ªõi v·ªõi b·ªô l·ªçc m·ªõi...');
    // Reset ho√†n to√†n state v√† √°p d·ª•ng b·ªô l·ªçc m·ªõi
    emit(PostState(filterSortParams: event.newFilters));
    // G·ªçi event fetch ƒë·ªÉ t·∫£i l·∫°i t·ª´ ƒë·∫ßu v·ªõi b·ªô l·ªçc m·ªõi
    add(const PostEvent.fetchNextPageRequested());
  }
}
