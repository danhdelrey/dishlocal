import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/failure/app_user_failure.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:equatable/equatable.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

part 'user_info_event.dart';
part 'user_info_state.dart';

@injectable
class UserInfoBloc extends Bloc<UserInfoEvent, UserInfoState> {
  final _log = Logger('UserInfoBloc');
  final AppUserRepository _appUserRepository;

  UserInfoBloc(this._appUserRepository) : super(UserInfoInitial()) {
    on<UserInfoRequested>(_onUserInfoRequested);
  }

  Future<void> _onUserInfoRequested(
    UserInfoRequested event,
    Emitter<UserInfoState> emit,
  ) async {
    final targetUserId = event.userId; // ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn hi·ªÉn th·ªã th√¥ng tin
    _log.info('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω UserInfoRequested. TargetUserId: ${targetUserId ?? "ng∆∞·ªùi d√πng hi·ªán t·∫°i"}');
    emit(UserInfoLoading()); // <-- Thay ƒë·ªïi: S·ª≠ d·ª•ng t√™n l·ªõp tr·ª±c ti·∫øp

    try {
      // B∆Ø·ªöC 1: L·∫•y ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i (ng∆∞·ªùi ƒëang xem)
      final currentUserId = _appUserRepository.getCurrentUserId();
      _log.fine('üÜî Ng∆∞·ªùi xem hi·ªán t·∫°i (currentUserId): $currentUserId');

      late final Either<AppUserFailure, AppUser> result;

      // B∆Ø·ªöC 2: Quy·∫øt ƒë·ªãnh ph∆∞∆°ng th·ª©c repository c·∫ßn g·ªçi
      if (targetUserId != null && targetUserId.isNotEmpty) {
        // TR∆Ø·ªúNG H·ª¢P 1: L·∫•y th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ
        _log.fine('üîÑ ƒêang l·∫•y th√¥ng tin cho ng∆∞·ªùi d√πng c·ª• th·ªÉ: $targetUserId');
        result = await _appUserRepository.getUserWithId(
          userId: targetUserId,
          currentUserId: currentUserId, // <-- ‚ú® TRUY·ªÄN currentUserId V√ÄO ƒê√ÇY
        );
      } else {
        // TR∆Ø·ªúNG H·ª¢P 2: L·∫•y th√¥ng tin c·ªßa ch√≠nh ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
        _log.fine('üîÑ ƒêang l·∫•y th√¥ng tin cho ng∆∞·ªùi d√πng hi·ªán t·∫°i...');
        result = await _appUserRepository.getCurrentUser();
      }

      // B∆Ø·ªöC 3: X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
      result.fold(
        (failure) {
          _log.severe('‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.', failure);
          emit(UserInfoFailure()); // <-- Thay ƒë·ªïi: S·ª≠ d·ª•ng t√™n l·ªõp tr·ª±c ti·∫øp
        },
        (appUser) {
          _log.info('‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng: ${appUser.displayName}. isFollowing: ${appUser.isFollowing}');
          emit(UserInfoSuccess(appUser: appUser)); // <-- Thay ƒë·ªïi: S·ª≠ d·ª•ng t√™n l·ªõp tr·ª±c ti·∫øp
        },
      );
    } catch (error, stackTrace) {
      _log.severe('‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong UserInfoBloc.', error, stackTrace);
      emit(UserInfoFailure()); // <-- Thay ƒë·ªïi: S·ª≠ d·ª•ng t√™n l·ªõp tr·ª±c ti·∫øp
    }
  }
}
