import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

part 'delete_post_event.dart';
part 'delete_post_state.dart';
part 'delete_post_bloc.freezed.dart';

@injectable
class DeletePostBloc extends Bloc<DeletePostEvent, DeletePostState> {
  final _log = Logger('DeletePostBloc');
  final PostRepository _postRepository;

  DeletePostBloc(this._postRepository) : super(const DeletePostState.initial()) {
    on<DeletePostRequested>(_onDeletePostRequested);
  }

  FutureOr<void> _onDeletePostRequested(
    DeletePostRequested event,
    Emitter<DeletePostState> emit,
  ) async {
    _log.info('‚ñ∂Ô∏è Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán DeletePostRequested cho postId: ${event.post.postId}');

    // 1. Chuy·ªÉn sang tr·∫°ng th√°i loading ƒë·ªÉ UI c√≥ th·ªÉ hi·ªÉn th·ªã ch·ªâ b√°o.
    _log.info('‚è≥ Ph√°t ra tr·∫°ng th√°i: [Loading]');
    emit(const DeletePostState.loading());

    // 2. G·ªçi ph∆∞∆°ng th·ª©c deletePost t·ª´ repository.
    _log.info('üì° ƒêang g·ªçi _postRepository.deletePost...');
    final result = await _postRepository.deletePost(postId: event.post.postId);

    // 3. X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ repository.
    result.fold(
      // 3a. Tr∆∞·ªùng h·ª£p th·∫•t b·∫°i (Left)
      (failure) {
        _log.severe('‚ùå X√≥a b√†i vi·∫øt th·∫•t b·∫°i. Failure: ${failure.message}');

        // D·ª±a v√†o lo·∫°i failure, b·∫°n c√≥ th·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông kh√°c nhau
        // ·ªü ƒë√¢y n·∫øu c·∫ßn, v√≠ d·ª•: ph√¢n t√≠ch log, v.v.
        // Hi·ªán t·∫°i, ch√∫ng ta ch·ªâ c·∫ßn ph√°t ra tr·∫°ng th√°i failure.

        _log.info('üí• Ph√°t ra tr·∫°ng th√°i: [Failure]');
        emit(const DeletePostState.failure());
      },
      // 3b. Tr∆∞·ªùng h·ª£p th√†nh c√¥ng (Right)
      (_) {
        _log.info('‚úÖ X√≥a b√†i vi·∫øt th√†nh c√¥ng!');
        _log.info('üéâ Ph√°t ra tr·∫°ng th√°i: [Success]');
        emit(const DeletePostState.success());
      },
    );
  }
}
