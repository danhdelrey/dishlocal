import 'package:bloc/bloc.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:dishlocal/data/services/search_service/interface/search_service.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:rxdart/rxdart.dart';

part 'suggestion_search_event.dart';
part 'suggestion_search_state.dart';
part 'suggestion_search_bloc.freezed.dart';

// Transformer ƒë·ªÉ debounce
EventTransformer<E> debounce<E>(Duration duration) {
  return (events, mapper) => events.debounceTime(duration).switchMap(mapper);
}

@injectable
class SuggestionSearchBloc extends Bloc<SuggestionSearchEvent, SuggestionSearchState> {
  final _log = Logger('SuggestionSearchBloc');
  // TH√äM M·ªöI: Inject SearchService
  final SearchService _searchService;

  SuggestionSearchBloc(this._searchService) // <-- S·ª≠a constructor
      : super(const SuggestionSearchState()) {
    on<_QueryChanged>(_onQueryChanged, transformer: debounce(const Duration(milliseconds: 400)));
  }

  Future<void> _onQueryChanged(_QueryChanged event, Emitter<SuggestionSearchState> emit) async {
    final query = event.query.trim();
    _log.info('‚û°Ô∏è [BLoC] Nh·∫≠n event QueryChanged: "$query"'); // LOG KHI NH·∫¨N EVENT

    if (query.isEmpty) {
      _log.info('‚¨ÖÔ∏è [BLoC] Query r·ªóng, emit initial state.');
      emit(const SuggestionSearchState());
      return;
    }

    emit(const SuggestionSearchState(status: SuggestionStatus.loading));
    _log.info('‚è≥ [BLoC] Emit state LOADING.');

    try {
      final result = await _searchService.getSuggestions(query: query);

      // LOG K·∫æT QU·∫¢ T·ª™ SERVICE TR∆Ø·ªöC KHI EMIT
      _log.info('üí° [BLoC] Nh·∫≠n ƒë∆∞·ª£c ${result.suggestions.length} g·ª£i √Ω t·ª´ Service.');

      if (result.suggestions.isEmpty) {
        emit(const SuggestionSearchState(status: SuggestionStatus.empty));
        _log.info('‚¨ÖÔ∏è [BLoC] Emit state EMPTY.');
      } else {
        emit(SuggestionSearchState(
          status: SuggestionStatus.success,
          suggestions: result.suggestions,
        ));
        _log.info('‚¨ÖÔ∏è [BLoC] Emit state SUCCESS.');
      }
    } catch (e) {
      _log.severe('‚ùå [BLoC] L·ªói khi x·ª≠ l√Ω _onQueryChanged', e);
      emit(const SuggestionSearchState(status: SuggestionStatus.failure));
    }
  }
}
