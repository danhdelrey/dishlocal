import 'package:dishlocal/core/enum/food_category.dart';
import 'package:flutter/material.dart';
// Import widget t√°i s·ª≠ d·ª•ng b·∫°n v·ª´a t·∫°o
import 'expandable_chip_selector.dart';

class SortingPage extends StatefulWidget {
  const SortingPage({super.key});

  @override
  State<SortingPage> createState() => _SortingPageState();
}

class _SortingPageState extends State<SortingPage> {
  // ---- THAY ƒê·ªîI KI·ªÇU D·ªÆ LI·ªÜU C·ª¶A TR·∫†NG TH√ÅI ----
  // S·ª≠ d·ª•ng Set<FoodCategory> thay v√¨ Set<String>
  // Kh·ªüi t·∫°o r·ªóng ƒë·ªÉ m·∫∑c ƒë·ªãnh l√† "Ch·ªçn lo·∫°i m√≥n"
  Set<FoodCategory> _selectedCategories = {};

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Ch·ªçn lo·∫°i m√≥n (Demo)')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ExpandableChipSelector(
              title: 'üìã Ch·ªçn lo·∫°i m√≥n',
              // Truy·ªÅn v√†o danh s√°ch t·∫•t c·∫£ c√°c gi√° tr·ªã c·ªßa enum
              items: FoodCategory.values, // <-- THAY ƒê·ªîI
              initialSelection: _selectedCategories,
              onSelectionChanged: (selected) {
                setState(() {
                  _selectedCategories = selected;
                });
              },
            ),
            const SizedBox(height: 24),
            const Divider(),
            const SizedBox(height: 16),
            Text(
              'C√°c m·ª•c ƒëang ƒë∆∞·ª£c ch·ªçn:',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            if (_selectedCategories.isEmpty)
              const Text('Ch∆∞a c√≥ m·ª•c n√†o ƒë∆∞·ª£c ch·ªçn.')
            else
              Wrap(
                spacing: 8,
                runSpacing: 8,
                // ---- THAY ƒê·ªîI LOGIC HI·ªÇN TH·ªä K·∫æT QU·∫¢ ----
                children: _selectedCategories.map((category) {
                  return Chip(
                    label: Text(category.label), // L·∫•y t·ª´ enum
                    backgroundColor: category.color.withAlpha(50), // L·∫•y t·ª´ enum
                    side: BorderSide(color: category.color),
                  );
                }).toList(),
              ),
          ],
        ),
      ),
    );
  }
}
