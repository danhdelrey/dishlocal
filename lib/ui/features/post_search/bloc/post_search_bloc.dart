import 'package:bloc/bloc.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:rxdart/rxdart.dart';

part 'post_search_event.dart';
part 'post_search_bloc.freezed.dart';

// State c·ªßa BLoC n√†y ch√≠nh l√† PagingState
typedef PostSearchState = PagingState<int, Post>;

@injectable
class PostSearchBloc extends Bloc<PostSearchEvent, PostSearchState> {
  final _log = Logger('PostSearchBloc');
  final PostRepository _postRepository;
  static const int _hitsPerPage = 15;

  // Bi·∫øn c·ª•c b·ªô ƒë·ªÉ l∆∞u query hi·ªán t·∫°i
  String _currentQuery = '';

  PostSearchBloc(this._postRepository) : super(PostSearchState()) {
    on<_SearchStarted>((event, emit) {
      _log.info('üöÄ B·∫Øt ƒë·∫ßu t√¨m ki·∫øm b√†i vi·∫øt v·ªõi query: "${event.query}"');
      _currentQuery = event.query;
      // Reset state v√† y√™u c·∫ßu t·∫£i trang ƒë·∫ßu ti√™n
      emit(PostSearchState());
      add(const PostSearchEvent.nextPageRequested());
    });

    on<_NextPageRequested>((event, emit) async {
      // B·∫£o v·ªá: N·∫øu query r·ªóng ho·∫∑c kh√¥ng c√≤n trang ti·∫øp, ho·∫∑c ƒëang loading th√¨ kh√¥ng l√†m g√¨
      if (_currentQuery.isEmpty || !state.hasNextPage || state.isLoading) return;

      emit(state.copyWith(isLoading: true));

      // T√≠nh to√°n trang c·∫ßn t·∫£i. `state.pages` l√† List<List<Post>>,
      // n√™n s·ªë trang ƒë√£ t·∫£i l√† `state.pages?.length ?? 0`.
      final pageToFetch = state.pages?.length ?? 0;
      _log.info('üì• ƒêang t·∫£i trang b√†i vi·∫øt s·ªë $pageToFetch...');

      final result = await _postRepository.searchPosts(
        query: _currentQuery,
        page: pageToFetch,
        hitsPerPage: _hitsPerPage,
      );

      result.fold(
        (failure) {
          _log.severe('‚ùå L·ªói khi t√¨m ki·∫øm b√†i vi·∫øt: $failure');
          emit(state.copyWith(error: failure, isLoading: false));
        },
        (newPosts) {
          final isLastPage = newPosts.length < _hitsPerPage;
          _log.info('‚úÖ T·∫£i ƒë∆∞·ª£c ${newPosts.length} b√†i vi·∫øt. isLastPage=$isLastPage');

          emit(state.copyWith(
            pages: [...?state.pages, newPosts],
            // Kh√¥ng c·∫ßn 'keys' v√¨ ch√∫ng ta d√πng page number
            hasNextPage: !isLastPage,
            isLoading: false,
          ));
        },
      );
    },
        // D√πng transformer ƒë·ªÉ tr√°nh spam request khi cu·ªôn nhanh
        transformer: (events, mapper) => events.throttleTime(const Duration(milliseconds: 300)).asyncExpand(mapper));
  }
}
