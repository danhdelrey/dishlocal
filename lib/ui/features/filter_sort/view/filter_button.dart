import 'package:dishlocal/app/theme/theme.dart';
import 'package:dishlocal/data/categories/post/model/filter_sort_model/filter_sort_params.dart';
import 'package:dishlocal/data/categories/post/model/filter_sort_model/sort_option.dart';
import 'package:dishlocal/ui/features/filter_sort/view/sorting_bottom_sheet.dart';
import 'package:dishlocal/ui/features/post/bloc/post_bloc.dart';
import 'package:dishlocal/ui/features/result_search/bloc/result_search_bloc.dart';
import 'package:dishlocal/ui/widgets/input_widgets/custom_choice_chip.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:logging/logging.dart';

class FilterButton extends StatelessWidget {
  const FilterButton({
    super.key,
    this.postBloc,
    this.resultSearchBloc,
    this.showWrap = true,
  });

  final PostBloc? postBloc;
  final ResultSearchBloc? resultSearchBloc;
  final bool showWrap;

  /// H√†m n√†y s·∫Ω l·∫•y BLoC, ƒë·ªçc state, v√† m·ªü bottom sheet
  void _openFilterSortSheet(BuildContext context) async {
    final log = Logger('FilterButton'); // T·∫°o m·ªôt logger t·∫°m th·ªùi

    if (resultSearchBloc != null) {
      final currentFilters = resultSearchBloc!.state.filterParams;
      log.info('üîµ M·ªü b·ªô l·ªçc v·ªõi params hi·ªán t·∫°i: ${currentFilters.toVietnameseString}');

      final newFilters = await SortingBottomSheet.show(context, currentFilters);

      // LOG K·∫æT QU·∫¢ TR·∫¢ V·ªÄ T·ª™ BOTTOM SHEET
      if (newFilters == null) {
        log.warning('üü° Bottom sheet ƒë√£ ƒë√≥ng m√† kh√¥ng c√≥ k·∫øt qu·∫£ (newFilters is null).');
        return;
      }

      log.info('üü¢ Bottom sheet tr·∫£ v·ªÅ params m·ªõi: ${newFilters.toVietnameseString}');

      // So s√°nh v√† g·ª≠i event
      if (newFilters != currentFilters) {
        log.info('‚úÖ Params ƒë√£ thay ƒë·ªïi! G·ª≠i event filtersChanged...');
        resultSearchBloc!.add(ResultSearchEvent.filtersChanged(newFilters: newFilters));
      } else {
        log.warning('üü° Params kh√¥ng thay ƒë·ªïi. Kh√¥ng g·ª≠i event.');
      }
    } else if (postBloc != null) {
      final currentFilters = postBloc!.state.filterSortParams;
      log.info('üîµ M·ªü b·ªô l·ªçc v·ªõi params hi·ªán t·∫°i: ${currentFilters.toVietnameseString}');

      final newFilters = await SortingBottomSheet.show(context, currentFilters);

      // LOG K·∫æT QU·∫¢ TR·∫¢ V·ªÄ T·ª™ BOTTOM SHEET
      if (newFilters == null) {
        log.warning('üü° Bottom sheet ƒë√£ ƒë√≥ng m√† kh√¥ng c√≥ k·∫øt qu·∫£ (newFilters is null).');
        return;
      }

      log.info('üü¢ Bottom sheet tr·∫£ v·ªÅ params m·ªõi: ${newFilters.toVietnameseString}');

      // So s√°nh v√† g·ª≠i event
      if (newFilters != currentFilters) {
        log.info('‚úÖ Params ƒë√£ thay ƒë·ªïi! G·ª≠i event filtersChanged...');
        postBloc!.add(PostEvent.filtersChanged(newFilters: newFilters));
      } else {
        log.warning('üü° Params kh√¥ng thay ƒë·ªïi. Kh√¥ng g·ª≠i event.');
      }
    } else {
      log.severe('üî¥ Kh√¥ng c√≥ BLoC n√†o ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ m·ªü b·ªô l·ªçc!');
    }
  }

  @override
  Widget build(BuildContext context) {
    // S·ª≠ d·ª•ng BlocBuilder ƒë·ªÉ widget t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi state c·ªßa BLoC thay ƒë·ªïi.
    // Ch√∫ng ta ch·ªâ rebuild n√∫t n√†y, kh√¥ng rebuild to√†n b·ªô trang.
    if (postBloc != null) {
      return BlocBuilder<PostBloc, PostState>(
        // buildWhen gi√∫p t·ªëi ∆∞u h√≥a, ch·ªâ rebuild khi filterSortParams thay ƒë·ªïi.
        buildWhen: (previous, current) => previous.filterSortParams != current.filterSortParams,
        builder: (context, state) {
          return _buildFilterWidget(context, state.filterSortParams);
        },
      );
    } else if (resultSearchBloc != null) {
      return BlocBuilder<ResultSearchBloc, ResultSearchState>(
        // buildWhen gi√∫p t·ªëi ∆∞u h√≥a, ch·ªâ rebuild khi filterSortParams thay ƒë·ªïi.
        buildWhen: (previous, current) => previous.filterParams != current.filterParams,
        builder: (context, state) {
          return _buildFilterWidget(context, state.filterParams);
        },
      );
    }
    return const SizedBox();
  }

  Widget _buildFilterWidget(BuildContext context, FilterSortParams filterParams) {
    final hasActiveFilters = !filterParams.isDefault(filterParams.context);

    // Filter button
    final filterButton = showWrap
        ? InkWell(
            onTap: () => _openFilterSortSheet(context),
            borderRadius: BorderRadius.circular(2),
            child: Container(
              padding: const EdgeInsets.all(2),
              child: Row(
                children: [
                  Icon(
                    Icons.tune_rounded,
                    size: 20,
                    color: hasActiveFilters ? appColorScheme(context).primary : appColorScheme(context).onSurfaceVariant,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    hasActiveFilters ? 'L·ªçc & S·∫Øp x·∫øp (ƒë√£ √°p d·ª•ng)' : 'L·ªçc & S·∫Øp x·∫øp',
                    style: appTextTheme(context).labelLarge?.copyWith(
                          fontWeight: FontWeight.w700,
                          color: hasActiveFilters ? appColorScheme(context).primary : appColorScheme(context).onSurfaceVariant,
                        ),
                  ),
                ],
              ),
            ),
          )
        : IconButton(
            onPressed: () => _openFilterSortSheet(context),
            icon: Icon(
              Icons.tune_rounded,
              size: 24,
              color: hasActiveFilters ? appColorScheme(context).primary : appColorScheme(context).onSurfaceVariant,
            ),
            tooltip: hasActiveFilters ? 'L·ªçc & S·∫Øp x·∫øp (ƒë√£ √°p d·ª•ng)' : 'L·ªçc & S·∫Øp x·∫øp',
          );

    // N·∫øu showWrap = false, ch·ªâ hi·ªÉn th·ªã n√∫t duy nh·∫•t
    if (!showWrap) {
      return filterButton;
    }

    // N·∫øu showWrap = true, hi·ªÉn th·ªã wrap v·ªõi t·∫•t c·∫£ filter chips
    final filterChildren = [
      filterButton,
      ..._buildFilterChips(context, filterParams),
    ];

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 15),
      child: Wrap(
        spacing: 8.0,
        runSpacing: 8.0,
        alignment: WrapAlignment.start,
        crossAxisAlignment: WrapCrossAlignment.center,
        children: filterChildren,
      ),
    );
  }

  List<Widget> _buildFilterChips(BuildContext context, FilterSortParams filterParams) {
    final hasActiveFilters = !filterParams.isDefault(filterParams.context);

    if (!hasActiveFilters) {
      return [];
    }

    final chips = <Widget>[];

    // Categories chips
    chips.addAll(filterParams.categories.map((category) => CustomChoiceChip(
          label: category.label,
          isSelected: true,
          onSelected: (_) {
            _openFilterSortSheet(context);
          },
          itemColor: category.color,
          contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
          borderRadius: 8,
        )));

    // Price range chip
    if (filterParams.range != null) {
      chips.add(CustomChoiceChip(
        label: filterParams.range!.displayName,
        isSelected: true,
        onSelected: (_) {
          _openFilterSortSheet(context);
        },
        itemColor: Colors.amber,
        contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
        borderRadius: 8,
      ));
    }

    // Distance chip
    if (filterParams.distance != null) {
      chips.add(CustomChoiceChip(
        label: filterParams.distance!.displayName,
        isSelected: true,
        onSelected: (_) {
          _openFilterSortSheet(context);
        },
        itemColor: Colors.blue,
        contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
        borderRadius: 8,
      ));
    }

    // Sort option chip with direction arrow
    if (filterParams.sortOption.field != SortField.relevance) {
      chips.add(CustomChoiceChip(
        label: _buildSortLabel(filterParams.sortOption),
        isSelected: true,
        onSelected: (_) {
          _openFilterSortSheet(context);
        },
        itemColor: Colors.lightGreen,
        contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
        borderRadius: 8,
      ));
    }

    return chips;
  }

  String _buildSortLabel(SortOption sortOption) {
    final arrow = sortOption.direction == SortDirection.desc ? ' ‚Üì' : ' ‚Üë';
    return '${sortOption.field.icon} ${sortOption.field.label}$arrow';
  }
}
