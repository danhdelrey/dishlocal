import 'package:dishlocal/app/theme/theme.dart';
import 'package:dishlocal/ui/features/filter_sort/view/sorting_bottom_sheet.dart';
import 'package:dishlocal/ui/features/post/bloc/post_bloc.dart';
import 'package:dishlocal/ui/features/result_search/bloc/result_search_bloc.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:logging/logging.dart';

class FilterButton extends StatelessWidget {
  const FilterButton({super.key, this.postBloc, this.resultSearchBloc});
  final PostBloc? postBloc;
  final ResultSearchBloc? resultSearchBloc;

  /// H√†m n√†y s·∫Ω l·∫•y BLoC, ƒë·ªçc state, v√† m·ªü bottom sheet
  void _openFilterSortSheet(BuildContext context) async {
    final log = Logger('FilterButton'); // T·∫°o m·ªôt logger t·∫°m th·ªùi

    if (resultSearchBloc != null) {
      final currentFilters = resultSearchBloc!.state.filterParams;
      log.info('üîµ M·ªü b·ªô l·ªçc v·ªõi params hi·ªán t·∫°i: ${currentFilters.toVietnameseString}');

      final newFilters = await SortingBottomSheet.show(context, currentFilters);

      // LOG K·∫æT QU·∫¢ TR·∫¢ V·ªÄ T·ª™ BOTTOM SHEET
      if (newFilters == null) {
        log.warning('üü° Bottom sheet ƒë√£ ƒë√≥ng m√† kh√¥ng c√≥ k·∫øt qu·∫£ (newFilters is null).');
        return;
      }

      log.info('üü¢ Bottom sheet tr·∫£ v·ªÅ params m·ªõi: ${newFilters.toVietnameseString}');

      // So s√°nh v√† g·ª≠i event
      if (newFilters != currentFilters) {
        log.info('‚úÖ Params ƒë√£ thay ƒë·ªïi! G·ª≠i event filtersChanged...');
        resultSearchBloc!.add(ResultSearchEvent.filtersChanged(newFilters: newFilters));
      } else {
        log.warning('üü° Params kh√¥ng thay ƒë·ªïi. Kh√¥ng g·ª≠i event.');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // S·ª≠ d·ª•ng BlocBuilder ƒë·ªÉ widget t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi state c·ªßa BLoC thay ƒë·ªïi.
    // Ch√∫ng ta ch·ªâ rebuild n√∫t n√†y, kh√¥ng rebuild to√†n b·ªô trang.
    if (postBloc != null) {
      return BlocBuilder<PostBloc, PostState>(
        // buildWhen gi√∫p t·ªëi ∆∞u h√≥a, ch·ªâ rebuild khi filterSortParams thay ƒë·ªïi.
        buildWhen: (previous, current) => previous.filterSortParams != current.filterSortParams,
        builder: (context, state) {
          // Ki·ªÉm tra xem c√≥ b·ªô l·ªçc n√†o ƒëang ƒë∆∞·ª£c √°p d·ª•ng kh√¥ng
          final hasActiveFilters = !state.filterSortParams.isDefault(state.filterSortParams.context);

          return IconButton(
            onPressed: () => _openFilterSortSheet(context),
            icon: Icon(
              Icons.tune_rounded,
              size: 24,
              color: hasActiveFilters ? appColorScheme(context).primary : appColorScheme(context).onSurfaceVariant,
            ),
          );
        },
      );
    } else if (resultSearchBloc != null) {
      return BlocBuilder<ResultSearchBloc, ResultSearchState>(
        // buildWhen gi√∫p t·ªëi ∆∞u h√≥a, ch·ªâ rebuild khi filterSortParams thay ƒë·ªïi.
        buildWhen: (previous, current) => previous.filterParams != current.filterParams,
        builder: (context, state) {
          // Ki·ªÉm tra xem c√≥ b·ªô l·ªçc n√†o ƒëang ƒë∆∞·ª£c √°p d·ª•ng kh√¥ng
          final hasActiveFilters = !state.filterParams.isDefault(state.filterParams.context);

          return IconButton(
            onPressed: () => _openFilterSortSheet(context),
            icon: Icon(
              Icons.tune_rounded,
              size: 24,
              color: hasActiveFilters ? appColorScheme(context).primary : appColorScheme(context).onSurfaceVariant,
            ),
          );
        },
      );
    }
    return const SizedBox();
  }
}
