import 'dart:async';
import 'package:bloc/bloc.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:bloc_concurrency/bloc_concurrency.dart';

part 'search_event.dart';
part 'search_state.dart';
part 'search_bloc.freezed.dart';

@injectable
class SearchBloc extends Bloc<SearchEvent, SearchState> {
  final _log = Logger('SearchBloc');
  final AppUserRepository _appUserRepository;
  final PostRepository _postRepository;
  static const int _hitsPerPage = 15; // S·ªë item m·ªói trang

  SearchBloc(this._appUserRepository, this._postRepository) : super(SearchState.initial()) {
    // S·ª≠ d·ª•ng transformer ƒë·ªÉ tr√°nh spam request khi k√©o nhanh
    on<_NextPostPageRequested>(_onNextPostPageRequested, transformer: droppable());
    on<_NextProfilePageRequested>(_onNextProfilePageRequested, transformer: droppable());
    on<_QuerySubmitted>(_onQuerySubmitted);
    on<_Refreshed>(_onRefreshed);
  }

  Future<void> _onQuerySubmitted(_QuerySubmitted event, Emitter<SearchState> emit) async {
    _log.info('üöÄ B·∫Øt ƒë·∫ßu phi√™n t√¨m ki·∫øm m·ªõi v·ªõi query: "${event.query}"');

    // Reset state v√† hi·ªÉn th·ªã loading
    emit(SearchState.initial().copyWith(
      query: event.query,
      status: SearchStatus.loading,
    ));

    try {
      // G·ªçi API cho trang ƒë·∫ßu ti√™n c·ªßa c·∫£ hai tab C√ôNG L√öC
      final results = await Future.wait([
        _postRepository.searchPosts(query: event.query, page: 0, hitsPerPage: _hitsPerPage),
        _appUserRepository.searchProfiles(query: event.query, page: 0, hitsPerPage: _hitsPerPage),
      ]);

      final postResult = results[0];
      final profileResult = results[1];

      // X·ª≠ l√Ω k·∫øt qu·∫£ v√† c·∫≠p nh·∫≠t state
      postResult.fold(
        (failure) => throw failure, // N√©m l·ªói ƒë·ªÉ kh·ªëi catch b√™n ngo√†i b·∫Øt
        (posts) {
          profileResult.fold(
            (failure) => throw failure,
            (profiles) {
              _log.info('‚úÖ T√¨m ki·∫øm ban ƒë·∫ßu th√†nh c√¥ng. Posts: ${posts.length}, Profiles: ${profiles.length}');
              emit(state.copyWith(
                status: SearchStatus.success,
                posts: posts as List<Post>,
                profiles: profiles as List<AppUser>,
                postPage: 1, // ƒê√£ t·∫£i xong trang 0, trang ti·∫øp theo l√† 1
                profilePage: 1,
                hasMorePosts: posts.length == _hitsPerPage,
                hasMoreProfiles: profiles.length == _hitsPerPage,
              ));
            },
          );
        },
      );
    } catch (e, st) {
      _log.severe('‚ùå L·ªói khi th·ª±c hi·ªán t√¨m ki·∫øm ban ƒë·∫ßu', e, st);
      emit(state.copyWith(
        status: SearchStatus.failure,
        errorMessage: 'ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i.',
      ));
    }
  }

  Future<void> _onNextPostPageRequested(_NextPostPageRequested event, Emitter<SearchState> emit) async {
    // Ch·ªâ fetch khi c√≥ query, c√≥ trang ti·∫øp v√† kh√¥ng ƒëang loading
    if (state.query.isEmpty || !state.hasMorePosts || state.isLoadingMorePosts) return;

    _log.info('üì• ƒêang t·∫£i trang b√†i vi·∫øt ti·∫øp theo (page ${state.postPage})...');
    emit(state.copyWith(isLoadingMorePosts: true));

    final result = await _postRepository.searchPosts(
      query: state.query,
      page: state.postPage,
      hitsPerPage: _hitsPerPage,
    );

    result.fold(
      (failure) {
        _log.severe('‚ùå L·ªói khi t·∫£i th√™m b√†i vi·∫øt: $failure');
        // C√≥ th·ªÉ hi·ªÉn th·ªã l·ªói nh·ªè tr√™n UI thay v√¨ l√†m h·ªèng c·∫£ trang
        emit(state.copyWith(isLoadingMorePosts: false));
      },
      (newPosts) {
        _log.info('‚úÖ T·∫£i th√™m ${newPosts.length} b√†i vi·∫øt th√†nh c√¥ng.');
        emit(state.copyWith(
          posts: [...state.posts, ...newPosts],
          postPage: state.postPage + 1,
          hasMorePosts: newPosts.length == _hitsPerPage,
          isLoadingMorePosts: false,
        ));
      },
    );
  }

  Future<void> _onNextProfilePageRequested(_NextProfilePageRequested event, Emitter<SearchState> emit) async {
    if (state.query.isEmpty || !state.hasMoreProfiles || state.isLoadingMoreProfiles) return;

    _log.info('üì• ƒêang t·∫£i trang profile ti·∫øp theo (page ${state.profilePage})...');
    emit(state.copyWith(isLoadingMoreProfiles: true));

    final result = await _appUserRepository.searchProfiles(
      query: state.query,
      page: state.profilePage,
      hitsPerPage: _hitsPerPage,
    );

    result.fold(
      (failure) {
        _log.severe('‚ùå L·ªói khi t·∫£i th√™m profile: $failure');
        emit(state.copyWith(isLoadingMoreProfiles: false));
      },
      (newProfiles) {
        _log.info('‚úÖ T·∫£i th√™m ${newProfiles.length} profile th√†nh c√¥ng.');
        emit(state.copyWith(
          profiles: [...state.profiles, ...newProfiles],
          profilePage: state.profilePage + 1,
          hasMoreProfiles: newProfiles.length == _hitsPerPage,
          isLoadingMoreProfiles: false,
        ));
      },
    );
  }

  Future<void> _onRefreshed(_Refreshed event, Emitter<SearchState> emit) async {
    // N·∫øu c√≥ query, th·ª±c hi·ªán l·∫°i t√¨m ki·∫øm t·ª´ ƒë·∫ßu
    if (state.query.isNotEmpty) {
      add(SearchEvent.querySubmitted(state.query));
    }
  }
}
