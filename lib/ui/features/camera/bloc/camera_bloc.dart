import 'dart:io';

import 'package:bloc/bloc.dart';
import 'package:camera/camera.dart';
import 'package:dishlocal/core/dependencies_injection/service_locator.dart';
import 'package:dishlocal/core/utils/image_processor.dart';
import 'package:dishlocal/data/categories/moderation/repository/interface/moderation_repository.dart';
import 'package:equatable/equatable.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

part 'camera_event.dart';
part 'camera_state.dart';

@injectable
class CameraBloc extends Bloc<CameraEvent, CameraState> {
  // 1. T·∫°o m·ªôt Logger instance cho class n√†y
  // ƒê·∫∑t t√™n logger theo t√™n class gi√∫p d·ªÖ d√†ng l·ªçc log sau n√†y
  final _log = Logger('CameraBloc');

  CameraController? _controller;

  final ImageProcessor imageProcessor;
  final ModerationRepository _moderationRepository;

  CameraBloc(this._moderationRepository, this.imageProcessor) : super(const CameraInitial()) {
    on<CameraInitialized>(_onCameraInitialized);
    on<CameraStopped>(_onCameraStopped);
    on<CameraCaptureRequested>(_onCameraCaptureRequested);
  }

  Future<void> _onCameraInitialized(event, emit) async {
    // Log khi b·∫Øt ƒë·∫ßu x·ª≠ l√Ω event
    _log.info('Event CameraInitialized: B·∫Øt ƒë·∫ßu qu√° tr√¨nh kh·ªüi t·∫°o camera...');

    // Emit tr·∫°ng th√°i loading ngay l·∫≠p t·ª©c ƒë·ªÉ UI c·∫≠p nh·∫≠t
    emit(const CameraInitializationInProgress());

    try {
      // B∆Ø·ªöC 1: L·∫§Y DANH S√ÅCH CAMERA
      _log.fine('ƒêang g·ªçi availableCameras()...');
      final cameras = await availableCameras();

      if (cameras.isEmpty) {
        _log.severe('Kh√¥ng t√¨m th·∫•y camera n√†o tr√™n thi·∫øt b·ªã.');
        // N√©m m·ªôt l·ªói c·ª• th·ªÉ ƒë·ªÉ kh·ªëi catch c√≥ th·ªÉ x·ª≠ l√Ω
        throw CameraException('E01', 'No cameras found on the device.');
      }
      _log.info('T√¨m th·∫•y ${cameras.length} camera. S·ª≠ d·ª•ng camera ƒë·∫ßu ti√™n.');

      // B∆Ø·ªöC 2: KH·ªûI T·∫†O CAMERA CONTROLLER
      _log.fine('ƒêang kh·ªüi t·∫°o CameraController...');
      // Ch·ªçn camera ƒë·∫ßu ti√™n (th∆∞·ªùng l√† camera sau)
      _controller = CameraController(
        cameras.first,
        ResolutionPreset.high, // D√πng high thay v√¨ veryHigh ƒë·ªÉ t∆∞∆°ng th√≠ch t·ªët h∆°n
        enableAudio: false,
      );

      // B∆Ø·ªöC 3: INITIALIZE CONTROLLER
      _log.fine('ƒêang g·ªçi _controller.initialize()...');
      await _controller!.initialize();
      _log.info('CameraController ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!');

      // B∆Ø·ªöC 4: EMIT TR·∫†NG TH√ÅI READY
      // Ch·ªâ emit khi t·∫•t c·∫£ c√°c b∆∞·ªõc tr√™n th√†nh c√¥ng
      emit(CameraReady(cameraController: _controller!));
    } on CameraException catch (e, stackTrace) {
      // B·∫Øt l·ªói c·ª• th·ªÉ t·ª´ package camera
      _log.severe(
        'L·ªói CameraException trong qu√° tr√¨nh kh·ªüi t·∫°o: ${e.code} - ${e.description}',
        e,
        stackTrace,
      );
      emit(CameraFailure(failureMessage: 'L·ªói camera: ${e.description} (Code: ${e.code})'));
    } catch (e, stackTrace) {
      // B·∫Øt t·∫•t c·∫£ c√°c l·ªói kh√°c kh√¥ng l∆∞·ªùng tr∆∞·ªõc ƒë∆∞·ª£c
      _log.severe(
        'L·ªói kh√¥ng x√°c ƒë·ªãnh trong CameraInitialized: $e',
        e,
        stackTrace, // Ghi l·∫°i c·∫£ stack trace ƒë·ªÉ debug
      );
      emit(const CameraFailure(failureMessage: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i.'));
    }
  }

  Future<void> _onCameraStopped(event, emit) async {
    _log.info('Event CameraStopped: ƒêang d·ª´ng v√† gi·∫£i ph√≥ng CameraController...');

    // 2. Ki·ªÉm tra xem controller c√≥ th·ª±c s·ª± t·ªìn t·∫°i v√† ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a.
    // N·∫øu kh√¥ng ki·ªÉm tra, vi·ªác g·ªçi dispose() tr√™n m·ªôt controller null s·∫Ω g√¢y l·ªói.
    if (_controller == null || !_controller!.value.isInitialized) {
      _log.warning('C·ªë g·∫Øng d·ª´ng m·ªôt controller ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c ƒë√£ null.');
      // Kh√¥ng c·∫ßn l√†m g√¨ th√™m n·∫øu controller kh√¥ng t·ªìn t·∫°i.
      return;
    }

    try {
      // 3. Th·ª±c hi·ªán vi·ªác gi·∫£i ph√≥ng t√†i nguy√™n. ƒê√¢y l√† m·ªôt t√°c v·ª• b·∫•t ƒë·ªìng b·ªô.
      await _controller!.dispose();
      _log.info('CameraController ƒë√£ ƒë∆∞·ª£c dispose th√†nh c√¥ng.');

      // 4. Set controller v·ªÅ null ƒë·ªÉ tr√°nh c√°c truy c·∫≠p sau n√†y.
      _controller = null;

      // 5. (T√πy ch·ªçn) Emit m·ªôt tr·∫°ng th√°i ƒë·ªÉ reset UI v·ªÅ ban ƒë·∫ßu.
      // ƒêi·ªÅu n√†y h·ªØu √≠ch n·∫øu ng∆∞·ªùi d√πng c√≥ th·ªÉ quay l·∫°i m√†n h√¨nh camera
      // m√† kh√¥ng t·∫°o l·∫°i BLoC.
      emit(const CameraInitial());
    } catch (e, stackTrace) {
      _log.severe('L·ªói khi dispose CameraController: $e', e, stackTrace);
      // Ngay c·∫£ khi c√≥ l·ªói, ch√∫ng ta v·∫´n n√™n emit m·ªôt tr·∫°ng th√°i ·ªïn ƒë·ªãnh.
      // C√≥ th·ªÉ emit CameraFailure ho·∫∑c CameraInitial t√πy v√†o logic b·∫°n mu·ªën.
      emit(CameraFailure(failureMessage: 'Kh√¥ng th·ªÉ d·ª´ng camera m·ªôt c√°ch ch√≠nh x√°c. L·ªói: $e'));
    }
  }

  Future<void> _onCameraCaptureRequested(
    CameraCaptureRequested event,
    Emitter<CameraState> emit,
  ) async {
    _log.info('‚ñ∂Ô∏è Event CameraCaptureRequested: B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch·ª•p ·∫£nh v√† ki·ªÉm duy·ªát...');

    if (state is! CameraReady || _controller == null || !_controller!.value.isInitialized) {
      _log.warning('C·ªë g·∫Øng ch·ª•p ·∫£nh khi camera ch∆∞a s·∫µn s√†ng.');
      return;
    }

    // L·∫•y ra controller hi·ªán t·∫°i ƒë·ªÉ tr√°nh l·ªói race condition
    final currentController = _controller!;

    try {
      // === GIAI ƒêO·∫†N 1: CH·ª§P V√Ä X·ª¨ L√ù ·∫¢NH ===
      _log.info('‚è≥ Ph√°t ra tr·∫°ng th√°i: [CaptureInProgress]');
      emit(const CameraCaptureInProgress());

      _log.fine('üì∏ ƒêang g·ªçi controller.takePicture()...');
      final xFile = await currentController.takePicture();
      final imageFile = File(xFile.path); // Chuy·ªÉn ƒë·ªïi XFile sang File
      _log.info('‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c ch·ª•p: ${imageFile.path}');

      _log.fine('üñºÔ∏è ƒêang x·ª≠ l√Ω crop ·∫£nh v√† t·∫°o blurhash...');
      await imageProcessor.cropSquare(imageFile.path, imageFile.path, false);
      final hash = imageProcessor.encodeImageToBlurhashString(imageFile.path);
      _log.info('‚úÖ X·ª≠ l√Ω ·∫£nh v√† t·∫°o blurhash th√†nh c√¥ng: "$hash"');

      // === GIAI ƒêO·∫†N 2: KI·ªÇM DUY·ªÜT H√åNH ·∫¢NH ===
      _log.info('‚è≥ Ph√°t ra tr·∫°ng th√°i: [ModerationInProgress]');
      emit(const CameraModerationInProgress());

      _log.info('üõ°Ô∏è ƒêang g·ªçi _moderationRepository.moderateImage()...');
      final moderationResult = await _moderationRepository.moderateImage(imageFile);

      // X·ª≠ l√Ω k·∫øt qu·∫£ ki·ªÉm duy·ªát
      await moderationResult.fold(
        // Tr∆∞·ªùng h·ª£p th·∫•t b·∫°i (Left): ·∫¢nh kh√¥ng an to√†n ho·∫∑c c√≥ l·ªói
        (failure) async {
          _log.warning('‚ùå Ki·ªÉm duy·ªát th·∫•t b·∫°i. Failure: ${failure.message}');
          
          imageProcessor.deleteTempImageFile(imageFile.path);
          _log.info('ƒê√£ x√≥a file ·∫£nh v·ª´a ch·ª•p ·ªü ƒë∆∞·ªùng d·∫´n: ${imageFile.path}');

          // Ph√°t ra tr·∫°ng th√°i ModerationFailure ƒë·ªÉ UI hi·ªÉn th·ªã th√¥ng b√°o
          emit(CameraModerationFailure(failureMessage: failure.message));

          // [QUAN TR·ªåNG] Sau khi b√°o l·ªói, quay l·∫°i tr·∫°ng th√°i Ready ƒë·ªÉ ng∆∞·ªùi d√πng th·ª≠ l·∫°i
          _log.info('üîÑ Quay l·∫°i tr·∫°ng th√°i [Ready] sau khi ki·ªÉm duy·ªát th·∫•t b·∫°i.');
          emit(CameraReady(cameraController: currentController));
        },

        // Tr∆∞·ªùng h·ª£p th√†nh c√¥ng (Right): ·∫¢nh an to√†n
        (_) async {
          _log.info('üëç Ki·ªÉm duy·ªát th√†nh c√¥ng. ·∫¢nh an to√†n.');

          // === GIAI ƒêO·∫†N 3: HO√ÄN T·∫§T ===
          _log.info('üéâ Ph√°t ra tr·∫°ng th√°i: [CaptureSuccess] v·ªõi ƒë∆∞·ªùng d·∫´n ·∫£nh.');
          emit(CameraCaptureSuccess(
            imagePath: imageFile.path,
            blurHash: hash,
          ));

          // Sau khi th√†nh c√¥ng, c√≥ th·ªÉ quay l·∫°i tr·∫°ng th√°i Ready
          // ƒë·ªÉ n·∫øu ng∆∞·ªùi d√πng quay l·∫°i m√†n h√¨nh n√†y, h·ªç c√≥ th·ªÉ ch·ª•p ti·∫øp.
          emit(CameraReady(cameraController: currentController));
        },
      );
    } on CameraException catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói CameraException khi ch·ª•p ·∫£nh: ${e.code} - ${e.description}', e, stackTrace);
      emit(CameraFailure(failureMessage: 'Kh√¥ng th·ªÉ ch·ª•p ·∫£nh. L·ªói: ${e.description}'));
      // Sau khi b√°o l·ªói, quay l·∫°i tr·∫°ng th√°i Ready ƒë·ªÉ ng∆∞·ªùi d√πng th·ª≠ l·∫°i
      emit(CameraReady(cameraController: currentController));
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi ch·ª•p v√† x·ª≠ l√Ω ·∫£nh: $e', e, stackTrace);
      emit(const CameraFailure(failureMessage: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën.'));
      emit(CameraReady(cameraController: currentController));
    }
  }

  @override
  Future<void> close() {
    _log.info('Closing CameraBloc, disposing controller...');
    _controller?.dispose();

    return super.close();
  }
}
