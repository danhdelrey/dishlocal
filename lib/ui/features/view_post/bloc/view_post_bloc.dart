import 'package:bloc/bloc.dart';
import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/failure/app_user_failure.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/categories/post/failure/post_failure.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

part 'view_post_event.dart';
part 'view_post_state.dart';
part 'view_post_bloc.freezed.dart';

@injectable
class ViewPostBloc extends Bloc<ViewPostEvent, ViewPostState> {
  final _log = Logger('ViewPostBloc');
  final PostRepository _postRepository;
  final AppUserRepository _appUserRepository;

  ViewPostBloc(
    this._postRepository,
    this._appUserRepository,
  ) : super(const ViewPostState.loading()) {
    on<Started>(_onStarted);
  }

 Future<void> _onStarted(
    Started event,
    Emitter<ViewPostState> emit,
  ) async {
    _log.info('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω s·ª± ki·ªán Started cho postId: ${event.post.postId}');
    emit(const ViewPostState.loading());

    try {
      // B∆∞·ªõc 1: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      final currentUserId = _appUserRepository.getCurrentUserId()!;
      _log.fine('üÜî Ng∆∞·ªùi d√πng hi·ªán t·∫°i: $currentUserId');

      // B∆∞·ªõc 2: L·∫•y d·ªØ li·ªáu b√†i vi·∫øt v√† t√°c gi·∫£ SONG SONG
      // ƒê√¢y l√† t·ªëi ∆∞u l·ªõn nh·∫•t: hai l·ªánh g·ªçi m·∫°ng ch√≠nh ch·∫°y c√πng l√∫c.
      _log.fine('üîÑ B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu b√†i vi·∫øt v√† t√°c gi·∫£ song song...');
      final results = await Future.wait([
        _postRepository.getPostWithId(event.post.postId), // L·∫•y post (ƒë√£ c√≥ like/save)
        _appUserRepository.getUserWithId(
          // L·∫•y t√°c gi·∫£ (ƒë√£ c√≥ follow)
          userId: event.post.authorUserId,
          currentUserId: currentUserId, // <-- TRUY·ªÄN currentUserId V√ÄO ƒê√ÇY
        ),
      ]);

      // B∆∞·ªõc 3: X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
      final postResult = results[0] as Either<PostFailure, Post>;
      final authorResult = results[1] as Either<AppUserFailure, AppUser>;

      // S·ª≠ d·ª•ng getOrElse ƒë·ªÉ x·ª≠ l√Ω l·ªói m·ªôt c√°ch g·ªçn g√†ng
      final post = postResult.getOrElse(() => throw 'Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt');
      final author = authorResult.getOrElse(() => throw 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√°c gi·∫£');

      _log.info('‚úÖ L·∫•y b√†i vi·∫øt v√† t√°c gi·∫£ th√†nh c√¥ng. author.isFollowing: ${author.isFollowing}');

      // B∆∞·ªõc 4: Emit tr·∫°ng th√°i th√†nh c√¥ng
      _log.info('üéâ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ s·∫µn s√†ng. Emit tr·∫°ng th√°i Success.');
      emit(ViewPostState.success(
        post: post,
        author: author, // <-- ƒê·ªëi t∆∞·ª£ng author n√†y ƒë√£ ch·ª©a th√¥ng tin isFollowing
        currentUserId: currentUserId,
      ));
    } catch (error, stackTrace) {
      _log.severe(
        '‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω s·ª± ki·ªán Started.',
        error,
        stackTrace,
      );
      emit(const ViewPostState.failure());
    }
  }
}
