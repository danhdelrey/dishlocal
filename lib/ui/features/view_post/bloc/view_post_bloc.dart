import 'package:bloc/bloc.dart';
import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/failure/app_user_failure.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

part 'view_post_event.dart';
part 'view_post_state.dart';
part 'view_post_bloc.freezed.dart';

@injectable
class ViewPostBloc extends Bloc<ViewPostEvent, ViewPostState> {
  final _log = Logger('ViewPostBloc');
  final PostRepository _postRepository;
  final AppUserRepository _appUserRepository;

  ViewPostBloc(
    this._postRepository,
    this._appUserRepository,
  ) : super(const ViewPostState.loading()) {
    on<Started>(_onStarted);
  }

  Future<void> _onStarted(
    Started event,
    Emitter<ViewPostState> emit,
  ) async {
    _log.info('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω s·ª± ki·ªán Started cho postId: ${event.post.postId}');
    emit(const ViewPostState.loading());

    try {
      // B∆Ø·ªöC 1: L·∫•y d·ªØ li·ªáu b√†i vi·∫øt (ƒë√£ ƒë∆∞·ª£c l√†m gi√†u) t·ª´ repository.
      // Repository ƒë√£ x·ª≠ l√Ω vi·ªác ki·ªÉm tra like, save, follow.
      _log.fine('üîÑ ƒêang g·ªçi _postRepository.getPostWithId...');
      final postResult = await _postRepository.getPostWithId(event.post.postId);

      // X·ª≠ l√Ω ngay l·∫≠p t·ª©c n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c b√†i vi·∫øt
      final post = postResult.getOrElse(() {
        _log.severe('‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu b√†i vi·∫øt. N√©m l·ªói ƒë·ªÉ d·ª´ng ti·∫øn tr√¨nh.');
        // N√©m m·ªôt l·ªói ƒë·ªÉ b·∫Øt ·ªü kh·ªëi catch b√™n ngo√†i.
        // ƒêi·ªÅu n√†y gi√∫p code g·ªçn h∆°n so v·ªõi vi·ªác l·ªìng c√°c kh·ªëi fold.
        throw 'Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt';
      });
      _log.info('‚úÖ L·∫•y d·ªØ li·ªáu b√†i vi·∫øt th√†nh c√¥ng. authorId: ${post.authorUserId}');

      // B∆Ø·ªöC 2: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† th√¥ng tin t√°c gi·∫£ SONG SONG.
      // ƒêi·ªÅu n√†y t·ªëi ∆∞u h∆°n vi·ªác ch·ªù l·∫•y post xong m·ªõi l·∫•y author.
      _log.fine('üîÑ B·∫Øt ƒë·∫ßu l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† t√°c gi·∫£ song song...');

      final results = await Future.wait([
        Future.value(_appUserRepository.getCurrentUserId()), // Kh√¥ng ph·∫£i l√† async, nh∆∞ng b·ªçc trong Future ƒë·ªÉ ƒë·ªìng b·ªô
        _appUserRepository.getUserWithId(post.authorUserId),
      ]);

      // B∆Ø·ªöC 3: X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
      final currentUserId = results[0] as String;
      final authorResult = results[1] as Either<AppUserFailure, AppUser>;

      final author = authorResult.getOrElse(() {
        _log.severe('‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t√°c gi·∫£. N√©m l·ªói ƒë·ªÉ d·ª´ng ti·∫øn tr√¨nh.');
        throw 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√°c gi·∫£';
      });

      _log.info('‚úÖ L·∫•y th√¥ng tin t√°c gi·∫£ th√†nh c√¥ng: ${author.displayName}');
      _log.fine('üÜî Ng∆∞·ªùi d√πng hi·ªán t·∫°i: $currentUserId');

      // B∆Ø·ªöC 4: Emit tr·∫°ng th√°i th√†nh c√¥ng v·ªõi t·∫•t c·∫£ d·ªØ li·ªáu
      _log.info('üéâ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ s·∫µn s√†ng. Emit tr·∫°ng th√°i Success.');
      emit(ViewPostState.success(
        post: post,
        author: author,
        currentUserId: currentUserId,
      ));
    } catch (error, stackTrace) {
      // B∆Ø·ªöC 5: B·∫Øt t·∫•t c·∫£ c√°c l·ªói c√≥ th·ªÉ x·∫£y ra ·ªü c√°c b∆∞·ªõc tr√™n
      _log.severe(
        '‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω s·ª± ki·ªán Started.',
        error,
        stackTrace,
      );
      emit(const ViewPostState.failure());
    }
  }
}
