import 'package:bloc/bloc.dart';
import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/failure/app_user_failure.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/categories/post/failure/post_failure.dart' as post_failure;
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

part 'view_post_event.dart';
part 'view_post_state.dart';
part 'view_post_bloc.freezed.dart';

@injectable
class ViewPostBloc extends Bloc<ViewPostEvent, ViewPostState> {
  final _log = Logger('ViewPostBloc');
  final PostRepository _postRepository;
  final AppUserRepository _appUserRepository;

  ViewPostBloc(
    this._postRepository,
    this._appUserRepository,
  ) : super(const ViewPostState.loading()) {
    on<Started>(_onStarted);
  }

 Future<void> _onStarted(
    Started event,
    Emitter<ViewPostState> emit,
  ) async {
    _log.info('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω s·ª± ki·ªán Started cho postId: ${event.post.postId}');
    emit(const ViewPostState.loading());

    // B∆∞·ªõc 1: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i m·ªôt c√°ch an to√†n
    final currentUserId = _appUserRepository.getCurrentUserId(); // B·ªè d·∫•u '!'
    _log.fine('üÜî Ng∆∞·ªùi d√πng hi·ªán t·∫°i: ${currentUserId ?? "Ch∆∞a ƒëƒÉng nh·∫≠p"}');

    // B∆∞·ªõc 2: L·∫•y d·ªØ li·ªáu b√†i vi·∫øt v√† t√°c gi·∫£ SONG SONG (gi·ªØ nguy√™n, r·∫•t t·ªët!)
    _log.fine('üîÑ B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu b√†i vi·∫øt v√† t√°c gi·∫£ song song...');
    final results = await Future.wait([
      _postRepository.getPostWithId(event.post.postId),
      _appUserRepository.getUserProfile(
        event.post.authorUserId,
      ),
    ]);

    // B∆∞·ªõc 3: X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ m·ªôt c√°ch an to√†n
    final postResult = results[0] as Either<post_failure.PostFailure, Post>;
    final authorResult = results[1] as Either<AppUserFailure, AppUser>;

    // B∆∞·ªõc 4: S·ª≠ d·ª•ng .fold() ƒë·ªÉ x·ª≠ l√Ω c·∫£ hai tr∆∞·ªùng h·ª£p th√†nh c√¥ng v√† th·∫•t b·∫°i
    postResult.fold(
      // ---- TR∆Ø·ªúNG H·ª¢P 1: L·∫•y b√†i vi·∫øt TH·∫§T B·∫†I ----
      (postFailure) {
        _log.severe('‚ùå L·∫•y b√†i vi·∫øt th·∫•t b·∫°i: $postFailure');

        final message = switch (postFailure) {
          // 1. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c·ª• th·ªÉ: B√†i vi·∫øt kh√¥ng t√¨m th·∫•y
          post_failure.PostNotFoundFailure() => 'B√†i vi·∫øt n√†y kh√¥ng c√≤n t·ªìn t·∫°i.',

          // 2. S·ª≠ d·ª•ng `_` ƒë·ªÉ b·∫Øt t·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p l·ªói c√≤n l·∫°i (Unknown, PermissionDenied, etc.)
          //    v√† tr·∫£ v·ªÅ m·ªôt th√¥ng b√°o chung.
          _ => 'Kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.'
        };

        emit(ViewPostState.failure(message));
      },
      // ---- TR∆Ø·ªúDNG H·ª¢P 2: L·∫•y b√†i vi·∫øt TH√ÄNH C√îNG, ti·∫øp t·ª•c x·ª≠ l√Ω t√°c gi·∫£ ----
      (post) {
        authorResult.fold(
          // ---- TR∆Ø·ªúNG H·ª¢P 2a: L·∫•y t√°c gi·∫£ TH·∫§T B·∫†I ----
          (authorFailure) {
            _log.severe('‚ùå L·∫•y t√°c gi·∫£ th·∫•t b·∫°i: $authorFailure');

            // S·ª¨ D·ª§NG SWITCH EXPRESSION ƒê·ªÇ D·ªäCH L·ªñI
            final message = switch (authorFailure) {
              UserNotFoundFailure() => 'Kh√¥ng t√¨m th·∫•y th√¥ng tin t√°c gi·∫£.',
              // Th√™m c√°c tr∆∞·ªùng h·ª£p l·ªói kh√°c c·ªßa AppUserFailure n·∫øu c·∫ßn
              _ => 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√°c gi·∫£. Vui l√≤ng th·ª≠ l·∫°i.'
            };

            emit(ViewPostState.failure(message));
          },
          // ---- TR∆Ø·ªúNG H·ª¢P 2b: L·∫•y t√°c gi·∫£ TH√ÄNH C√îNG -> M·ªåI TH·ª® HO√ÄN H·∫¢O ----
          (author) {
            _log.info('‚úÖ L·∫•y b√†i vi·∫øt v√† t√°c gi·∫£ th√†nh c√¥ng.');
            _log.info('üéâ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ s·∫µn s√†ng. Emit tr·∫°ng th√°i Success.');
            emit(ViewPostState.success(
              post: post,
              author: author,
              currentUserId: currentUserId!,
            ));
          },
        );
      },
    );
  }
}
