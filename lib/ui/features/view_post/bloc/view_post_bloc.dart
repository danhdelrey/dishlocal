import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/failure/app_user_failure.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/categories/post/failure/post_failure.dart' as post_failure;
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

part 'view_post_event.dart';
part 'view_post_state.dart';
part 'view_post_bloc.freezed.dart';

@injectable
class ViewPostBloc extends Bloc<ViewPostEvent, ViewPostState> {
  final _log = Logger('ViewPostBloc');
  final PostRepository _postRepository;
  final AppUserRepository _appUserRepository;

  // TH√äM M·ªòT BI·∫æN ƒê·ªÇ THEO D√ïI TH·ªúI GIAN
  Timer? _viewDurationTimer;
  final _stopwatch = Stopwatch();

  ViewPostBloc(
    this._postRepository,
    this._appUserRepository,
  ) : super(const ViewPostState.loading()) {
    on<Started>(_onStarted);
    // TH√äM X·ª¨ L√ù S·ª∞ KI·ªÜN KHI BLOC B·ªä H·ª¶Y
    on<PageExited>(_onPageExited);
  }

  @override
  Future<void> close() {
    // ƒê·∫£m b·∫£o timer ƒë∆∞·ª£c h·ªßy khi bloc b·ªã dispose
    _viewDurationTimer?.cancel();
    _stopwatch.stop();
    return super.close();
  }

  /// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng r·ªùi kh·ªèi trang xem b√†i vi·∫øt.
  Future<void> _onPageExited(
    PageExited event,
    Emitter<ViewPostState> emit,
  ) async {
    _viewDurationTimer?.cancel();
    _stopwatch.stop();

    final durationMs = _stopwatch.elapsedMilliseconds;
    // Ch·ªâ ghi nh·∫≠n n·∫øu ng∆∞·ªùi d√πng ƒë√£ ·ªü l·∫°i trang √≠t nh·∫•t m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
    // (v√≠ d·ª•: 1 gi√¢y) ƒë·ªÉ tr√°nh ghi nh·∫≠n c√°c l∆∞·ª£t xem "l∆∞·ªõt qua".
    if (durationMs > 1000) {
      _log.info(
        'üö™ Ng∆∞·ªùi d√πng r·ªùi kh·ªèi trang. Ghi nh·∫≠n th·ªùi gian xem: ${durationMs}ms cho postId: ${event.postId}',
      );
      // G·ªçi "fire-and-forget"
      unawaited(_postRepository.recordPostView(
        postId: event.postId,
        durationInMs: durationMs,
      ));
    } else {
      _log.info(
        'üö™ Ng∆∞·ªùi d√πng r·ªùi kh·ªèi trang qu√° nhanh (${durationMs}ms). Kh√¥ng ghi nh·∫≠n th·ªùi gian xem.',
      );
    }
  }

  Future<void> _onStarted(
    Started event,
    Emitter<ViewPostState> emit,
  ) async {
    _log.info('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω s·ª± ki·ªán Started cho postId: ${event.post.postId}');
    emit(const ViewPostState.loading());

    // B∆∞·ªõc 1: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
    final currentUserId = _appUserRepository.getCurrentUserId();
    _log.fine('üÜî Ng∆∞·ªùi d√πng hi·ªán t·∫°i: ${currentUserId ?? "Ch∆∞a ƒëƒÉng nh·∫≠p"}');

    // B∆∞·ªõc 2: L·∫•y d·ªØ li·ªáu b√†i vi·∫øt v√† t√°c gi·∫£ song song
    _log.fine('üîÑ B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu b√†i vi·∫øt v√† t√°c gi·∫£ song song...');
    final results = await Future.wait([
      _postRepository.getPostWithId(event.post.postId),
      _appUserRepository.getUserProfile(
        event.post.authorUserId,
      ),
    ]);

    // B∆∞·ªõc 3: X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
    final postResult = results[0] as Either<post_failure.PostFailure, Post>;
    final authorResult = results[1] as Either<AppUserFailure, AppUser>;

    // B∆∞·ªõc 4: S·ª≠ d·ª•ng .fold() ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p
    postResult.fold(
      (postFailure) {
        _log.severe('‚ùå L·∫•y b√†i vi·∫øt th·∫•t b·∫°i: $postFailure');
        final message = switch (postFailure) { post_failure.PostNotFoundFailure() => 'B√†i vi·∫øt n√†y kh√¥ng c√≤n t·ªìn t·∫°i.', _ => 'Kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.' };
        emit(ViewPostState.failure(message));
      },
      (post) {
        // ---- T√çCH H·ª¢P LOGIC GHI NH·∫¨N L∆Ø·ª¢T XEM T·∫†I ƒê√ÇY ----
        // Ngay khi c√≥ th√¥ng tin b√†i vi·∫øt, ch√∫ng ta b·∫Øt ƒë·∫ßu ghi nh·∫≠n.
        _log.info('üìù Ghi nh·∫≠n l∆∞·ª£t xem ban ƒë·∫ßu cho postId: ${post.postId}');

        // 1. Ghi nh·∫≠n l∆∞·ª£t xem ban ƒë·∫ßu (kh√¥ng c√≥ th·ªùi gian xem)
        // Ch√∫ng ta kh√¥ng ch·ªù (await) k·∫øt qu·∫£. N·∫øu n√≥ th·∫•t b·∫°i, c≈©ng kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn UI.
        unawaited(_postRepository.recordPostView(postId: post.postId));

        // 2. B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian xem
        _stopwatch
          ..reset()
          ..start();

        // 3. X·ª≠ l√Ω k·∫øt qu·∫£ c·ªßa t√°c gi·∫£
        authorResult.fold(
          (authorFailure) {
            _log.severe('‚ùå L·∫•y t√°c gi·∫£ th·∫•t b·∫°i: $authorFailure');
            final message = switch (authorFailure) { UserNotFoundFailure() => 'Kh√¥ng t√¨m th·∫•y th√¥ng tin t√°c gi·∫£.', _ => 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√°c gi·∫£. Vui l√≤ng th·ª≠ l·∫°i.' };
            emit(ViewPostState.failure(message));
          },
          (author) {
            _log.info('‚úÖ L·∫•y b√†i vi·∫øt v√† t√°c gi·∫£ th√†nh c√¥ng.');
            _log.info('üéâ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ s·∫µn s√†ng. Emit tr·∫°ng th√°i Success.');
            emit(ViewPostState.success(
              post: post,
              author: author,
              currentUserId: currentUserId!,
            ));
          },
        );
      },
    );
  }
}
