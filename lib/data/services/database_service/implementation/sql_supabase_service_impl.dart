import 'dart:io';

import 'package:dishlocal/data/services/database_service/exception/sql_database_service_exception.dart';
import 'package:dishlocal/data/services/database_service/interface/sql_database_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

@LazySingleton(as: SqlDatabaseService)
class SqlSupabaseServiceImpl implements SqlDatabaseService {
  final _log = Logger('SqlSupabaseServiceImpl');
  final _supabase = Supabase.instance.client;

  /// B·ªçc m·ªôt thao t√°c c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω v√† chuy·ªÉn ƒë·ªïi l·ªói m·ªôt c√°ch nh·∫•t qu√°n.
  Future<T> _wrapDbOperation<T>(String operationName, Future<T> Function() operation) async {
    try {
      // üöÄ B·∫Øt ƒë·∫ßu th·ª±c thi, kh√¥ng c√≥ l·ªói n√†o ƒë∆∞·ª£c ghi nh·∫≠n t·∫°i th·ªùi ƒëi·ªÉm n√†y.
      return await operation();
    } on PostgrestException catch (e, st) {
      _log.severe('_wrapDbOperation(): üö® PostgrestException trong [$operationName]', e, st);
      _handlePostgrestException(e); // S·∫Ω lu√¥n n√©m ra l·ªói, kh√¥ng bao gi·ªù tr·∫£ v·ªÅ
    } on SocketException catch (e, st) {
      _log.severe('_wrapDbOperation(): üï∏Ô∏è L·ªói m·∫°ng (SocketException) trong [$operationName]', e, st);
      throw DatabaseConnectionException();
    } on TypeError catch (e, st) {
      _log.severe('_wrapDbOperation(): üß© L·ªói ph√¢n t√≠ch d·ªØ li·ªáu (TypeError) trong [$operationName]', e, st);
      throw DataParsingException(e.toString());
    } catch (e, st) {
      _log.severe('_wrapDbOperation(): ‚ùì L·ªói kh√¥ng x√°c ƒë·ªãnh trong [$operationName]', e, st);
      throw UnknownDatabaseException(e.toString());
    }
  }

  @override
  Future<T> create<T>({
    required String tableName,
    required Map<String, dynamic> data,
    required T Function(Map<String, dynamic> json) fromJson,
  }) {
    final operationName = 'CREATE in "$tableName"';
    return _wrapDbOperation(operationName, () async {
      _log.info('create(): ‚û°Ô∏è $operationName: B·∫Øt ƒë·∫ßu t·∫°o b·∫£n ghi m·ªõi.');
      final result = await _supabase.from(tableName).insert(data).select().single();

      _log.info('create(): ‚úÖ $operationName: T·∫°o b·∫£n ghi th√†nh c√¥ng!');
      return fromJson(result);
    });
  }

  @override
  Future<List<T>> readList<T>({
    required String tableName,
    required T Function(Map<String, dynamic> json) fromJson,
    Map<String, dynamic>? filters,
    OrderBy? orderBy,
  }) {
    final operationName = 'READ LIST from "$tableName"';
    return _wrapDbOperation(operationName, () async {
      _log.info('readList(): ‚û°Ô∏è $operationName: B·∫Øt ƒë·∫ßu truy v·∫•n danh s√°ch. Filters: $filters, OrderBy: ${orderBy?.column}');

      // [FIXED] B·∫Øt ƒë·∫ßu v·ªõi ki·ªÉu 'PostgrestFilterBuilder' c·ª• th·ªÉ.
      // S·ª≠ d·ª•ng 'var' ƒë·ªÉ Dart t·ª± suy lu·∫≠n ki·ªÉu n√†y.
      var query = _supabase.from(tableName).select();

      // 1. √Åp d·ª•ng t·∫•t c·∫£ c√°c b·ªô l·ªçc.
      // T·∫°i ƒë√¢y, 'query' v·∫´n lu√¥n l√† 'PostgrestFilterBuilder'.
      if (filters != null) {
        _log.info('readList(): üîç $operationName: √Åp d·ª•ng b·ªô l·ªçc...');
        for (var filter in filters.entries) {
          query = query.eq(filter.key, filter.value);
        }
      }

      // 2. T·∫°i th·ªùi ƒëi·ªÉm await, quy·∫øt ƒë·ªãnh xem c√≥ c·∫ßn s·∫Øp x·∫øp hay kh√¥ng.
      // C√°ch n√†y ƒë·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu lu√¥n ƒë√∫ng ·ªü m·ªçi b∆∞·ªõc.
      final result = await (orderBy != null
          ? query.order(orderBy.column, ascending: orderBy.ascending) // N·∫øu c√≥, k·∫øt qu·∫£ c·ªßa bi·ªÉu th·ª©c n√†y l√† PostgrestTransformBuilder
          : query); // N·∫øu kh√¥ng, ch√≠nh l√† PostgrestFilterBuilder

      _log.info('readList(): ‚úÖ $operationName: Truy v·∫•n th√†nh c√¥ng, t√¨m th·∫•y ${result.length} b·∫£n ghi.');
      return result.map((json) => fromJson(json)).toList();
    });
  }

  @override
  Future<T> readSingleById<T>({
    required String tableName,
    required String id,
    required T Function(Map<String, dynamic> json) fromJson,
  }) {
    final operationName = 'READ SINGLE from "$tableName"';
    return _wrapDbOperation(operationName, () async {
      _log.info('readSingleById(): ‚û°Ô∏è $operationName: B·∫Øt ƒë·∫ßu truy v·∫•n b·∫£n ghi v·ªõi ID: $id');
      final result = await _supabase.from(tableName).select().eq('id', id).single();

      _log.info('readSingleById():‚úÖ $operationName: Truy v·∫•n b·∫£n ghi ID $id th√†nh c√¥ng!');
      return fromJson(result);
    });
  }

  @override
  Future<T> update<T>({
    required String tableName,
    required String id,
    required Map<String, dynamic> data,
    required T Function(Map<String, dynamic> json) fromJson,
  }) async {
    return _wrapDbOperation('UPDATE in "$tableName"', () async {
      _log.info('update(): ‚û°Ô∏è UPDATE in "$tableName": B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t b·∫£n ghi ID: $id');
      try {
        final response = await _supabase
            .from(tableName)
            .update(data)
            .eq('id', id)
            // üî• THAY ƒê·ªîI QUAN TR·ªåNG:
            // Y√™u c·∫ßu Supabase tr·∫£ v·ªÅ b·∫£n ghi M·ªöI NH·∫§T sau khi update.
            .select()
            .single(); // .single() s·∫Ω ƒë·∫£m b·∫£o ch·ªâ c√≥ 1 d√≤ng v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng Map

        _log.info('update(): ‚úÖ UPDATE in "$tableName": C·∫≠p nh·∫≠t v√† l·∫•y l·∫°i b·∫£n ghi ID $id th√†nh c√¥ng!');
        return fromJson(response); // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu m·ªõi nh·∫•t v√† tr·∫£ v·ªÅ
      } catch (e) {
        // B·∫Øt l·ªói v√† n√©m l·∫°i ƒë·ªÉ _wrapDbOperation x·ª≠ l√Ω
        throw _handlePostgrestException(e as PostgrestException);
      }
    });
  }

  @override
  Future<void> delete({required String tableName, required String id}) {
    final operationName = 'DELETE from "$tableName"';
    return _wrapDbOperation(operationName, () async {
      _log.info('delete(): ‚û°Ô∏è $operationName: B·∫Øt ƒë·∫ßu x√≥a b·∫£n ghi ID: $id');
      await _supabase.from(tableName).delete().eq('id', id);
      _log.info('delete(): ‚úÖ $operationName: X√≥a b·∫£n ghi ID $id th√†nh c√¥ng!');
    });
  }

  // --- Helper ƒë·ªÉ ph√¢n t√≠ch l·ªói ---
  Never _handlePostgrestException(PostgrestException e) {
    _log.severe('üí• B·∫Øt ƒë·∫ßu ph√¢n t√≠ch PostgrestException: code=${e.code}, message=${e.message}, details=${e.details}');

    if (e.code == 'PGRST116') {
      _log.info('_handlePostgrestException(): üó∫Ô∏è Mapping [PGRST116] to RecordNotFoundException.');
      throw RecordNotFoundException(recordType: 'unknown', recordId: 'unknown');
    }
    if (e.code == '23505') {
      final fieldName = _extractFieldNameFromDetail(e.details.toString()) ?? 'unknown';
      _log.info('_handlePostgrestException(): üó∫Ô∏è Mapping [23505] to UniqueConstraintViolationException for field "$fieldName".');
      throw UniqueConstraintViolationException(fieldName: fieldName, value: 'ƒë√£ t·ªìn t·∫°i');
    }
    if (e.code == '23503') {
      final fieldName = _extractFieldNameFromDetail(e.details.toString()) ?? 'unknown';
      _log.info('_handlePostgrestException(): üó∫Ô∏è Mapping [23503] to ForeignKeyConstraintViolationException for field "$fieldName".');
      throw ForeignKeyConstraintViolationException(fieldName: fieldName, referenceTable: 'unknown');
    }
    if (e.code == '23514') {
      final constraintName = _extractConstraintNameFromDetail(e.details.toString()) ?? 'unknown';
      _log.info('_handlePostgrestException(): üó∫Ô∏è Mapping [23514] to CheckConstraintViolationException for constraint "$constraintName".');
      throw CheckConstraintViolationException(fieldName: 'unknown', constraintName: constraintName);
    }
    if (e.message.contains('violates row-level security policy')) {
      _log.info('_handlePostgrestException(): üó∫Ô∏è Mapping RLS violation message to PermissionDeniedException.');
      throw PermissionDeniedException();
    }

    _log.severe('_handlePostgrestException(): ‚ùì Kh√¥ng th·ªÉ map PostgrestException. N√©m ra l·ªói UnknownDatabaseException.');
    throw UnknownDatabaseException(e.message);
  }

  String? _extractFieldNameFromDetail(String detail) {
    final match = RegExp(r'\((.*?)\)').firstMatch(detail);
    return match?.group(1);
  }

  String? _extractConstraintNameFromDetail(String detail) {
    final match = RegExp(r'violates check constraint "(.*?)"').firstMatch(detail);
    return match?.group(1);
  }

  @override
  Future<void> rpc(String functionName, {Map<String, dynamic>? params}) async {
    await _supabase.rpc(functionName, params: params);
  }
}
