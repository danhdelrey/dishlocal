import 'dart:convert';
import 'dart:typed_data';

import 'package:dio/dio.dart';
import 'package:dishlocal/core/app_environment/app_environment.dart';
import 'package:dishlocal/data/services/generative_ai_service/exception/generative_ai_service_exception.dart';
import 'package:dishlocal/data/services/generative_ai_service/interface/generative_ai_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

/// L·ªõp tri·ªÉn khai c·ªßa [GenerativeAiService] s·ª≠ d·ª•ng Google Gemini API.
///
/// L·ªõp n√†y ch·ªãu tr√°ch nhi·ªám:
/// 1. T·∫£i ·∫£nh t·ª´ m·ªôt URL.
/// 2. G·ª≠i ·∫£nh v√† prompt ƒë·∫øn Gemini Vision API.
/// 3. Ph√¢n t√≠ch c√∫ ph√°p ph·∫£n h·ªìi ƒë·ªÉ tr√≠ch xu·∫•t m√¥ t·∫£ m√≥n ƒÉn.
/// 4. X·ª≠ l√Ω c√°c l·ªói ti·ªÅm ·∫©n nh∆∞ l·ªói m·∫°ng, l·ªói API v√† l·ªói ƒë·∫ßu v√†o.
@LazySingleton(as: GenerativeAiService)
class GeminiAiServiceImpl implements GenerativeAiService {
  final Logger _log;
  final Dio _dio;
  final String _apiKey;

  // S·ª≠ d·ª•ng model gemini-1.5-flash v√¨ n√≥ nhanh v√† hi·ªáu qu·∫£ v·ªÅ chi ph√≠ cho c√°c t√°c v·ª• vision.
  static const String _geminiModel = 'gemini-2.5-pro';
  static const String _geminiApiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/$_geminiModel:generateContent';

  // C·∫•u h√¨nh th·ªùi gian ch·ªù ƒë·ªÉ tr√°nh treo ·ª©ng d·ª•ng khi m·∫°ng ch·∫≠m ho·∫∑c API ph·∫£n h·ªìi l√¢u.
  static const Duration _apiTimeout = Duration(seconds: 45);

  GeminiAiServiceImpl()
      : _log = Logger('GeminiAiServiceImpl'),
        _dio = Dio(), // Kh·ªüi t·∫°o m·ªôt instance Dio m·ªõi
        _apiKey = AppEnvironment.geminiApiKey; // L·∫•y API key t·ª´ m√¥i tr∆∞·ªùng

  @override
  Future<String> generateDishDescription({
    required String imageUrl,
    required String dishName,
  }) async {
    _log.info('üöÄ B·∫Øt ƒë·∫ßu t·∫°o m√¥ t·∫£ cho m√≥n: "$dishName"');

    // --- B∆Ø·ªöC 1: Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt ---
    if (_apiKey.isEmpty) {
      _log.severe('L·ªói nghi√™m tr·ªçng: Gemini API Key ch∆∞a ƒë∆∞·ª£c cung c·∫•p.');
      throw InvalidApiKeyException('API key is not configured.');
    }

    try {
      // --- B∆Ø·ªöC 2: Chu·∫©n b·ªã d·ªØ li·ªáu cho API call ---
      final imageBytes = await _downloadImageFromUrl(imageUrl);
      final base64Image = base64Encode(imageBytes);
      final requestBody = _buildApiRequestBody(dishName, base64Image);
      _log.fine('‚úÖ D·ªØ li·ªáu ·∫£nh v√† request body ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã.');

      // --- B∆Ø·ªöC 3: G·ªçi Gemini API ---
      _log.fine('ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API...');
      final response = await _dio.post(
        _geminiApiUrl,
        queryParameters: {'key': _apiKey},
        data: requestBody,
        options: Options(
          headers: {'Content-Type': 'application/json'},
          receiveTimeout: _apiTimeout,
          sendTimeout: _apiTimeout,
        ),
      );

      _log.info('‚úÖ Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini API (Status: ${response.statusCode})');

      // --- B∆Ø·ªöC 4: X·ª≠ l√Ω ph·∫£n h·ªìi v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ ---
      final description = _parseDescriptionFromResponse(response.data);
      _log.info('üéâ T·∫°o m√¥ t·∫£ th√†nh c√¥ng cho m√≥n "$dishName"!');

      return description;
    } on InvalidInputException {
      // B·∫Øt v√† n√©m l·∫°i l·ªói ƒë·∫ßu v√†o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª´ c√°c h√†m con
      rethrow;
    } on DioException catch (e, stackTrace) {
      // X·ª≠ l√Ω t·∫•t c·∫£ c√°c l·ªói li√™n quan ƒë·∫øn m·∫°ng v√† HTTP t·ª´ Dio
      _log.severe('L·ªói DioException khi giao ti·∫øp v·ªõi Gemini API.', e, stackTrace);
      throw _mapDioExceptionToServiceException(e);
    } on ContentGenerationException {
      // B·∫Øt v√† n√©m l·∫°i l·ªói t·∫°o n·ªôi dung t·ª´ h√†m parse
      rethrow;
    } catch (e, stackTrace) {
      // B·∫Øt c√°c l·ªói kh√¥ng l∆∞·ªùng tr∆∞·ªõc kh√°c
      _log.severe('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh t·∫°o m√¥ t·∫£.', e, stackTrace);
      throw UnknownGenerativeAiException('An unexpected error occurred: ${e.toString()}');
    }
  }

  /// T·∫£i d·ªØ li·ªáu h√¨nh ·∫£nh t·ª´ m·ªôt URL.
  /// N√©m ra [InvalidInputException] n·∫øu URL kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c.
  Future<Uint8List> _downloadImageFromUrl(String imageUrl) async {
    try {
      _log.fine('ƒêang t·∫£i ·∫£nh t·ª´: $imageUrl');
      final response = await _dio.get<List<int>>(
        imageUrl,
        options: Options(responseType: ResponseType.bytes, receiveTimeout: const Duration(seconds: 20)),
      );

      if (response.data == null || response.data!.isEmpty) {
        throw InvalidInputException('D·ªØ li·ªáu ·∫£nh t·∫£i v·ªÅ b·ªã r·ªóng.');
      }
      return Uint8List.fromList(response.data!);
    } on DioException catch (e) {
      _log.warning('Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL.', e);
      throw InvalidInputException('Failed to download image from URL: $imageUrl. Error: ${e.message}');
    }
  }

  /// X√¢y d·ª±ng ph·∫ßn th√¢n (body) c·ªßa request ƒë·ªÉ g·ª≠i ƒë·∫øn Gemini API.
  Map<String, dynamic> _buildApiRequestBody(String dishName, String base64Image) {
    return {
      "contents": [
        {
          "parts": [
            {"text": "H√£y vi·∫øt m·ªôt ƒëo·∫°n m√¥ t·∫£ ·∫©m th·ª±c ng·∫Øn g·ªçn (5-10 c√¢u), h·∫•p d·∫´n v·ªÅ m√≥n ƒÉn c√≥ t√™n \"$dishName\". N·∫øu h√¨nh ·∫£nh l√† v·ªÅ m√≥n ƒÉn ƒë√≥ th√¨ d·ª±a v√†o h√¨nh ·∫£nh, h√£y l√†m n·ªïi b·∫≠t v·∫ª ngo√†i, k·∫øt c·∫•u c√≥ th·ªÉ c√≥, v√† g·ª£i √Ω v·ªÅ h∆∞∆°ng v·ªã ƒë·ªÉ l√¥i cu·ªën ng∆∞·ªùi ƒë·ªçc. N·∫øu h√¨nh ·∫£nh kh√¥ng li√™n quan ƒë·∫øn m√≥n ƒÉn c√≥ t√™n \"$dishName\" th√¨ b·ªè qua ph·∫ßn h√¨nh ·∫£nh m√† ch·ªâ vi·∫øt m√¥ t·∫£ v·ªÅ m√≥n ƒÉn \"$dishName\"."},
            {
              "inline_data": {"mime_type": "image/jpeg", "data": base64Image}
            }
          ]
        }
      ],
      "generationConfig": {
        "temperature": 0.5, // TƒÉng nh·∫π ƒë·ªÉ c√≥ s·ª± s√°ng t·∫°o
        "maxOutputTokens": 1024,
      },
      "safetySettings": [
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"}
      ]
    };
  }

  /// Tr√≠ch xu·∫•t m√¥ t·∫£ vƒÉn b·∫£n t·ª´ ph·∫£n h·ªìi JSON c·ªßa API.
  /// N√©m ra [ContentGenerationException] n·∫øu kh√¥ng t√¨m th·∫•y n·ªôi dung h·ª£p l·ªá.
  String _parseDescriptionFromResponse(dynamic responseData) {
    try {
      // C·∫•u tr√∫c ph·∫£n h·ªìi: response['candidates'][0]['content']['parts'][0]['text']
      final candidates = responseData['candidates'] as List<dynamic>?;
      if (candidates == null || candidates.isEmpty) {
        final blockReason = responseData['promptFeedback']?['blockReason'];
        if (blockReason != null) {
          _log.warning('N·ªôi dung b·ªã ch·∫∑n b·ªüi b·ªô l·ªçc an to√†n. L√Ω do: $blockReason');
          throw ContentGenerationException('Content was blocked by safety filters. Reason: $blockReason');
        }
        throw ContentGenerationException('API response is missing "candidates" field.');
      }

      final text = candidates.first['content']['parts'][0]['text'] as String?;
      if (text == null || text.trim().isEmpty) {
        throw ContentGenerationException('API returned an empty description.');
      }
      return text.trim();
    } catch (e, stackTrace) {
      _log.severe('Kh√¥ng th·ªÉ ph√¢n t√≠ch c√∫ ph√°p ph·∫£n h·ªìi t·ª´ Gemini.', e, stackTrace);
      throw ContentGenerationException('Failed to parse a valid description from the API response.');
    }
  }

  /// √Ånh x·∫° m·ªôt [DioException] sang m·ªôt [GenerativeAiServiceException] c·ª• th·ªÉ h∆°n.
  GenerativeAiServiceException _mapDioExceptionToServiceException(DioException e) {
    // L·ªói c√≥ ph·∫£n h·ªìi t·ª´ server (l·ªói HTTP 4xx, 5xx)
    if (e.response != null) {
      final statusCode = e.response!.statusCode;
      final errorMessage = e.response!.data?['error']?['message'] ?? 'No specific error message from API.';
      _log.warning('L·ªói HTTP t·ª´ API - Status: $statusCode, Message: $errorMessage');

      switch (statusCode) {
        case 400:
          return InvalidInputException('Bad Request: $errorMessage. Please check the image format or prompt.');
        case 401:
        case 403:
          return InvalidApiKeyException('Authentication failed. The API Key may be invalid or missing permissions. ($errorMessage)');
        case 500:
        case 503:
          return GeminiServerException('Gemini API is currently unavailable (HTTP $statusCode). Please try again later.');
        default:
          return UnknownGenerativeAiException('Received an unexpected HTTP status code $statusCode from the API.');
      }
    } else {
      // L·ªói kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server (l·ªói m·∫°ng, timeout)
      _log.warning('L·ªói m·∫°ng ho·∫∑c k·∫øt n·ªëi. Type: ${e.type}');
      return GeminiNetworkException('Network error occurred. Please check your connection and try again. Error: ${e.message}');
    }
  }
}
