import 'dart:convert';
import 'dart:io';

import 'package:dishlocal/data/services/moderation_service/exception/moderation_service_exception.dart';
import 'package:dishlocal/data/services/moderation_service/interface/moderation_service.dart';
import 'package:http/http.dart' as http;
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

@LazySingleton(as: ModerationService)
class SightengineModerationServiceImpl implements ModerationService {
  final _log = Logger('SightengineModerationServiceImpl');
  static const String _apiUrl = 'https://api.sightengine.com/1.0/check.json';
  //TODO L∆ØU √ù: L∆∞u c√°c key n√†y v√†o file .env, kh√¥ng hard-code!
  final String _apiUser = 'YOUR_SIGHTENGINE_API_USER';
  final String _apiSecret = 'YOUR_SIGHTENGINE_API_SECRET';

  @override
  Future<void> checkImage(File imageFile) async {
    const operationName = 'Ki·ªÉm duy·ªát h√¨nh ·∫£nh';
    _log.info('üëÅÔ∏è $operationName: B·∫Øt ƒë·∫ßu...');

    try {
      var request = http.MultipartRequest('POST', Uri.parse(_apiUrl));
      request.fields['models'] = 'nudity-2.0,wad,offensive';
      request.fields['api_user'] = _apiUser;
      request.fields['api_secret'] = _apiSecret;
      request.files.add(await http.MultipartFile.fromPath('media', imageFile.path));

      _log.fine('üì§ $operationName: ƒêang g·ª≠i ·∫£nh ƒë·∫øn Sightengine...');
      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        _log.fine('‚úÖ $operationName: Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi: $jsonResponse');

        // KI·ªÇM TRA VI PH·∫†M V√Ä N√âM EXCEPTION
        if (jsonResponse['nudity']['safe'] < 0.8) {
          throw ImageUnsafeException('N·ªôi dung nh·∫°y c·∫£m');
        }
        if (jsonResponse['weapon'] > 0.5) {
          throw ImageUnsafeException('H√¨nh ·∫£nh ch·ª©a v≈© kh√≠');
        }
        if (jsonResponse['offensive']['prob'] > 0.5) {
          throw ImageUnsafeException('N·ªôi dung g√¢y kh√≥ ch·ªãu');
        }

        _log.info('üëç $operationName: H√¨nh ·∫£nh ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† an to√†n.');
        // N·∫øu kh√¥ng c√≥ l·ªói, h√†m k·∫øt th√∫c b√¨nh th∆∞·ªùng (tr·∫£ v·ªÅ Future<void>)
        return;
      } else {
        _log.severe('‚ùå $operationName: L·ªói t·ª´ API. Status: ${response.statusCode}, Body: ${response.body}');
        throw ModerationRequestException('L·ªói server (${response.statusCode})');
      }
    } on ImageUnsafeException {
      // B·∫Øt l·∫°i ƒë·ªÉ re-throw, tr√°nh b·ªã b·∫Øt b·ªüi catch (e) b√™n d∆∞·ªõi
      rethrow;
    } catch (e, st) {
      _log.severe('‚ùå $operationName: L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API.', e, st);
      throw ModerationRequestException(e.toString());
    }
  }
}
