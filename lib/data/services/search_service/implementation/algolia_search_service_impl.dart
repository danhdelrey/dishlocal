import 'dart:async';

import 'package:algoliasearch/algoliasearch.dart';
import 'package:dishlocal/core/app_environment/app_environment.dart';
import 'package:dishlocal/data/categories/post/model/filter_sort_model/filter_sort_params.dart';
import 'package:dishlocal/data/categories/post/model/filter_sort_model/sort_option.dart';
import 'package:dishlocal/data/services/search_service/exception/search_service_exception.dart';
import 'package:dishlocal/data/services/search_service/interface/search_service.dart';
import 'package:dishlocal/data/services/search_service/model/search_result.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

@LazySingleton(as: SearchService)
class AlgoliaSearchServiceImpl implements SearchService {
  final _log = Logger('AlgoliaSearchServiceImpl');
  final SearchClient _searchClient = SearchClient(
    appId: AppEnvironment.algoliaAppId,
    apiKey: AppEnvironment.algoliaApiKey,
  );

  AlgoliaSearchServiceImpl() {
    _log.info('AlgoliaSearchServiceImpl initialized. App ID: ${AppEnvironment.algoliaAppId}');
  }

  @override
  Future<SearchResult> search({
    required String query,
    required SearchableItem searchType,
    int page = 0,
    int hitsPerPage = 20,
    FilterSortParams? filterParams,
    String? latLongForGeoSearch,
  }) async {
    _log.fine(
      'Starting search for query: "$query" in type: ${searchType.name} '
      '| page: $page | hitsPerPage: $hitsPerPage',
    );

    if (query.trim().isEmpty) {
      _log.warning('Search query is empty. Throwing InvalidSearchQueryException.');
      throw InvalidSearchQueryException('Truy v·∫•n t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }

    String indexName;
    if (searchType == SearchableItem.posts && filterParams != null) {
      // Logic ch·ªçn replica index d·ª±a tr√™n t√πy ch·ªçn s·∫Øp x·∫øp
      final sortOption = filterParams.sortOption;
      final isDescending = sortOption.direction == SortDirection.desc;

      switch (sortOption.field) {
        case SortField.relevance: // <-- TH√äM M·ªöI
          indexName = 'posts';
          break;
        case SortField.datePosted:
          // N·∫øu s·∫Øp x·∫øp theo ng√†y ƒëƒÉng m·ªõi nh·∫•t, d√πng index ch√≠nh (s·∫Øp x·∫øp theo relevance l√† ∆∞u ti√™n).
          // N·∫øu s·∫Øp x·∫øp theo ng√†y c≈© nh·∫•t, d√πng replica t∆∞∆°ng ·ª©ng.
          indexName = isDescending ? 'posts_created_at_desc' : 'posts_created_at_asc';
          break;

        case SortField.likes:
          indexName = isDescending ? 'posts_like_count_desc' : 'posts_like_count_asc';
          break;

        case SortField.saves:
          indexName = isDescending ? 'posts_save_count_desc' : 'posts_save_count_asc';
          break;

        case SortField.comments:
          indexName = isDescending ? 'posts_comment_count_desc' : 'posts_comment_count_asc';
          break;
      }
    } else {
      // Gi·ªØ nguy√™n logic c≈© cho t√¨m ki·∫øm profile ho·∫∑c post kh√¥ng c√≥ filter/sort
      indexName = (searchType == SearchableItem.posts) ? 'posts' : 'profiles';
    }

    _log.finer('Using Algolia index: "$indexName"');

    // --- X√ÇY D·ª∞NG B·ªò L·ªåC CHO ALGOLIA ---
    final List<String> filters = [];
    int? radius;

    _log.info('üîç B·∫Øt ƒë·∫ßu x√¢y d·ª±ng b·ªô l·ªçc. filterParams is null? ${filterParams == null}');

    if (filterParams != null) {
      // LOG TO√ÄN B·ªò PARAMS ƒê·ªÇ XEM
      _log.info('‚öôÔ∏è filterParams nh·∫≠n ƒë∆∞·ª£c: ${filterParams.toVietnameseString}');

      // 1. L·ªçc gi√°
      _log.info('  - Ki·ªÉm tra l·ªçc gi√°: filterParams.range is null? ${filterParams.range == null}');
      if (filterParams.range != null) {
        final min = filterParams.range!.minPrice.toInt();
        final max = filterParams.range!.maxPrice;
        filters.add('price >= $min');
        _log.finer('    -> Th√™m filter: price >= $min');
        if (max != double.infinity) {
          filters.add('price < ${max.toInt()}');
          _log.finer('    -> Th√™m filter: price < ${max.toInt()}');
        }
      }

      // 2. L·ªçc category
      _log.info('  - Ki·ªÉm tra l·ªçc category: filterParams.categories is empty? ${filterParams.categories.isEmpty}');
      if (filterParams.categories.isNotEmpty) {
        final categoryFilters = filterParams.categories.map((c) => "food_category:'${c.name}'").join(' OR ');
        filters.add('($categoryFilters)');
        _log.finer('    -> Th√™m filter: ($categoryFilters)');
      }

      // 3. X·ª≠ l√Ω b√°n k√≠nh (radius)
      _log.info('  - Ki·ªÉm tra l·ªçc kho·∫£ng c√°ch: filterParams.distance is null? ${filterParams.distance == null}');
      if (filterParams.distance != null) {
        if (filterParams.distance!.maxDistance != double.infinity) {
          radius = filterParams.distance!.maxDistance.toInt();
          _log.finer('    -> ƒê·∫∑t radius: $radius m√©t');
        } else {
          _log.finer('    -> B√°n k√≠nh l√† v√¥ c·ª±c, kh√¥ng gi·ªõi h·∫°n.');
        }
      }
    }

    // LOG CHU·ªñI FILTER CU·ªêI C√ôNG
    final finalFilterString = filters.isNotEmpty ? filters.join(' AND ') : null;
    _log.info('‚úÖ Chu·ªói filter cu·ªëi c√πng: "$finalFilterString"');

    try {
      final searchRequest = SearchForHits(
        indexName: indexName,
        query: query,
        page: page,
        hitsPerPage: hitsPerPage,
        filters: finalFilterString, // <-- D√πng bi·∫øn ƒë√£ log
        aroundLatLng: latLongForGeoSearch,
        aroundRadius: radius,
      );

      _log.info('üöÄ Sending Algolia Request:\n${searchRequest.toJson()}');

      // 2. G·ªçi API v√† truy·ªÅn ƒë·ªëi t∆∞·ª£ng v·ª´a t·∫°o v√†o tham s·ªë `request`
      final response = await _searchClient.searchIndex(
        request: searchRequest,
      );
      // ------------------------------------

      _log.info(
        'Search successful. Found ${response.nbHits} hits '
        'in ${response.processingTimeMS}ms.',
      );

      return SearchResult(
          totalPage: response.nbPages,
          totalHits: response.nbHits,
          currentPage: response.page,
          objectIds: response.hits
              .map(
                (hit) => hit.objectID,
              )
              .toList());
    } on AlgoliaApiException catch (e, stackTrace) {
      _log.severe(
        'Algolia API Error! Status: ${e.statusCode}, Message: ${e.error}',
        e,
        stackTrace,
      );
      switch (e.statusCode) {
        case 401:
        case 403:
          throw SearchAuthenticationException(e.error.toString());
        case 404:
          throw SearchIndexNotFoundException(indexName, e.error.toString());
        case 429:
          throw SearchRateLimitException(e.error.toString());
        default:
          throw UnknownSearchApiException(
            message: e.error.toString(),
            statusCode: e.statusCode,
          );
      }
    } on AlgoliaTimeoutException catch (e, stackTrace) {
      _log.severe('Algolia request timed out.', e, stackTrace);
      throw SearchConnectionException('Y√™u c·∫ßu t√¨m ki·∫øm ƒë√£ h·∫øt th·ªùi gian ch·ªù.');
    } on AlgoliaIOException catch (e, stackTrace) {
      _log.severe('Algolia IO error occurred.', e, stackTrace);
      throw SearchConnectionException('ƒê√£ x·∫£y ra l·ªói m·∫°ng trong khi t√¨m ki·∫øm.');
    } on UnreachableHostsException catch (e, stackTrace) {
      _log.severe(
        'All Algolia hosts are unreachable. Errors: ${e.errors}',
        e,
        stackTrace,
      );
      throw SearchConnectionException('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß t√¨m ki·∫øm.');
    } on AlgoliaException catch (e, stackTrace) {
      _log.severe(
        'An unhandled Algolia exception occurred.',
        e,
        stackTrace,
      );
      throw UnknownSearchApiException(message: e.toString());
    } on Exception catch (e, stackTrace) {
      _log.severe(
        'An unexpected generic error occurred during search.',
        e,
        stackTrace,
      );
      throw UnknownSearchApiException(message: 'ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra.');
    }
  }
}
