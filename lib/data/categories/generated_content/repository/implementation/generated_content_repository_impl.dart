import 'dart:convert';

import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/generated_content/model/generated_content.dart';
import 'package:dishlocal/data/categories/generated_content/repository/failure/generated_content_failure.dart';
import 'package:dishlocal/data/categories/generated_content/repository/interface/generated_content_repository.dart';
import 'package:dishlocal/data/categories/generated_content/schemas/generated_content_schemas.dart';
import 'package:dishlocal/data/services/generative_ai_service/exception/generative_ai_service_exception.dart';
import 'package:dishlocal/data/services/generative_ai_service/interface/generative_ai_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

@LazySingleton(as: GeneratedContentRepository)
class GeneratedContentRepositoryImpl implements GeneratedContentRepository {
  final GenerativeAiService _generativeAiService;
  final _log = Logger('GeneratedContentRepositoryImpl');

  GeneratedContentRepositoryImpl(this._generativeAiService);

  @override
  Future<Either<GeneratedContentFailure, GeneratedContent>> generateDishDescription({
    required String imageUrl,
    required String dishName,
  }) async {
    _log.info('B·∫Øt ƒë·∫ßu quy tr√¨nh t·∫°o m√¥ t·∫£ cho m√≥n: "$dishName"');

    if (!_isDishNameValid(dishName)) {
      _log.warning('T√™n m√≥n ƒÉn "$dishName" kh√¥ng v∆∞·ª£t qua ki·ªÉm tra s∆° b·ªô.');
      return const Left(InvalidDishNameFailure());
    }

    try {
      // B∆Ø·ªöC 1: X√ÅC TH·ª∞C S·ª∞ KH·ªöP NHAU GI·ªÆA ·∫¢NH V√Ä T√äN B·∫∞NG SCHEMA
      _log.info('B·∫Øt ƒë·∫ßu b∆∞·ªõc x√°c th·ª±c b·∫±ng AI s·ª≠ d·ª•ng JSON Schema.');
      final validationPrompt = "D·ª±a v√†o h√¨nh ·∫£nh, h√£y x√°c ƒë·ªãnh xem n√≥ c√≥ ph·∫£i l√† m√≥n '$dishName' kh√¥ng. Tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng JSON ƒë∆∞·ª£c y√™u c·∫ßu.";
      final validationResponseString = await _generativeAiService.generateContent(
        prompt: validationPrompt,
        imageUrl: imageUrl,
        jsonSchema: GeneratedContentSchemas.validationSchema,
      );
      final Map<String, dynamic> validationResult = jsonDecode(validationResponseString);

      if (validationResult['isMatch'] != true) {
        final reason = validationResult['reason'] ?? 'kh√¥ng r√µ l√Ω do';
        _log.warning('X√°c th·ª±c AI th·∫•t b·∫°i: H√¨nh ·∫£nh kh√¥ng kh·ªõp. L√Ω do: $reason');
        return const Left(MismatchedContentFailure());
      }
      _log.info('‚úÖ X√°c th·ª±c AI th√†nh c√¥ng. H√¨nh ·∫£nh v√† t√™n m√≥n ƒÉn kh·ªõp nhau.');

      // B∆Ø·ªöC 2: T·∫†O M√î T·∫¢ CHI TI·∫æT B·∫∞NG SCHEMA
      _log.info('B·∫Øt ƒë·∫ßu b∆∞·ªõc t·∫°o m√¥ t·∫£ chi ti·∫øt s·ª≠ d·ª•ng JSON Schema.');
      final descriptionPrompt = "H√£y vi·∫øt m·ªôt ƒëo·∫°n m√¥ t·∫£ ·∫©m th·ª±c h·∫•p d·∫´n v·ªÅ m√≥n ƒÉn \"$dishName\", d·ª±a tr√™n h√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n l√† c·ªßa m√≥n ƒÉn n√†y. Tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng JSON ƒë∆∞·ª£c y√™u c·∫ßu.";
      final descriptionResponseString = await _generativeAiService.generateContent(
        prompt: descriptionPrompt,
        imageUrl: imageUrl,
        jsonSchema: GeneratedContentSchemas.descriptionSchema,
      );
      final Map<String, dynamic> descriptionResult = jsonDecode(descriptionResponseString);
      final String description = descriptionResult['description']?.trim() ?? '';

      if (description.isEmpty) {
        _log.warning('AI ƒë√£ tr·∫£ v·ªÅ JSON nh∆∞ng kh√¥ng c√≥ n·ªôi dung m√¥ t·∫£.');
        return const Left(ContentGenerationFailure(message: 'AI kh√¥ng th·ªÉ t·∫°o m√¥ t·∫£ cho m√≥n ƒÉn n√†y.'));
      }

      _log.info('üéâ T·∫°o m√¥ t·∫£ th√†nh c√¥ng!');
      return Right(GeneratedContent(generatedContent: description));
    } on FormatException catch (e, stackTrace) {
      _log.severe('L·ªói gi·∫£i m√£ JSON t·ª´ service. AI c√≥ th·ªÉ ƒë√£ kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá.', e, stackTrace);
      return const Left(UnknownFailure());
    } on GenerativeAiServiceException catch (e, stackTrace) {
      _log.severe('M·ªôt l·ªói t·ª´ service ƒë√£ x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω.', e, stackTrace);
      return Left(_mapServiceExceptionToFailure(e));
    } catch (e, stackTrace) {
      _log.severe('M·ªôt l·ªói kh√¥ng x√°c ƒë·ªãnh ƒë√£ x·∫£y ra ·ªü t·∫ßng repository.', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  bool _isDishNameValid(String dishName) {
    final trimmedName = dishName.trim();
    if (trimmedName.length < 3) return false;
    final invalidPattern = RegExp(r'^(.)\1+$|^[0-9\s]+$');
    return !invalidPattern.hasMatch(trimmedName);
  }

  GeneratedContentFailure _mapServiceExceptionToFailure(GenerativeAiServiceException e) {
    return switch (e) {
      GeminiNetworkException() => const NetworkFailure(),
      InvalidApiKeyException() => const ApiKeyFailure(),
      GeminiServerException() => const ServerFailure(),
      InvalidInputException() => const InvalidInputFailure(),
      ContentGenerationException() => ContentGenerationFailure(message: e.message),
      UnknownGenerativeAiException() => const UnknownFailure(),
    };
  }
}
