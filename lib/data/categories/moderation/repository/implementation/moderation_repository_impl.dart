import 'dart:io';

import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/moderation/repository/failure/moderation_failure.dart';
import 'package:dishlocal/data/categories/moderation/repository/interface/moderation_repository.dart';
import 'package:dishlocal/data/services/moderation_service/exception/moderation_service_exception.dart';
import 'package:dishlocal/data/services/moderation_service/interface/moderation_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

@LazySingleton(as: ModerationRepository)
class ModerationRepositoryImpl implements ModerationRepository {
  final _log = Logger('ModerationRepositoryImpl');
  final ModerationService _moderationService;

  ModerationRepositoryImpl(this._moderationService);

  @override
  Future<Either<ModerationFailure, void>> moderateImage(File imageFile) async {
    _log.info('üõ°Ô∏è B·∫Øt ƒë·∫ßu lu·ªìng ki·ªÉm duy·ªát h√¨nh ·∫£nh trong Repository...');
    try {
      // G·ªçi service. N·∫øu th√†nh c√¥ng, n√≥ s·∫Ω kh√¥ng tr·∫£ v·ªÅ g√¨.
      await _moderationService.checkImage(imageFile);

      _log.info('‚úÖ H√¨nh ·∫£nh ƒë√£ qua ki·ªÉm duy·ªát th√†nh c√¥ng ·ªü t·∫ßng Service.');
      return const Right(null);
    } on ModerationServiceException catch (e) {
      _log.warning('‚ö†Ô∏è D·ªãch ModerationServiceException th√†nh ModerationFailure. L·ªói: ${e.message}');

      // D·ªãch t·ª´ Exception sang Failure
      if (e is ImageUnsafeException) {
        return Left(ImageUnsafeFailure(e.message));
      }
      return Left(ModerationRequestFailure(e.message));
    } catch (e, st) {
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong Repository, kh√¥ng ph·∫£i ModerationServiceException.', e, st);
      return const Left(ModerationRequestFailure('L·ªói kh√¥ng x√°c ƒë·ªãnh'));
    }
  }

  @override
  Future<Either<ModerationFailure, void>> moderateText(String text) async {
    _log.info('üõ°Ô∏è B·∫Øt ƒë·∫ßu lu·ªìng ki·ªÉm duy·ªát vƒÉn b·∫£n trong Repository...');
    try {
      await _moderationService.checkText(text);

      _log.info('‚úÖ VƒÉn b·∫£n ƒë√£ qua ki·ªÉm duy·ªát th√†nh c√¥ng ·ªü t·∫ßng Service.');
      return const Right(null);
    } on ModerationServiceException catch (e) {
      _log.warning('‚ö†Ô∏è D·ªãch ModerationServiceException th√†nh ModerationFailure. L·ªói: ${e.message}');

      // D·ªãch t·ª´ Exception sang Failure
      if (e is TextUnsafeException) {
        // Tr·∫£ v·ªÅ l√Ω do c·ª• th·ªÉ cho UI
        return Left(TextUnsafeFailure(e.message));
      }
      return Left(ModerationRequestFailure(e.message));
    } catch (e, st) {
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong Repository, kh√¥ng ph·∫£i ModerationServiceException.', e, st);
      return const Left(ModerationRequestFailure('L·ªói kh√¥ng x√°c ƒë·ªãnh'));
    }
  }
}
