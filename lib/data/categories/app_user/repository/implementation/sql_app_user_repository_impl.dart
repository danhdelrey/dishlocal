import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/failure/app_user_failure.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/services/authentication_service/exception/authentication_service_exception.dart';
import 'package:dishlocal/data/services/authentication_service/interface/authentication_service.dart';
import 'package:dishlocal/data/services/authentication_service/model/app_user_credential.dart';
import 'package:dishlocal/data/services/database_service/entity/profile_entity.dart';
import 'package:dishlocal/data/services/database_service/exception/sql_database_service_exception.dart';
import 'package:dishlocal/data/services/database_service/interface/sql_database_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:rxdart/rxdart.dart';

@LazySingleton(as: AppUserRepository)
class SqlAppUserRepositoryImpl implements AppUserRepository {
  final _log = Logger('SqlAppUserRepositoryImpl');
  final AuthenticationService _authService;
  final SqlDatabaseService _dbService;

  // S·ª≠ d·ª•ng BehaviorSubject ƒë·ªÉ l∆∞u tr·ªØ v√† ph√°t ra AppUser hi·ªán t·∫°i
  // N√≥ s·∫Ω gi·ªØ l·∫°i gi√° tr·ªã cu·ªëi c√πng cho c√°c subscriber m·ªõi.
  final BehaviorSubject<AppUser?> _currentUserController;

  SqlAppUserRepositoryImpl(this._authService, this._dbService) : _currentUserController = BehaviorSubject<AppUser?>() {
    _log.info('‚úÖ Kh·ªüi t·∫°o UserRepositorySqlImpl.');

    // L·∫Øng nghe s·ª± thay ƒë·ªïi tr·∫°ng th√°i x√°c th·ª±c t·ª´ service
    _authService.authStateChanges.listen(_onAuthChanged);
  }

  /// H√†m ƒë∆∞·ª£c g·ªçi m·ªói khi tr·∫°ng th√°i ƒëƒÉng nh·∫≠p thay ƒë·ªïi.
  Future<void> _onAuthChanged(AppUserCredential? credential) async {
    if (credential == null) {
      _log.info('üö™ Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng xu·∫•t.');
      _currentUserController.add(null);
    } else {
      _log.info('üë§ Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p: ${credential.uid}');
      // L·∫•y profile ƒë·∫ßy ƒë·ªß v√† ph√°t ra stream
      final result = await _fetchAppUserFromCredential(credential);
      result.fold(
        (failure) {
          _log.severe('‚ùå Kh√¥ng th·ªÉ l·∫•y profile sau khi ƒëƒÉng nh·∫≠p: $failure');
          // C√≥ th·ªÉ ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng ·ªü ƒë√¢y n·∫øu profile l√† b·∫Øt bu·ªôc
          _currentUserController.add(null);
        },
        (appUser) {
          _log.info('‚úÖ L·∫•y profile th√†nh c√¥ng, ph√°t ra AppUser.');
          _currentUserController.add(appUser);
        },
      );
    }
  }

  /// Helper ƒë·ªÉ k·∫øt h·ª£p AppUserCredential v√† ProfileEntity th√†nh AppUser
  Future<Either<AppUserFailure, AppUser>> _fetchAppUserFromCredential(AppUserCredential credential) {
    return _handleErrors(() async {
      final profile = await _dbService.readSingleById<ProfileEntity>(
        tableName: 'profiles',
        id: credential.uid,
        fromJson: ProfileEntity.fromJson,
      );
      return AppUser(
        userId: credential.uid,
        email: credential.email ?? '',
        username: profile.username,
        displayName: profile.displayName,
        photoUrl: profile.photoUrl,
        bio: profile.bio,
        followerCount: profile.followerCount,
        followingCount: profile.followingCount,
        originalDisplayname: credential.displayName ?? '',
      );
    });
  }

  @override
  Stream<AppUser?> get onCurrentUserChanged => _currentUserController.stream;

  @override
  AppUser? get latestUser => _currentUserController.valueOrNull;

  @override
  String? getCurrentUserId() {
    return _authService.getCurrentUserId();
  }

  @override
  Future<Either<AppUserFailure, AppUser>> getCurrentUser() async {
    final credential = _authService.getCurrentUser();
    if (credential == null) {
      return const Left(AppUserFailure.notAuthenticated());
    }
    // L·∫•y l·∫°i th√¥ng tin m·ªõi nh·∫•t t·ª´ DB thay v√¨ t·ª´ stream
    return _fetchAppUserFromCredential(credential);
  }

  @override
  Future<Either<AppUserFailure, AppUser>> getUserById(String userId) {
    return _handleErrors(() async {
      final profile = await _dbService.readSingleById<ProfileEntity>(
        tableName: 'profiles',
        id: userId,
        fromJson: ProfileEntity.fromJson,
      );

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ ƒëang follow ng∆∞·ªùi n√†y kh√¥ng
      bool isFollowing = false;
      final currentUserId = getCurrentUserId();
      if (currentUserId != null && currentUserId != userId) {
        final result = await _dbService.readList(
          tableName: 'followers',
          fromJson: (json) => json, // kh√¥ng c·∫ßn convert
          filters: {'user_id': userId, 'follower_id': currentUserId},
        );
        isFollowing = result.isNotEmpty;
      }

      return AppUser(
        userId: profile.id,
        email: '', // Kh√¥ng th·ªÉ bi·∫øt email c·ªßa ng∆∞·ªùi kh√°c
        username: profile.username,
        displayName: profile.displayName,
        photoUrl: profile.photoUrl,
        bio: profile.bio,
        followerCount: profile.followerCount,
        followingCount: profile.followingCount,
        originalDisplayname: profile.displayName ?? '',
        isFollowing: isFollowing,
      );
    });
  }

  @override
  Future<Either<AppUserFailure, SignInResult>> signInWithGoogle() {
    return _handleErrors(() async {
      final credential = await _authService.signInWithGoogle();
      if (credential == null) {
        throw AuthenticationServiceUnknownException('Credential tr·∫£ v·ªÅ null sau khi ƒëƒÉng nh·∫≠p.');
      }

      // Lu√¥n l·∫•y profile t·ª´ DB ƒë·ªÉ c√≥ th√¥ng tin m·ªõi nh·∫•t
      // Trigger `handle_new_user` ƒë·∫£m b·∫£o profile lu√¥n t·ªìn t·∫°i sau khi user ƒë∆∞·ª£c t·∫°o trong `auth.users`
      try {
        final profile = await _dbService.readSingleById<ProfileEntity>(
          tableName: 'profiles',
          id: credential.uid,
          fromJson: ProfileEntity.fromJson,
        );

        // Logic ki·ªÉm tra m·ªõi: r√µ r√†ng v√† ƒë√°ng tin c·∫≠y
        if (profile.isSetupCompleted) {
          _log.info('Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i v√† ho√†n th√†nh setup. K·∫øt qu·∫£: success.');
          return SignInResult.success;
        } else {
          _log.info('Ng∆∞·ªùi d√πng m·ªõi ho·∫∑c ch∆∞a ho√†n th√†nh setup. K·∫øt qu·∫£: newUser.');
          return SignInResult.newUser;
        }
      } on RecordNotFoundException {
        // L·ªói n√†y kh√¥ng n√™n x·∫£y ra n·∫øu trigger c·ªßa b·∫°n ho·∫°t ƒë·ªông ƒë√∫ng.
        // N√≥ ch·ªâ ra m·ªôt s·ª± kh√¥ng ƒë·ªìng b·ªô gi·ªØa `auth.users` v√† `profiles`.
        _log.severe('L·ªói nghi√™m tr·ªçng: Profile kh√¥ng t·ªìn t·∫°i cho user ${credential.uid} m·∫∑c d√π ƒë√£ ƒëƒÉng nh·∫≠p.');
        throw UnknownDatabaseException('Kh√¥ng t√¨m th·∫•y profile t∆∞∆°ng ·ª©ng v·ªõi t√†i kho·∫£n.');
      }
    });
  }

  @override
  Future<Either<AppUserFailure, void>> signOut() {
    return _handleErrors(() async {
      await _authService.signOut();
      // _onAuthChanged s·∫Ω t·ª± ƒë·ªông d·ªçn d·∫πp stream
    });
  }

  @override
  Future<Either<AppUserFailure, void>> completeProfileSetup({required String username, String? displayName}) {
    return _handleErrors(() async {
      final userId = getCurrentUserId();
      if (userId == null) throw const NotAuthenticatedFailure();

      final dataToUpdate = {
        'username': username,
        if (displayName != null) 'display_name': displayName,
        // ƒê√°nh d·∫•u l√† ƒë√£ ho√†n th√†nh setup!
        'is_setup_completed': true,
      };

      await _dbService.update(
        tableName: 'profiles',
        id: userId,
        data: dataToUpdate,
        fromJson: (_) => {}, // kh√¥ng c·∫ßn k·∫øt qu·∫£ tr·∫£ v·ªÅ
      );

      // Trigger vi·ªác c·∫≠p nh·∫≠t l·∫°i AppUser trong stream
      // ƒë·ªÉ c√°c widget kh√°c (nh∆∞ home screen) c√≥ ƒë∆∞·ª£c th√¥ng tin m·ªõi nh·∫•t.
      _onAuthChanged(_authService.getCurrentUser());
    });
  }

  @override
  Future<Either<AppUserFailure, void>> updateProfileField({required String field, required dynamic value}) {
    return _handleErrors(() async {
      final userId = getCurrentUserId();
      if (userId == null) throw const AppUserFailure.notAuthenticated();

      await _dbService.update(
        tableName: 'profiles',
        id: userId,
        data: {field: value},
        fromJson: (_) => {},
      );
      // Optional: L·∫•y l·∫°i profile m·ªõi v√† c·∫≠p nh·∫≠t stream
      _onAuthChanged(_authService.getCurrentUser());
    });
  }

  @override
  Future<Either<AppUserFailure, void>> followUser({required String targetUserId, required bool isFollowing}) {
    return _handleErrors(() async {
      final currentUserId = getCurrentUserId();
      if (currentUserId == null) throw const AppUserFailure.notAuthenticated();
      if (currentUserId == targetUserId) return; // Kh√¥ng th·ªÉ t·ª± follow

      if (isFollowing) {
        // H√†nh ƒë·ªông: Follow
        await _dbService.create(
          tableName: 'followers',
          data: {'user_id': targetUserId, 'follower_id': currentUserId},
          fromJson: (_) => {},
        );
      } else {
        // H√†nh ƒë·ªông: Unfollow
        // V√¨ PKEY l√† (user_id, follower_id), ta kh√¥ng th·ªÉ d√πng delete(id).
        // C·∫ßn m·ªôt ph∆∞∆°ng th·ª©c delete v·ªõi filter trong service.
        // Gi·∫£ s·ª≠ service c√≥ ph∆∞∆°ng th·ª©c `deleteWhere`.
        // N·∫øu kh√¥ng, b·∫°n c·∫ßn t·∫°o m·ªôt RPC function tr√™n Supabase.
        // T·∫†M TH·ªúI, gi·∫£ s·ª≠ b·∫°n s·∫Ω th√™m ph∆∞∆°ng th·ª©c n√†y v√†o service:
        // await _dbService.deleteWhere(
        //   tableName: 'followers',
        //   filters: {'user_id': targetUserId, 'follower_id': currentUserId},
        // );
        // N·∫øu ch∆∞a c√≥, b·∫°n c√≥ th·ªÉ t·∫°o m·ªôt RPC function ƒë·ªÉ l√†m vi·ªác n√†y.
        _log.warning('C·∫ßn tri·ªÉn khai deleteWhere trong SqlDatabaseService ho·∫∑c RPC function cho unfollow.');
        // T·∫°m th·ªùi ƒë·ªÉ tr·ªëng.
      }
    });
  }

  Future<Either<AppUserFailure, T>> _handleErrors<T>(Future<T> Function() future) async {
    try {
      return Right(await future());
    }
    // B·∫Øt c√°c l·ªói AuthenticationService tr∆∞·ªõc
    on AuthenticationServiceException catch (e) {
      _log.severe('‚ùå _handleErrors(): L·ªói t·ª´ AuthenticationService', e);
      return Left(switch (e) {
        GoogleSignInCancelledException() => const AppUserFailure.signInCancelled(),
        GoogleSignInException() || SupabaseSignInException() => AppUserFailure.signInServiceFailure(e.message),
        SignOutException() => AppUserFailure.signOutFailure(e.message),
        _ => const AppUserFailure.unknown(),
      });
    }
    // B·∫Øt NotAuthenticatedException C·ª§ TH·ªÇ TR∆Ø·ªöC khi b·∫Øt SqlDatabaseServiceException chung
    on NotAuthenticatedFailure catch (e) {
      _log.warning('‚ö†Ô∏è _handleErrors(): Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c', e);
      return const Left(AppUserFailure.notAuthenticated());
    }
    // B√¢y gi·ªù m·ªõi b·∫Øt c√°c l·ªói SqlDatabaseServiceException c√≤n l·∫°i
    on SqlDatabaseServiceException catch (e) {
      _log.severe('‚ùå_handleErrors(): L·ªói t·ª´ SqlDatabaseService', e);
      return Left(switch (e) {
        // Ch√∫ng ta kh√¥ng c·∫ßn case cho NotAuthenticatedFailure ·ªü ƒë√¢y n·ªØa
        RecordNotFoundException() => const AppUserFailure.userNotFound(),
        PermissionDeniedException() => const AppUserFailure.updatePermissionDenied(),
        UniqueConstraintViolationException() => AppUserFailure.databaseFailure('T√™n ng∆∞·ªùi d√πng "${e.value}" ƒë√£ t·ªìn t·∫°i.'),
        CheckConstraintViolationException() => AppUserFailure.databaseFailure('D·ªØ li·ªáu cho tr∆∞·ªùng "${e.fieldName}" kh√¥ng h·ª£p l·ªá.'),
        DatabaseConnectionException() => AppUserFailure.databaseFailure(e.message),
        // C√°c lo·∫°i l·ªói kh√°c t·ª´ DB s·∫Ω r∆°i v√†o ƒë√¢y
        _ => AppUserFailure.databaseFailure(e.message),
      });
    }
    // B·∫Øt t·∫•t c·∫£ c√°c l·ªói c√≤n l·∫°i kh√¥ng x√°c ƒë·ªãnh
    catch (e, st) {
      _log.severe('‚ùå_handleErrors(): L·ªói kh√¥ng x√°c ƒë·ªãnh trong Repository', e, st);
      return const Left(AppUserFailure.unknown());
    }
  }
}
