import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/failure/app_user_failure.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/services/authentication_service/exception/authentication_service_exception.dart';
import 'package:dishlocal/data/services/authentication_service/interface/authentication_service.dart';
import 'package:dishlocal/data/services/authentication_service/model/app_user_credential.dart';
import 'package:dishlocal/data/services/database_service/entity/profile_entity.dart';
import 'package:dishlocal/data/services/database_service/exception/sql_database_service_exception.dart';
import 'package:dishlocal/data/services/database_service/interface/sql_database_service.dart';
import 'package:dishlocal/data/services/search_service/exception/search_service_exception.dart';
import 'package:dishlocal/data/services/search_service/interface/search_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:rxdart/rxdart.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

@LazySingleton(as: AppUserRepository)
class SqlAppUserRepositoryImpl implements AppUserRepository {
  final _log = Logger('SqlAppUserRepositoryImpl');
  final AuthenticationService _authService;
  final SqlDatabaseService _dbService;
  final SearchService _searchService;
  final _supabase = Supabase.instance.client;

  // S·ª≠ d·ª•ng BehaviorSubject ƒë·ªÉ l∆∞u tr·ªØ v√† ph√°t ra AppUser hi·ªán t·∫°i
  // N√≥ s·∫Ω gi·ªØ l·∫°i gi√° tr·ªã cu·ªëi c√πng cho c√°c subscriber m·ªõi.
  final BehaviorSubject<AppUser?> _currentUserController;

  SqlAppUserRepositoryImpl(this._authService, this._dbService, this._searchService) : _currentUserController = BehaviorSubject<AppUser?>() {
    _log.info('‚úÖ Kh·ªüi t·∫°o UserRepositorySqlImpl.');

    // L·∫Øng nghe s·ª± thay ƒë·ªïi tr·∫°ng th√°i x√°c th·ª±c t·ª´ service
    _authService.authStateChanges.listen(_onAuthChanged);
  }

  /// H√†m ƒë∆∞·ª£c g·ªçi m·ªói khi tr·∫°ng th√°i ƒëƒÉng nh·∫≠p thay ƒë·ªïi.
  Future<void> _onAuthChanged(AppUserCredential? credential) async {
    if (credential == null) {
      _log.info('üö™ Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng xu·∫•t.');
      _currentUserController.add(null);
    } else {
      try {
        final appUserResult = await _fetchAppUserFromCredential(credential);
        appUserResult.fold(
          (l) => _log.severe("Kh√¥ng th·ªÉ fetch profile trong _onAuthChanged", l),
          (user) => _currentUserController.add(user),
        );
      } catch (e) {
        _log.severe("L·ªói trong _onAuthChanged", e);
        _currentUserController.add(null);
      }
    }
  }

  /// Helper ƒë·ªÉ k·∫øt h·ª£p AppUserCredential v√† ProfileEntity th√†nh AppUser
  Future<Either<AppUserFailure, AppUser>> _fetchAppUserFromCredential(AppUserCredential credential) {
    return _handleErrors(() async {
      final profile = await _dbService.readSingleById<ProfileEntity>(
        tableName: 'profiles',
        id: credential.uid,
        fromJson: ProfileEntity.fromJson,
      );
      final appUser = AppUser(
        userId: credential.uid,
        email: credential.email ?? '',
        username: profile.username,
        displayName: profile.displayName,
        photoUrl: profile.photoUrl,
        bio: profile.bio,
        followerCount: profile.followerCount,
        followingCount: profile.followingCount,
        originalDisplayname: credential.displayName ?? '',
        isSetupCompleted: profile.isSetupCompleted,
      );
      _log.info('AppUser ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ _onAuthChanged(AppUserCredential? credential) trong SqlAppUserRepositoryImpl l√†: ${appUser.toString()}');
      return appUser;
    });
  }

  @override
  Stream<AppUser?> get onCurrentUserChanged => _currentUserController.stream;

  @override
  AppUser? get latestUser => _currentUserController.valueOrNull;

  @override
  String? getCurrentUserId() {
    return _authService.getCurrentUserId();
  }

  @override
  Future<Either<AppUserFailure, AppUser>> getCurrentUser() async {
    final credential = _authService.getCurrentUser();
    if (credential == null) {
      return const Left(AppUserFailure.notAuthenticated());
    }
    // L·∫•y l·∫°i th√¥ng tin m·ªõi nh·∫•t t·ª´ DB thay v√¨ t·ª´ stream
    return _fetchAppUserFromCredential(credential);
  }

  @override
  Future<Either<AppUserFailure, AppUser>> getUserProfile([String? userId]) {
    return _handleErrors(() async {
      // ---- LOGIC ƒê∆Ø·ª¢C T·∫¨P TRUNG V√ÄO ƒê√ÇY ----
      // 1. X√°c ƒë·ªãnh ID c·∫ßn l·∫•y
      final idToFetch = userId ?? _authService.getCurrentUserId();

      // 2. Ki·ªÉm tra xem c√≥ ID ƒë·ªÉ l·∫•y kh√¥ng
      if (idToFetch == null) {
        _log.warning('getUserProfile: ‚ö†Ô∏è C·ªë g·∫Øng l·∫•y profile nh∆∞ng kh√¥ng c√≥ userId v√† c≈©ng ch∆∞a ƒëƒÉng nh·∫≠p.');
        throw const NotAuthenticatedFailure(); // N√©m ra l·ªói ƒë·ªÉ _handleErrors b·∫Øt
      }

      _log.fine('getUserProfile: üîÑ ƒêang l·∫•y profile cho user ID: $idToFetch');

      // 3. L·∫•y d·ªØ li·ªáu profile t·ª´ DB
      final profile = await _dbService.readSingleById<ProfileEntity>(
        tableName: 'profiles',
        id: idToFetch,
        fromJson: ProfileEntity.fromJson,
      );

      // 4. Ki·ªÉm tra tr·∫°ng th√°i 'isFollowing' (n·∫øu c·∫ßn)
      bool isFollowing = false;
      final currentUserId = _authService.getCurrentUserId();
      if (currentUserId != null && currentUserId != idToFetch) {
        final result = await _dbService.readList(
          tableName: 'followers',
          fromJson: (json) => json,
          filters: {'user_id': idToFetch, 'follower_id': currentUserId},
        );
        isFollowing = result.isNotEmpty;
      }

      // 5. T·∫°o v√† tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng AppUser ho√†n ch·ªânh
      return AppUser(
        userId: profile.id,
        email: (idToFetch == currentUserId) ? (_authService.getCurrentUser()?.email ?? '') : '',
        username: profile.username,
        displayName: profile.displayName,
        photoUrl: profile.photoUrl,
        bio: profile.bio,
        followerCount: profile.followerCount,
        followingCount: profile.followingCount,
        isSetupCompleted: profile.isSetupCompleted,
        isFollowing: isFollowing,
        originalDisplayname: profile.displayName ?? '',
      );
    });
  }

  @override
  Future<Either<AppUserFailure, SignInResult>> signInWithGoogle() {
    return _handleErrors(() async {
      // 1. ƒêƒÉng nh·∫≠p v·ªõi Google ƒë·ªÉ l·∫•y credential
      final credential = await _authService.signInWithGoogle();
      if (credential == null) {
        throw AuthenticationServiceUnknownException('signInWithGoogle: Credential tr·∫£ v·ªÅ null sau khi ƒëƒÉng nh·∫≠p.');
      }

      // 2. Ch·ªß ƒë·ªông t·∫°o profile n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
      _log.info('signInWithGoogle: Ch·ªß ƒë·ªông g·ªçi RPC ƒë·ªÉ ƒë·∫£m b·∫£o profile t·ªìn t·∫°i...');
      await _dbService.rpc(
        'create_profile_if_not_exists',
        params: {
          'user_id': credential.uid,
          'full_name': credential.displayName,
          'avatar_url': credential.photoUrl,
        },
      );
      _log.info('signInWithGoogle: RPC call ho√†n t·∫•t.');

      // 3. L·∫•y profile ƒë·∫ßy ƒë·ªß sau khi ƒë√£ ƒë·∫£m b·∫£o n√≥ t·ªìn t·∫°i
      final appUserResult = await _fetchAppUserFromCredential(credential);

      // 4. üî• THAY ƒê·ªîI QUAN TR·ªåNG:
      // Sau khi c√≥ k·∫øt qu·∫£, ch√∫ng ta s·∫Ω ƒë·∫©y AppUser v√†o stream V√Ä tr·∫£ v·ªÅ SignInResult.
      return appUserResult.fold(
        (failure) {
          // N·∫øu kh√¥ng th·ªÉ l·∫•y profile, coi nh∆∞ ƒëƒÉng nh·∫≠p th·∫•t b·∫°i.
          _currentUserController.add(null);
          throw failure; // N√©m l·∫°i l·ªói ƒë·ªÉ _handleErrors b·∫Øt v√† d·ªãch
        },
        (appUser) {
          // ƒê·∫©y ng∆∞·ªùi d√πng v√†o stream ƒë·ªÉ to√†n b·ªô app c·∫≠p nh·∫≠t
          _currentUserController.add(appUser);

          // Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho m√†n h√¨nh Login
          if (appUser.isSetupCompleted) {
            return SignInResult.success;
          } else {
            return SignInResult.newUser;
          }
        },
      );
    });
  }

  @override
  Future<Either<AppUserFailure, void>> signOut() {
    return _handleErrors(() async {
      await _authService.signOut();
      // _onAuthChanged s·∫Ω t·ª± ƒë·ªông d·ªçn d·∫πp stream
    });
  }

  @override
  Future<Either<AppUserFailure, AppUser>> completeProfileSetup({
    required String username,
    String? displayName,
    String? bio,
  }) {
    return _handleErrors(() async {
      final userId = getCurrentUserId();
      if (userId == null) throw const NotAuthenticatedFailure();

      final dataToUpdate = {
        'username': username,
        if (displayName != null && displayName.isNotEmpty) 'display_name': displayName,
        if (bio != null && bio.isNotEmpty) 'bio': bio,
        'is_setup_completed': true,
      };

      // üî• THAY ƒê·ªîI QUAN TR·ªåNG:
      // 1. `_dbService.update` b√¢y gi·ªù s·∫Ω tr·∫£ v·ªÅ `ProfileEntity` ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
      final updatedProfile = await _dbService.update<ProfileEntity>(
        tableName: 'profiles',
        id: userId,
        data: dataToUpdate,
        fromJson: ProfileEntity.fromJson, // Cung c·∫•p h√†m chuy·ªÉn ƒë·ªïi
      );

      // 2. Kh√¥ng c·∫ßn ƒë·ªçc l·∫°i. L·∫•y credential ƒë·ªÉ c√≥ email, full_name...
      final credential = _authService.getCurrentUser()!;

      // 3. T·∫°o AppUser t·ª´ `updatedProfile` v√† `credential`
      final updatedAppUser = AppUser(
        userId: updatedProfile.id,
        email: credential.email ?? '',
        username: updatedProfile.username,
        displayName: updatedProfile.displayName,
        photoUrl: updatedProfile.photoUrl,
        bio: updatedProfile.bio,
        followerCount: updatedProfile.followerCount,
        followingCount: updatedProfile.followingCount,
        isSetupCompleted: updatedProfile.isSetupCompleted, // <-- S·∫Ω l√† true
        originalDisplayname: credential.displayName ?? '',
      );

      // 4. C·∫≠p nh·∫≠t stream v√† tr·∫£ v·ªÅ AppUser m·ªõi
      _currentUserController.add(updatedAppUser);
      return updatedAppUser;
    });
  }

  @override
  Future<Either<AppUserFailure, void>> updateProfileField({required String field, required dynamic value}) {
    return _handleErrors(() async {
      final userId = getCurrentUserId();
      if (userId == null) throw const AppUserFailure.notAuthenticated();

      await _dbService.update(
        tableName: 'profiles',
        id: userId,
        data: {field: value},
        fromJson: (_) => {},
      );
      // Optional: L·∫•y l·∫°i profile m·ªõi v√† c·∫≠p nh·∫≠t stream
      _onAuthChanged(_authService.getCurrentUser());
    });
  }

  @override
  Future<Either<AppUserFailure, void>> followUser({required String targetUserId, required bool isFollowing}) {
    return _handleErrors(() async {
      final currentUserId = getCurrentUserId();
      if (currentUserId == null) throw const AppUserFailure.notAuthenticated();
      if (currentUserId == targetUserId) return; // Kh√¥ng th·ªÉ t·ª± follow

      if (isFollowing) {
        // H√†nh ƒë·ªông: Follow
        await _dbService.create(
          tableName: 'followers',
          data: {'user_id': targetUserId, 'follower_id': currentUserId},
          fromJson: (_) => {},
        );
      } else {
        // H√†nh ƒë·ªông: Unfollow
        _log.info('UNFOLLOW: "$currentUserId" ƒëang unfollow "$targetUserId"');
        await _dbService.deleteWhere(
          tableName: 'followers',
          filters: {
            'user_id': targetUserId, // Ng∆∞·ªùi ƒë∆∞·ª£c theo d√µi
            'follower_id': currentUserId, // Ng∆∞·ªùi ƒëi theo d√µi
          },
        );
      }
    });
  }

  Future<Either<AppUserFailure, T>> _handleErrors<T>(Future<T> Function() future) async {
    try {
      return Right(await future());
    }
    // B·∫Øt c√°c l·ªói AuthenticationService tr∆∞·ªõc
    on AuthenticationServiceException catch (e) {
      _log.severe('‚ùå _handleErrors(): L·ªói t·ª´ AuthenticationService', e);
      return Left(switch (e) {
        GoogleSignInCancelledException() => const AppUserFailure.signInCancelled(),
        GoogleSignInException() || SupabaseSignInException() => AppUserFailure.signInServiceFailure(e.message),
        SignOutException() => AppUserFailure.signOutFailure(e.message),
        _ => const AppUserFailure.unknown(),
      });
    }
    // B·∫Øt NotAuthenticatedException C·ª§ TH·ªÇ TR∆Ø·ªöC khi b·∫Øt SqlDatabaseServiceException chung
    on NotAuthenticatedFailure catch (e) {
      _log.warning('‚ö†Ô∏è _handleErrors(): Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c', e);
      return const Left(AppUserFailure.notAuthenticated());
    }
    // B√¢y gi·ªù m·ªõi b·∫Øt c√°c l·ªói SqlDatabaseServiceException c√≤n l·∫°i
    on SqlDatabaseServiceException catch (e) {
      _log.severe('‚ùå_handleErrors(): L·ªói t·ª´ SqlDatabaseService', e);
      return Left(switch (e) {
        // Ch√∫ng ta kh√¥ng c·∫ßn case cho NotAuthenticatedFailure ·ªü ƒë√¢y n·ªØa
        RecordNotFoundException() => const AppUserFailure.userNotFound(),
        PermissionDeniedException() => const AppUserFailure.updatePermissionDenied(),
        UniqueConstraintViolationException() => AppUserFailure.databaseFailure('T√™n ng∆∞·ªùi d√πng "${e.value}" ƒë√£ t·ªìn t·∫°i.'),
        CheckConstraintViolationException() => AppUserFailure.databaseFailure('D·ªØ li·ªáu cho tr∆∞·ªùng "${e.fieldName}" kh√¥ng h·ª£p l·ªá.'),
        DatabaseConnectionException() => AppUserFailure.databaseFailure(e.message),
        // C√°c lo·∫°i l·ªói kh√°c t·ª´ DB s·∫Ω r∆°i v√†o ƒë√¢y
        _ => AppUserFailure.databaseFailure(e.message),
      });
    }
    // B·∫Øt t·∫•t c·∫£ c√°c l·ªói c√≤n l·∫°i kh√¥ng x√°c ƒë·ªãnh
    catch (e, st) {
      _log.severe('‚ùå_handleErrors(): L·ªói kh√¥ng x√°c ƒë·ªãnh trong Repository', e, st);
      return const Left(AppUserFailure.unknown());
    }
  }

  @override
  Future<Either<AppUserFailure, List<AppUser>>> searchProfiles({
    required String query,
    int page = 0,
    int hitsPerPage = 20,
  }) async {
    _log.info('üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm profile v·ªõi query: "$query"');
    try {
      // 1. L·∫•y danh s√°ch ID t·ª´ d·ªãch v·ª• t√¨m ki·∫øm
      final searchResult = await _searchService.search(
        query: query,
        searchType: SearchableItem.profiles,
        page: page,
        hitsPerPage: hitsPerPage,
      );
      _log.info('‚úÖ T√¨m ki·∫øm th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c ${searchResult.objectIds.length} ID profile.');

      if (searchResult.objectIds.isEmpty) {
        return const Right([]);
      }

      // 2. L·∫•y chi ti·∫øt c·ªßa T·∫§T C·∫¢ profile trong M·ªòT l·∫ßn g·ªçi RPC
      _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt cho ${searchResult.objectIds.length} profile trong m·ªôt l·∫ßn g·ªçi...');
      final currentUserId = _authService.getCurrentUserId();

      // G·ªçi h√†m RPC m·ªõi
      final List<dynamic> profilesData = await _supabase.rpc('get_profile_details_by_ids', params: {
        'p_user_ids': searchResult.objectIds, // <<< M·∫£ng c√°c ID
        'p_current_user_id': currentUserId, // <<< ID ng∆∞·ªùi d√πng hi·ªán t·∫°i
      });

      // Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ JSON th√†nh danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng AppUser
      // H√†m RPC tr·∫£ v·ªÅ c√°c tr∆∞·ªùng ƒë√£ kh·ªõp s·∫µn v·ªõi AppUser
      final List<AppUser> unsortedUsers = profilesData.map((json) {
        final data = json as Map<String, dynamic>;
        // √Ånh x·∫° tr·ª±c ti·∫øp t·ª´ k·∫øt qu·∫£ RPC sang AppUser
        return AppUser(
          userId: data['id'],
          email: '',
          username: data['username'],
          displayName: data['display_name'],
          photoUrl: data['photo_url'],
          bio: data['bio'],
          followerCount: data['follower_count'],
          followingCount: data['following_count'],
          isSetupCompleted: data['is_setup_completed'],
          isFollowing: data['is_following'], // <<< L·∫•y tr·ª±c ti·∫øp t·ª´ RPC
          originalDisplayname: data['display_name'] ?? '',
        );
      }).toList();

      // 3. S·∫ÆP X·∫æP L·∫†I K·∫æT QU·∫¢ theo th·ª© t·ª± t·ª´ d·ªãch v·ª• t√¨m ki·∫øm (quan tr·ªçng!)
      final usersById = {for (var user in unsortedUsers) user.userId: user};
      final List<AppUser> sortedUsers = searchResult.objectIds
          .map((id) => usersById[id])
          .whereType<AppUser>() // L·ªçc ra c√°c user kh√¥ng t√¨m th·∫•y (n·∫øu c√≥)
          .toList();

      _log.info('üîç T√¨m ki·∫øm th√†nh c√¥ng, t√¨m th·∫•y v√† s·∫Øp x·∫øp ${sortedUsers.length} profile.');
      return Right(sortedUsers);
    } on SearchServiceException catch (e, st) {
      // 4. B·∫Øt l·ªói t·ª´ SearchService v√† √°nh x·∫° sang AppUserFailure
      _log.severe('‚ùå L·ªói t·ª´ SearchService khi t√¨m ki·∫øm profile', e, st);

      final failure = switch (e) {
        // L·ªói k·∫øt n·ªëi
        SearchConnectionException() => AppUserFailure.databaseFailure(e.message),
        // L·ªói API (h·ªá th·ªëng)
        SearchApiException() => const AppUserFailure.databaseFailure('D·ªãch v·ª• t√¨m ki·∫øm ƒëang g·∫∑p s·ª± c·ªë.'),
        // C√°c l·ªói kh√°c t·ª´ search service
        _ => const AppUserFailure.unknown(),
      };
      return Left(failure);
    } on Exception catch (e, st) {
      // 5. B·∫Øt c√°c l·ªói kh√¥ng mong mu·ªën kh√°c
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh t√¨m ki·∫øm profile', e, st);
      return const Left(AppUserFailure.unknown());
    }
  }
}
