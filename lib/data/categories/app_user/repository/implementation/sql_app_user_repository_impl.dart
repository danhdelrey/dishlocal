import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/failure/app_user_failure.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/services/authentication_service/exception/authentication_service_exception.dart';
import 'package:dishlocal/data/services/authentication_service/interface/authentication_service.dart';
import 'package:dishlocal/data/services/database_service/entity/profile_entity.dart';
import 'package:dishlocal/data/services/database_service/exception/sql_database_service_exception.dart';
import 'package:dishlocal/data/services/database_service/interface/sql_database_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

@LazySingleton(as: AppUserRepository)
class SqlAppUserRepositoryImpl implements AppUserRepository {
  final _log = Logger('UserRepositorySqlImpl');
  final AuthenticationService _authService;
  final SqlDatabaseService _dbService;
  final  _supabase = Supabase.instance.client; // D√πng cho c√°c thao t√°c kh√¥ng c√≥ trong service chung

  static const String _profilesTable = 'profiles';
  static const String _followersTable = 'followers';

  SqlAppUserRepositoryImpl(this._authService, this._dbService) {
    _log.info('‚úÖ Kh·ªüi t·∫°o UserRepositorySqlImpl.');
  }

  // Helper ƒë·ªÉ b·∫Øt v√† d·ªãch l·ªói
  Future<Either<AppUserFailure, T>> _handleErrors<T>(Future<T> Function() future) async {
    try {
      return Right(await future());
    } on AuthenticationServiceException catch (e) {
      _log.severe('‚ùå L·ªói t·ª´ AuthenticationService', e);
      return Left(switch (e) {
        GoogleSignInCancelledException() => const SignInCancelledFailure(),
        GoogleSignInException() || SupabaseSignInException() => SignInServiceFailure(e.message),
        SignOutException() => SignOutFailure(e.message),
        _ => const UnknownFailure(),
      });
    } on SqlDatabaseServiceException catch (e) {
      _log.severe('‚ùå L·ªói t·ª´ SqlDatabaseService', e);
      return Left(switch (e) {
        RecordNotFoundException() => const UserNotFoundFailure(),
        PermissionDeniedException() => const UpdatePermissionDeniedFailure(),
        UniqueConstraintViolationException() => const DatabaseFailure('T√™n ng∆∞·ªùi d√πng n√†y ƒë√£ t·ªìn t·∫°i.'),
        _ => DatabaseFailure(e.message),
      });
    } catch (e, st) {
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong Repository', e, st);
      return const Left(UnknownFailure());
    }
  }

  @override
  Stream<AppUser?> get user {
    _log.info('üéß B·∫Øt ƒë·∫ßu l·∫Øng nghe lu·ªìng (stream) thay ƒë·ªïi c·ªßa ng∆∞·ªùi d√πng.');
    return _authService.authStateChanges.asyncMap((credential) async {
      final userId = credential?.uid;
      _log.fine('üì¨ Lu·ªìng authStateChanges ph√°t ra s·ª± ki·ªán m·ªõi. UID: ${userId ?? "null"}.');

      if (credential == null) {
        _log.info('üö™ Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng xu·∫•t. Ph√°t ra null.');
        return null;
      }

      try {
        _log.fine('üóÉÔ∏è ƒêang l·∫•y d·ªØ li·ªáu h·ªì s∆° t·ª´ b·∫£ng "profiles" cho UID: $userId');

        // S·ª≠ d·ª•ng RPC ƒë·ªÉ l·∫•y profile c√πng v·ªõi tr·∫°ng th√°i isFollowing (n·∫øu c·∫ßn)
        // Thay v√¨ t·ª± JOIN, ta s·∫Ω t·∫°o m·ªôt h√†m RPC ƒë∆°n gi·∫£n cho vi·ªác n√†y.
        // Ho·∫∑c c√°ch ƒë∆°n gi·∫£n h∆°n l√† JOIN tr·ª±c ti·∫øp.
        final profileData = await _supabase.from(_profilesTable).select().eq('id', userId!).single();

        // Chuy·ªÉn ƒë·ªïi t·ª´ ProfileEntity (DB model) sang AppUser (UI model)
        return AppUser(
          userId: profileData['id'],
          email: credential.email!,
          originalDisplayname: profileData['display_name'] ?? credential.displayName ?? '',
          displayName: profileData['display_name'],
          username: profileData['username'],
          photoUrl: profileData['photo_url'],
          bio: profileData['bio'],
          followerCount: profileData['follower_count'],
          followingCount: profileData['following_count'],
          isFollowing: false, // M·∫∑c ƒë·ªãnh l√† false khi xem ch√≠nh m√¨nh
        );
      } catch (e, st) {
        _log.severe('üî• L·ªói khi l·∫•y d·ªØ li·ªáu profile cho UID: $userId', e, st);
        // Trong stream, ch√∫ng ta n√©m l·ªói ƒë·ªÉ t·∫ßng tr√™n (BLoC) x·ª≠ l√Ω
        throw DatabaseFailure('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng: ${e.toString()}');
      }
    });
  }

  @override
  Future<Either<AppUserFailure, void>> signInWithGoogle() {
    return _handleErrors(() async {
      _log.info('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu quy tr√¨nh ƒëƒÉng nh·∫≠p Google...');
      await _authService.signInWithGoogle();
      // Logic ki·ªÉm tra v√† t·∫°o user m·ªõi ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v·ªÅ backend
      // th√¥ng qua trigger `handle_new_user`. Repository kh√¥ng c·∫ßn l√†m g√¨ ·ªü ƒë√¢y n·ªØa.
      _log.info('‚úÖ ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng. Trigger s·∫Ω t·ª± ƒë·ªông t·∫°o profile n·∫øu c·∫ßn.');
    });
  }

  // Helper chung cho vi·ªác c·∫≠p nh·∫≠t m·ªôt tr∆∞·ªùng duy nh·∫•t trong profile
  Future<Either<AppUserFailure, void>> _updateProfileField(String fieldName, dynamic value) {
    return _handleErrors(() async {
      final userId = _authService.getCurrentUserId();
      if (userId == null) throw const NotAuthenticatedFailure();

      _log.info("üîÑ ƒêang c·∫≠p nh·∫≠t tr∆∞·ªùng '$fieldName' cho ng∆∞·ªùi d√πng $userId...");
      await _dbService.update(
        tableName: _profilesTable,
        id: userId,
        data: {fieldName: value},
        fromJson: ProfileEntity.fromJson, // Dummy
      );
      _log.info("‚úÖ C·∫≠p nh·∫≠t '$fieldName' th√†nh c√¥ng.");
    });
  }

  @override
  Future<Either<AppUserFailure, void>> updateUsername(String username) {
    return _updateProfileField('username', username);
  }

  @override
  Future<Either<AppUserFailure, void>> updateBio(String? bio) {
    return _updateProfileField('bio', bio);
  }

  @override
  Future<Either<AppUserFailure, void>> updateDisplayName(String displayName) {
    return _updateProfileField('display_name', displayName);
  }

  @override
  Future<Either<AppUserFailure, void>> signOut() {
    return _handleErrors(() async {
      _log.info('üö™ B·∫Øt ƒë·∫ßu ƒëƒÉng xu·∫•t...');
      await _authService.signOut();
      _log.info('‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng.');
    });
  }

  @override
  Future<Either<AppUserFailure, AppUser>> getCurrentUser() {
    return _handleErrors(() async {
      final credential = _authService.getCurrentUser();
      if (credential == null) throw const NotAuthenticatedFailure();

      _log.info('üë§ ƒêang l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng hi·ªán t·∫°i: ${credential.uid}');
      final profileEntity = await _dbService.readSingleById<ProfileEntity>(
        tableName: _profilesTable,
        id: credential.uid,
        fromJson: ProfileEntity.fromJson,
      );

      return AppUser(
        userId: profileEntity.id,
        email: credential.email!,
        originalDisplayname: profileEntity.displayName ?? credential.displayName ?? '',
        username: profileEntity.username,
        displayName: profileEntity.displayName,
        photoUrl: profileEntity.photoUrl,
        bio: profileEntity.bio,
        followerCount: profileEntity.followerCount,
        followingCount: profileEntity.followingCount,
        isFollowing: false,
      );
    });
  }

  @override
  String? getCurrentUserId() {
    return _authService.getCurrentUserId();
  }

  @override
  Future<Either<AppUserFailure, AppUser>> getUserWithId({required String userId, String? currentUserId}) {
    return _handleErrors(() async {
      _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu cho ng∆∞·ªùi d√πng: $userId. Ng∆∞·ªùi xem: ${currentUserId ?? "kh√°ch"}');

      // L·∫•y d·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng m·ª•c ti√™u
      final profileEntity = await _dbService.readSingleById<ProfileEntity>(tableName: _profilesTable, id: userId, fromJson: ProfileEntity.fromJson);

      bool isFollowing = false;
      if (currentUserId != null && currentUserId != userId) {
        // Ki·ªÉm tra m·ªëi quan h·ªá follow
        _log.fine('üîÑ ƒêang ki·ªÉm tra tr·∫°ng th√°i follow t·ª´ $currentUserId ƒë·∫øn $userId...');
        final followRecord = await _supabase.from(_followersTable).select().match({'user_id': userId, 'follower_id': currentUserId}).maybeSingle(); // D√πng maybeSingle ƒë·ªÉ kh√¥ng l·ªói n·∫øu kh√¥ng t√¨m th·∫•y

        isFollowing = followRecord != null;
        _log.info('‚úÖ Ki·ªÉm tra follow ho√†n t·∫•t. isFollowing: $isFollowing');
      }

      // L·∫•y email t·ª´ auth.users (√≠t khi c·∫ßn nh∆∞ng c√≥ th·ªÉ h·ªØu √≠ch)
      // final adminUser = await _supabase.auth.admin.getUserById(userId);

      return AppUser(
        userId: profileEntity.id,
        email: '...', // Kh√¥ng d·ªÖ ƒë·ªÉ l·∫•y email c·ªßa ng∆∞·ªùi kh√°c, th∆∞·ªùng l√† kh√¥ng c·∫ßn
        originalDisplayname: profileEntity.displayName ?? '',
        username: profileEntity.username,
        displayName: profileEntity.displayName,
        photoUrl: profileEntity.photoUrl,
        bio: profileEntity.bio,
        followerCount: profileEntity.followerCount,
        followingCount: profileEntity.followingCount,
        isFollowing: isFollowing,
      );
    });
  }

  @override
  Future<Either<AppUserFailure, void>> followUser({required String targetUserId, required bool isFollowing}) {
    return _handleErrors(() async {
      final action = isFollowing ? "theo d√µi" : "b·ªè theo d√µi";
      _log.info('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu qu√° tr√¨nh $action ng∆∞·ªùi d√πng: $targetUserId.');

      final currentUserId = _authService.getCurrentUserId();
      if (currentUserId == null) throw const NotAuthenticatedFailure();
      if (currentUserId == targetUserId) throw const UnknownFailure(message: 'Kh√¥ng th·ªÉ t·ª± theo d√µi ch√≠nh m√¨nh.');

      if (isFollowing) {
        // Ch√®n v√†o b·∫£ng followers. Trigger s·∫Ω t·ª± c·∫≠p nh·∫≠t c√°c b·ªô ƒë·∫øm.
        await _dbService.create(
          tableName: _followersTable,
          data: {'user_id': targetUserId, 'follower_id': currentUserId},
          fromJson: (json) => {}, // Dummy
        );
      } else {
        // X√≥a kh·ªèi b·∫£ng followers. Trigger s·∫Ω t·ª± c·∫≠p nh·∫≠t c√°c b·ªô ƒë·∫øm.
        await _supabase.from(_followersTable).delete().match({'user_id': targetUserId, 'follower_id': currentUserId});
      }
      _log.info('‚úÖ Ho√†n th√†nh $action ng∆∞·ªùi d√πng $targetUserId th√†nh c√¥ng.');
    });
  }
}
