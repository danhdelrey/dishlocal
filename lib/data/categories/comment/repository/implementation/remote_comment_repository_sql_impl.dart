// file: lib/data/repositories/comment/remote_comment_repository_sql_impl.dart

import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/comment/model/comment.dart';
import 'package:dishlocal/data/categories/comment/model/comment_reply.dart';
import 'package:dishlocal/data/categories/comment/repository/failure/comment_failure.dart';
import 'package:dishlocal/data/categories/comment/repository/interface/comment_repository.dart';
import 'package:dishlocal/data/services/authentication_service/interface/authentication_service.dart';
import 'package:dishlocal/data/services/database_service/entity/comment_reply_entity.dart';
import 'package:dishlocal/data/services/database_service/entity/post_comment_entity.dart';
import 'package:dishlocal/data/services/database_service/exception/sql_database_service_exception.dart';
import 'package:dishlocal/data/services/database_service/interface/sql_database_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

@LazySingleton(as: CommentRepository)
class RemoteCommentRepositorySqlImpl implements CommentRepository {
  final _log = Logger('RemoteCommentRepositorySqlImpl');
  final _supabase = Supabase.instance.client; // D√πng cho c√°c thao t√°c RPC
  final SqlDatabaseService _dbService;
  final AuthenticationService _authenticationService;

  RemoteCommentRepositorySqlImpl(
    this._dbService,
    this._authenticationService,
  );

  /// Helper ƒë·ªÉ b·∫Øt v√† d·ªãch c√°c l·ªói ph·ªï bi·∫øn sang CommentFailure.
  Future<Either<CommentFailure, T>> _handleErrors<T>(Future<T> Function() future) async {
    try {
      return Right(await future());
    } on SqlDatabaseServiceException catch (e) {
      _log.severe('‚ùå L·ªói t·ª´ SqlDatabaseService trong Comment Repository', e);
      return Left(switch (e) {
        PermissionDeniedException() => const PermissionCommentFailure(),
        RecordNotFoundException() => const CommentNotFoundFailure(),
        UniqueConstraintViolationException() => const CommentOperationFailure('B·∫°n ƒë√£ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y r·ªìi.'),
        CheckConstraintViolationException() => const CommentOperationFailure('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.'),
        DatabaseConnectionException() => const ConnectionCommentFailure(),
        _ => const UnknownCommentFailure(),
      });
    } catch (e, st) {
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong Comment Repository', e, st);
      return const Left(UnknownCommentFailure());
    }
  }

  @override
  Future<Either<CommentFailure, List<Comment>>> getCommentsForPost({
    required String postId,
    int limit = 20,
    DateTime? startAfter,
  }) {
    return _handleErrors(() async {
      final currentUserId = _authenticationService.getCurrentUserId();
      _log.info('üì° B·∫Øt ƒë·∫ßu g·ªçi RPC "get_post_comments" cho postId: $postId...');

      final params = {
        'p_post_id': postId,
        'p_user_id': currentUserId,
        'p_limit': limit,
        'p_cursor': startAfter?.toUtc().toIso8601String() ?? '9999-12-31',
      };

      _log.fine('   -> V·ªõi params: $params');
      final data = await _supabase.rpc('get_post_comments', params: params);

      if (data is! List) {
        _log.warning('‚ö†Ô∏è RPC "get_post_comments" kh√¥ng tr·∫£ v·ªÅ m·ªôt List. K·∫øt qu·∫£: $data');
        return [];
      }

      final comments = data.map((json) => Comment.fromJson(json as Map<String, dynamic>)).toList();
      _log.info('‚úÖ L·∫•y th√†nh c√¥ng ${comments.length} b√¨nh lu·∫≠n cho b√†i vi·∫øt $postId.');
      return comments;
    });
  }

  @override
  Future<Either<CommentFailure, List<CommentReply>>> getRepliesForComment({
    required String parentCommentId,
    int limit = 10,
    DateTime? startAfter,
  }) {
    return _handleErrors(() async {
      final currentUserId = _authenticationService.getCurrentUserId();
      _log.info('üì° B·∫Øt ƒë·∫ßu g·ªçi RPC "get_comment_replies" cho parentCommentId: $parentCommentId...');

      final params = {
        'p_parent_comment_id': parentCommentId,
        'p_user_id': currentUserId,
        'p_limit': limit,

        // =========================================================================
        // S·ª¨A ƒê·ªîI ·ªû ƒê√ÇY: Thay ƒë·ªïi gi√° tr·ªã cursor m·∫∑c ƒë·ªãnh cho logic ASC
        //
        // TR∆Ø·ªöC ƒê√ÇY (SAI):
        // 'p_cursor': startAfter?.toUtc().toIso8601String() ?? '9999-12-31',
        //
        // B√ÇY GI·ªú (ƒê√öNG):
        'p_cursor': startAfter?.toUtc().toIso8601String() ?? '1970-01-01',
        // =========================================================================
      };

      _log.fine('   -> V·ªõi params: $params');
      final data = await _supabase.rpc('get_comment_replies', params: params);

      if (data is! List) {
        _log.warning('‚ö†Ô∏è RPC "get_comment_replies" kh√¥ng tr·∫£ v·ªÅ m·ªôt List. K·∫øt qu·∫£: $data');
        return [];
      }

      final replies = data.map((json) => CommentReply.fromJson(json as Map<String, dynamic>)).toList();
      _log.info('‚úÖ L·∫•y th√†nh c√¥ng ${replies.length} tr·∫£ l·ªùi cho b√¨nh lu·∫≠n $parentCommentId.');
      return replies;
    });
  }

  @override
  Future<Either<CommentFailure, Comment>> createComment({
    required String postId,
    required String content,
    required AppUser currentUser,
  }) {
    return _handleErrors(() async {
      final currentUserId = _authenticationService.getCurrentUserId();
      _log.info('‚ûï B·∫Øt ƒë·∫ßu t·∫°o b√¨nh lu·∫≠n m·ªõi cho postId: $postId b·ªüi user: $currentUserId');

      // B√¢y gi·ªù ch√∫ng ta s·∫Ω ch·ªù k·∫øt qu·∫£ tr·∫£ v·ªÅ
      final createdData = await _dbService.create(
        tableName: 'post_comments',
        data: {
          'post_id': postId,
          'author_id': currentUserId,
          'content': content,
        },
        // S·ª≠ d·ª•ng fromJson c·ªßa PostCommentEntity
        fromJson: PostCommentEntity.fromJson,
      );

      _log.info('üéâ T·∫°o b√¨nh lu·∫≠n th√†nh c√¥ng! ID th·∫≠t: ${createdData.id}');

      

      // Chuy·ªÉn ƒë·ªïi t·ª´ Entity sang Model UI
      return Comment(
        commentId: createdData.id,
        authorUserId: currentUser.userId,
        authorUsername: currentUser.username!,
        authorAvatarUrl: currentUser.photoUrl,
        content: createdData.content,
        createdAt: createdData.createdAt,
        likeCount: createdData.likeCount,
        replyCount: createdData.replyCount,
        isLiked: false, // M·ªõi t·∫°o n√™n ch∆∞a th·ªÉ like
      );
    });
  }

  @override
  Future<Either<CommentFailure, CommentReply>> createReply({
    required String parentCommentId,
    required String content,
    required AppUser currentUser,
    required AppUser replyToUser,
  }) {
    return _handleErrors(() async {

      _log.info('‚Ü™Ô∏è B·∫Øt ƒë·∫ßu t·∫°o tr·∫£ l·ªùi cho parentCommentId: $parentCommentId...');

      final createdData = await _dbService.create(
        tableName: 'comment_replies',
        data: {
          'parent_comment_id': parentCommentId,
          'author_id': currentUser.userId,
          'reply_to_user_id': replyToUser.userId,
          'content': content,
        },
        fromJson: CommentReplyEntity.fromJson,
      );

      _log.info('üéâ T·∫°o tr·∫£ l·ªùi th√†nh c√¥ng! ID th·∫≠t: ${createdData.id}');

      return CommentReply(
        replyId: createdData.id,
        authorUserId: currentUser.userId,
        authorUsername: currentUser.username!,
        authorAvatarUrl: currentUser.photoUrl,
        replyToUserId: replyToUser.userId,
        replyToUsername: replyToUser.username!,
        content: createdData.content,
        createdAt: createdData.createdAt,
        likeCount: createdData.likeCount,
        isLiked: false,
      );
    });
  }

  /// Helper chung ƒë·ªÉ x·ª≠ l√Ω logic th√≠ch/b·ªè th√≠ch
  Future<void> _handleLikeUnlike({
    required String tableName,
    required String entityIdColumnName,
    required String entityId,
    required bool isLiked,
  }) async {
    final currentUserId = _authenticationService.getCurrentUserId();
    final action = isLiked ? "th√≠ch" : "b·ªè th√≠ch";
    _log.info('üîÑ B·∫Øt ƒë·∫ßu $action $entityIdColumnName: $entityId b·ªüi user: $currentUserId.');

    if (isLiked) {
      await _dbService.create(
        tableName: tableName,
        data: {entityIdColumnName: entityId, 'user_id': currentUserId},
        fromJson: (json) => {},
      );
    } else {
      await _dbService.deleteWhere(
        tableName: tableName,
        filters: {entityIdColumnName: entityId, 'user_id': currentUserId},
      );
    }
    _log.info('‚úÖ Ho√†n th√†nh $action th√†nh c√¥ng.');
  }

  @override
  Future<Either<CommentFailure, void>> likeComment({required String commentId, required bool isLiked}) {
    return _handleErrors(() => _handleLikeUnlike(
          tableName: 'post_comment_likes',
          entityIdColumnName: 'comment_id',
          entityId: commentId,
          isLiked: isLiked,
        ));
  }

  @override
  Future<Either<CommentFailure, void>> likeReply({required String replyId, required bool isLiked}) {
    return _handleErrors(() => _handleLikeUnlike(
          tableName: 'comment_reply_likes',
          entityIdColumnName: 'reply_id',
          entityId: replyId,
          isLiked: isLiked,
        ));
  }

  @override
  Future<Either<CommentFailure, void>> deleteComment({required String commentId}) {
    return _handleErrors(() async {
      _log.info('üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a b√¨nh lu·∫≠n ID: $commentId...');
      await _dbService.delete(tableName: 'post_comments', id: commentId);
      _log.info('‚úÖ X√≥a b√¨nh lu·∫≠n $commentId th√†nh c√¥ng.');
    });
  }

  @override
  Future<Either<CommentFailure, void>> deleteReply({required String replyId}) {
    return _handleErrors(() async {
      _log.info('üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a tr·∫£ l·ªùi ID: $replyId...');
      await _dbService.delete(tableName: 'comment_replies', id: replyId);
      _log.info('‚úÖ X√≥a tr·∫£ l·ªùi $replyId th√†nh c√¥ng.');
    });
  }
}
