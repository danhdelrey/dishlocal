// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:io';

import 'package:dartz/dartz.dart';
import 'package:dishlocal/core/json_converter/food_category_converter.dart';
import 'package:dishlocal/data/categories/post/model/filter_sort_model/filter_sort_params.dart';
import 'package:dishlocal/data/categories/post/model/filter_sort_model/sort_option.dart';
import 'package:dishlocal/data/services/database_service/entity/post_entity.dart';
import 'package:dishlocal/data/services/database_service/entity/post_review_entity.dart';
import 'package:dishlocal/data/services/database_service/exception/sql_database_service_exception.dart';
import 'package:dishlocal/data/services/geocoding_service/interface/geocoding_service.dart';
import 'package:dishlocal/data/services/search_service/exception/search_service_exception.dart';
import 'package:dishlocal/data/services/search_service/interface/search_service.dart';
import 'package:dishlocal/data/services/storage_service/exception/storage_service_exception.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

import 'package:dishlocal/data/categories/post/failure/post_failure.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:dishlocal/data/services/authentication_service/interface/authentication_service.dart';
import 'package:dishlocal/data/services/database_service/interface/sql_database_service.dart';
import 'package:dishlocal/data/services/distance_service/interface/distance_service.dart';
import 'package:dishlocal/data/services/location_service/interface/location_service.dart';
import 'package:dishlocal/data/services/storage_service/interface/storage_service.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:uuid/uuid.dart';

@LazySingleton(as: PostRepository)
class RemotePostRepositorySqlImpl implements PostRepository {
  final _log = Logger('RemotePostRepositorySqlImpl');
  final _supabase = Supabase.instance.client;
  final StorageService _storageService;
  final SqlDatabaseService _dbService;
  final DistanceService _distanceService;
  final LocationService _locationService;
  final GeocodingService _geocodingService;
  final AuthenticationService _authenticationService;
  final SearchService _searchService;

  RemotePostRepositorySqlImpl(
    this._storageService,
    this._dbService,
    this._distanceService,
    this._locationService,
    this._authenticationService,
    this._geocodingService,
    this._searchService,
  );

  // --- B·∫£ng √°nh x·∫° t·ª´ SortField sang t√™n c·ªôt trong DB ---
  // R·∫•t quan tr·ªçng ƒë·ªÉ gi·ªØ logic n√†y ·ªü m·ªôt n∆°i.
  static const Map<SortField, String> _sortFieldToColumn = {
    SortField.datePosted: 'created_at',
    SortField.likes: 'like_count',
    SortField.comments: 'comment_count',
    SortField.saves: 'save_count',
  };

  // Helper ƒë·ªÉ b·∫Øt v√† d·ªãch l·ªói
  Future<Either<PostFailure, T>> _handleErrors<T>(Future<T> Function() future) async {
    try {
      return Right(await future());
    } on SqlDatabaseServiceException catch (e) {
      _log.severe('‚ùå L·ªói t·ª´ SqlDatabaseService', e);
      return Left(switch (e) {
        PermissionDeniedException() => const PermissionFailure(),
        RecordNotFoundException() => const PostNotFoundFailure(),
        UniqueConstraintViolationException() => const PostOperationFailure('D·ªØ li·ªáu n√†y ƒë√£ t·ªìn t·∫°i.'),
        CheckConstraintViolationException() => const PostOperationFailure('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.'),
        DatabaseConnectionException() => const ConnectionFailure(),
        _ => const UnknownFailure(),
      });
    } on StorageException catch (e) {
      _log.severe('‚ùå L·ªói t·ª´ StorageService', e);
      return const Left(ImageUploadFailure());
    } catch (e, st) {
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong Repository', e, st);
      return const Left(UnknownFailure());
    }
  }

  // Helper ƒë·ªÉ l√†m gi√†u d·ªØ li·ªáu (ch·ªâ t√≠nh kho·∫£ng c√°ch)
  Future<List<Post>> _enrichPostsWithDistance(List<Post> posts) async {
    if (posts.isEmpty) return [];
    _log.fine('üìè B·∫Øt ƒë·∫ßu t√≠nh kho·∫£ng c√°ch cho ${posts.length} b√†i vi·∫øt...');
    final userPosition = await _locationService.getCurrentPosition();
    final enriched = await Future.wait(posts.map((post) async {
      if (post.address?.latitude != null && post.address?.longitude != null) {
        final distance = await _distanceService.calculateDistance(
          fromLat: userPosition.latitude,
          fromLong: userPosition.longitude,
          toLat: post.address!.latitude,
          toLong: post.address!.longitude,
        );
        return post.copyWith(distance: distance);
      }
      return post;
    }));
    _log.fine('‚úÖ Ho√†n th√†nh t√≠nh kho·∫£ng c√°ch.');
    return enriched;
  }

  Future<List<Post>> _enrichPostsWithLocationDisplayName(List<Post> posts) async {
    if (posts.isEmpty) return [];
    _log.fine('üìè B·∫Øt ƒë·∫ßu l·∫•y t√™n ƒë·ªãa ƒëi·ªÉm cho ${posts.length} b√†i vi·∫øt...');
    final enriched = await Future.wait(posts.map((post) async {
      if (post.address?.latitude != null && post.address?.longitude != null) {
        final name = await _geocodingService.getAddressFromPosition(post.address!.latitude, post.address!.longitude);
        final address = post.address!.copyWith(
          displayName: name,
        );
        return post.copyWith(address: address);
      }
      return post;
    }));
    _log.fine('‚úÖ Ho√†n th√†nh t√≠nh kho·∫£ng c√°ch.');
    return enriched;
  }

  @override
  Future<Either<PostFailure, Post>> createPost({required Post post, required File imageFile}) async {
    return _handleErrors(() async {
      _log.info('üëâ B·∫Øt ƒë·∫ßu t·∫°o b√†i vi·∫øt m·ªõi...');

      // --- B∆Ø·ªöC 1: T·∫¢I ·∫¢NH L√äN STORAGE ---
      _log.fine('üîÑ ƒêang t·∫£i ·∫£nh l√™n Storage...');
      final imageUrl = await _storageService.uploadFile(
        folder: 'posts',
        file: imageFile,
        publicId: post.postId,
      );
      _log.fine('‚úÖ T·∫£i ·∫£nh th√†nh c√¥ng. URL: $imageUrl');

      // --- B∆Ø·ªöC 2: T·∫†O B·∫¢N GHI CH√çNH TRONG B·∫¢NG "posts" ---
      final postEntity = PostEntity(
        id: post.postId,
        authorId: post.authorUserId,
        imageUrl: imageUrl,
        blurHash: post.blurHash,
        dishName: post.dishName,
        locationName: post.diningLocationName,
        locationAddress: post.address?.exactAddress,
        latitude: post.address?.latitude,
        longitude: post.address?.longitude,
        price: post.price,
        insight: post.insight,
        createdAt: post.createdAt,
        foodCategory: post.foodCategory,
      );

      _log.fine('üì§ ƒêang l∆∞u b√†i vi·∫øt v√†o b·∫£ng "posts"...');
      await _dbService.create(
        tableName: 'posts',
        data: postEntity.toJson(),
        fromJson: PostEntity.fromJson,
      );
      _log.fine('‚úÖ L∆∞u b√†i vi·∫øt v√†o b·∫£ng "posts" th√†nh c√¥ng.');

      // --- B∆Ø·ªöC 3 (T·ªêI ∆ØU): T·∫†O T·∫§T C·∫¢ REVIEW B·∫∞NG M·ªòT L·ªÜNH G·ªåI RPC ---
      // L·ªçc ra c√°c review c√≥ rating > 0 ƒë·ªÉ ch√®n v√†o DB.
      final List<Map<String, dynamic>> reviewsToInsert = post.reviews.where((item) => item.rating > 0).map((item) {
        // Chuy·ªÉn ReviewItem (UI model) th√†nh JSON.
        final json = item.toJson();
        // QUAN TR·ªåNG: Th√™m 'post_id' v√†o m·ªói review ƒë·ªÉ li√™n k·∫øt ch√∫ng.
        json['post_id'] = post.postId;
        return json;
      }).toList();

      // Ch·ªâ g·ªçi RPC n·∫øu c√≥ review ƒë·ªÉ ch√®n.
      if (reviewsToInsert.isNotEmpty) {
        _log.fine('üì§ ƒêang l∆∞u ${reviewsToInsert.length} ƒë√°nh gi√° v√†o b·∫£ng "post_reviews" qua RPC...');
        await _supabase.rpc(
          'upsert_post_reviews',
          params: {'reviews_data': reviewsToInsert},
        );
        _log.fine('‚úÖ L∆∞u c√°c review th√†nh c√¥ng.');
      }

      _log.info('üéâ T·∫°o b√†i vi·∫øt th√†nh c√¥ng!');
      return post.copyWith(imageUrl: imageUrl);
    });
  }

  // Ph∆∞∆°ng th·ª©c chung ƒë·ªÉ g·ªçi RPC v√† x·ª≠ l√Ω k·∫øt qu·∫£
  // Future<List<Post>> _fetchPostsViaRpc({
  //   required String rpcName,
  //   required Map<String, dynamic> params,
  // }) async {
  //   _log.info('üì° G·ªçi RPC "$rpcName" v·ªõi params: $params');
  //   final data = await _supabase.rpc(rpcName, params: params);

  //   if (data is! List) {
  //     _log.warning('‚ö†Ô∏è RPC "$rpcName" kh√¥ng tr·∫£ v·ªÅ m·ªôt List. K·∫øt qu·∫£: $data');
  //     return [];
  //   }

  //   final posts = data.map((json) => Post.fromJson(json as Map<String, dynamic>)).toList();
  //   _log.info('‚úÖ RPC "$rpcName" th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c ${posts.length} b√†i vi·∫øt.');
  //   _log.info(posts.map(
  //     (post) {
  //       _log.info('${post.toString()} \n\n');
  //     },
  //   ));

  //   return await _enrichPostsWithDistance(posts);
  // }

  Future<List<Post>> _getFilteredAndSortedPosts({
    required FilterSortParams params,
    // C√°c tham s·ªë t√πy ch·ªçn ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i feed
    bool isFollowingFeed = false,
    bool isSavedFeed = false,
    String? authorId,
  }) async {
    _log.info('üì° B·∫Øt ƒë·∫ßu x√¢y d·ª±ng l·ªánh g·ªçi RPC v·ªõi b·ªô l·ªçc: ${params.toVietnameseString}');

    const rpcName = 'get_posts_filtered'; // T√™n h√†m RPC m·ªõi/ƒë∆∞·ª£c c·∫≠p nh·∫≠t c·ªßa b·∫°n
    final currentUserId = _authenticationService.getCurrentUserId();

    // 2. Chu·∫©n b·ªã c√°c tham s·ªë cho RPC
    final rpcParams = <String, dynamic>{
      'p_user_id': currentUserId,
      'p_limit': params.limit,
      'p_sort_by': _sortFieldToColumn[params.sortOption.field] ?? 'created_at',
      'p_sort_direction': params.sortOption.direction == SortDirection.desc ? 'DESC' : 'ASC',

      // === THAY ƒê·ªîI QUAN TR·ªåNG: G·ª¨I ƒê√öNG CON TR·ªé ===
      'p_last_cursor_date': params.sortOption.field == SortField.datePosted ? (params.lastCursor as DateTime?)?.toUtc().toIso8601String() : null,
      'p_last_cursor_numeric': params.sortOption.field != SortField.datePosted ? params.lastCursor as int? : null,

      'p_categories': params.categories.isNotEmpty ? params.categories.map((c) => c.name).toList() : null,
      'p_min_price': params.range?.minPrice.toInt(),
      'p_max_price': params.range?.maxPrice == double.infinity ? null : params.range?.maxPrice.toInt(),

      // --- C√°c c·ªù cho lo·∫°i feed ---
      'p_is_following_feed': isFollowingFeed,
      'p_is_saved_feed': isSavedFeed,
      'p_author_id': authorId,
    };

    // 3. X·ª≠ l√Ω l·ªçc kho·∫£ng c√°ch (c·∫ßn v·ªã tr√≠ ng∆∞·ªùi d√πng)
    try {
      final userPosition = await _locationService.getCurrentPosition();
      rpcParams['p_user_lat'] = userPosition.latitude;
      rpcParams['p_user_lng'] = userPosition.longitude;
    } catch (e) {
      _log.warning('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ ng∆∞·ªùi d√πng ƒë·ªÉ t√≠nh kho·∫£ng c√°ch.', e);
      // B·ªè qua, kh√¥ng g·ª≠i p_user_lat v√† p_user_lng
    }

    if (params.distance != null) {
      rpcParams['p_max_distance_meters'] = params.distance!.maxDistance == double.infinity ? null : params.distance!.maxDistance;
      rpcParams['p_min_distance_meters'] = params.distance!.minDistance;
    }

    if (params.lastCursor is DateTime) {
      rpcParams['p_last_cursor_date'] = (params.lastCursor as DateTime).toUtc().toIso8601String();
    } else if (params.lastCursor is int) {
      rpcParams['p_last_cursor_numeric'] = params.lastCursor;
      // ƒê·ªìng th·ªùi, g·ª≠i ƒëi con tr·ªè ph·ª• ƒë·ªÉ ph√° v·ª° th·∫ø h√≤a
      if (params.lastDateCursorForTieBreak != null) {
        rpcParams['p_last_cursor_date'] = params.lastDateCursorForTieBreak!.toUtc().toIso8601String();
      }
    }

    // Lo·∫°i b·ªè c√°c kh√≥a c√≥ gi√° tr·ªã null ƒë·ªÉ kh√¥ng g·ª≠i ƒëi c√°c tham s·ªë kh√¥ng c·∫ßn thi·∫øt
    rpcParams.removeWhere((key, value) => value == null);

    _log.info('üì° G·ªçi RPC "$rpcName" v·ªõi params: $rpcParams');
    final data = await _supabase.rpc(rpcName, params: rpcParams);

    if (data is! List) {
      _log.warning('‚ö†Ô∏è RPC "$rpcName" kh√¥ng tr·∫£ v·ªÅ m·ªôt List. K·∫øt qu·∫£: $data');
      return [];
    }

    final posts = data.map((json) => Post.fromJson(json as Map<String, dynamic>)).toList();
    _log.info('‚úÖ RPC "$rpcName" th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c ${posts.length} b√†i vi·∫øt.');

    // L√†m gi√†u d·ªØ li·ªáu kh√¥ng c·∫ßn thi·∫øt n·ªØa n·∫øu RPC ƒë√£ t√≠nh to√°n kho·∫£ng c√°ch.
    // N·∫øu RPC ch·ªâ l·ªçc, b·∫°n v·∫´n c·∫ßn b∆∞·ªõc l√†m gi√†u n√†y ƒë·ªÉ hi·ªÉn th·ªã.
    // Gi·∫£ s·ª≠ RPC ƒë√£ tr·∫£ v·ªÅ tr∆∞·ªùng `distance`.
    return posts;
  }

  @override
  Future<Either<PostFailure, List<Post>>> getPosts({required FilterSortParams params}) {
    return _handleErrors(() => _getFilteredAndSortedPosts(params: params));
  }

  @override
  Future<Either<PostFailure, List<Post>>> getFollowingPosts({required FilterSortParams params}) {
    return _handleErrors(() => _getFilteredAndSortedPosts(params: params, isFollowingFeed: true));
  }

  @override
  Future<Either<PostFailure, List<Post>>> getPostsByUserId({required String? userId, required FilterSortParams params}) {
    return _handleErrors(() {
      final targetUserId = userId ?? _authenticationService.getCurrentUserId();
      if (targetUserId == null) return Future.value([]);
      return _getFilteredAndSortedPosts(params: params, authorId: targetUserId);
    });
  }

  @override
  Future<Either<PostFailure, List<Post>>> getSavedPosts({String? userId, required FilterSortParams params}) {
    return _handleErrors(() {
      final targetUserId = userId ?? _authenticationService.getCurrentUserId();
      if (targetUserId == null) return Future.value([]);
      // ƒê·ªëi v·ªõi b√†i ƒë√£ l∆∞u, authorId l√† c·ªßa ch√≠nh ng∆∞·ªùi d√πng ƒë√≥
      return _getFilteredAndSortedPosts(params: params, isSavedFeed: true, authorId: targetUserId);
    });
  }

  @override
  Future<Either<PostFailure, Post>> getPostWithId(String postId) {
    // _handleErrors l√† m·ªôt wrapper tuy·ªát v·ªùi ƒë·ªÉ x·ª≠ l√Ω l·ªói m·ªôt c√°ch t·∫≠p trung.
    return _handleErrors(() async {
      _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt b√†i vi·∫øt ID: $postId');
      final currentUserId = _authenticationService.getCurrentUserId();

      // S·ª¨A ƒê·ªîI:
      // 1. G·ªçi h√†m m·ªõi: 'get_post_details_by_id'
      // 2. Truy·ªÅn postId v√† userId V√ÄO B√äN TRONG params, n∆°i ch√∫ng th·ª±c s·ª± thu·ªôc v·ªÅ.
      final data = await _supabase.rpc('get_post_details_by_id', params: {
        'p_post_id': postId,
        'p_user_id': currentUserId,
      }).single(); // Gi·ªù ƒë√¢y .single() s·∫Ω ho·∫°t ƒë·ªông ch√≠nh x√°c v√¨ h√†m RPC
      // ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tr·∫£ v·ªÅ ƒë√∫ng m·ªôt d√≤ng.
      _log.fine('üì• Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu raw: ${data.toString()}');

      final post = Post.fromJson(data);
      _log.info('‚úÖ L·∫•y chi ti·∫øt b√†i vi·∫øt th√†nh c√¥ng.: ${post.toString()}');

      // C√°c logic enrich (l√†m gi√†u d·ªØ li·ªáu) c·ªßa b·∫°n v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n v√† ho·∫°t ƒë·ªông t·ªët.
      final enrichedList = await _enrichPostsWithLocationDisplayName(await _enrichPostsWithDistance([post]));

      return enrichedList.first;
    });
  }

  @override
  Future<Either<PostFailure, void>> likePost({required String postId, required String userId, required bool isLiked}) {
    return _handleErrors(() async {
      final action = isLiked ? "th√≠ch" : "b·ªè th√≠ch";
      _log.info('üîÑ B·∫Øt ƒë·∫ßu $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.');

      if (isLiked) {
        // Ch√®n v√†o b·∫£ng post_likes. Trigger s·∫Ω t·ª± tƒÉng like_count.
        await _dbService.create(
          tableName: 'post_likes',
          data: {'post_id': postId, 'user_id': userId},
          fromJson: (json) => {}, // Dummy fromJson
        );
      } else {
        // X√≥a kh·ªèi b·∫£ng post_likes. Trigger s·∫Ω t·ª± gi·∫£m like_count.
        // D√πng raw client v√¨ _dbService.delete ch·ªâ ho·∫°t ƒë·ªông v·ªõi 1 PK.
        await _supabase.from('post_likes').delete().match({'post_id': postId, 'user_id': userId});
      }
      _log.info('‚úÖ Ho√†n th√†nh $action b√†i vi·∫øt $postId th√†nh c√¥ng.');
    });
  }

  @override
  Future<Either<PostFailure, void>> savePost({required String postId, required String userId, required bool isSaved}) {
    return _handleErrors(() async {
      final action = isSaved ? "l∆∞u" : "b·ªè l∆∞u";
      _log.info('üîÑ B·∫Øt ƒë·∫ßu $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.');

      if (isSaved) {
        await _dbService.create(
          tableName: 'post_saves',
          data: {'post_id': postId, 'user_id': userId},
          fromJson: (json) => {},
        );
      } else {
        await _supabase.from('post_saves').delete().match({'post_id': postId, 'user_id': userId});
      }
      _log.info('‚úÖ Ho√†n th√†nh $action b√†i vi·∫øt $postId th√†nh c√¥ng.');
    });
  }

  @override
  Future<Either<PostFailure, void>> updatePost(Post post) {
    return _handleErrors(() async {
      _log.info('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t b√†i vi·∫øt v√† c√°c review li√™n quan cho ID: ${post.postId}');

      // --- B∆Ø·ªöC 1: C·∫¨P NH·∫¨T TH√îNG TIN CH√çNH C·ª¶A B√ÄI POST ---
      final dataToUpdate = {
        'dish_name': post.dishName,
        'location_name': post.diningLocationName,
        'location_address': post.address?.exactAddress,
        'latitude': post.address?.latitude,
        'longitude': post.address?.longitude,
        'price': post.price,
        'insight': post.insight,
        'food_category': const FoodCategoryConverter().toJson(post.foodCategory),
      };

      // Kh√¥ng c·∫ßn remove null v√¨ `update` c·ªßa Supabase s·∫Ω b·ªè qua ch√∫ng.
      _log.fine('üìù D·ªØ li·ªáu c·∫≠p nh·∫≠t cho b·∫£ng "posts": $dataToUpdate');
      await _dbService.update(
        tableName: 'posts',
        id: post.postId,
        data: dataToUpdate,
        fromJson: (json) => {}, // Kh√¥ng c·∫ßn k·∫øt qu·∫£ tr·∫£ v·ªÅ
      );
      _log.fine('‚úÖ C·∫≠p nh·∫≠t b·∫£ng "posts" th√†nh c√¥ng.');

      // --- B∆Ø·ªöC 2: UPSERT C√ÅC REVIEW ---
      _log.fine('üîÑ Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ upsert c√°c review qua RPC...');

      final List<Map<String, dynamic>> reviewsToUpsert = post.reviews.where((item) => item.rating > 0).map((item) {
        final json = item.toJson();
        json['post_id'] = post.postId;
        return json;
      }).toList();

      if (reviewsToUpsert.isNotEmpty) {
        _log.fine('üì§ ƒêang g·ªçi RPC "upsert_post_reviews" v·ªõi ${reviewsToUpsert.length} review...');
        // Thay th·∫ø _dbService.upsert b·∫±ng m·ªôt l·ªánh g·ªçi RPC tr·ª±c ti·∫øp
        await _supabase.rpc(
          'upsert_post_reviews',
          params: {
            'reviews_data': reviewsToUpsert // Truy·ªÅn to√†n b·ªô danh s√°ch v√†o tham s·ªë c·ªßa h√†m
          },
        );
        _log.fine('‚úÖ G·ªçi RPC "upsert_post_reviews" th√†nh c√¥ng.');
      } else {
        _log.info('‚ÑπÔ∏è Kh√¥ng c√≥ review n√†o h·ª£p l·ªá ƒë·ªÉ upsert.');
      }

      // --- B∆Ø·ªöC 3 (T√ôY CH·ªåN): X√ìA C√ÅC REVIEW KH√îNG C√íN H·ª¢P L·ªÜ ---
      // N·∫øu ng∆∞·ªùi d√πng ch·ªânh s·ª≠a m·ªôt review t·ª´ 4 sao v·ªÅ 0 sao, b∆∞·ªõc 2 s·∫Ω kh√¥ng
      // upsert n√≥. D√≤ng ƒë√≥ v·∫´n c√≤n trong DB. Ch√∫ng ta c·∫ßn x√≥a n√≥ ƒëi.

      // L·∫•y danh s√°ch c√°c category m√† ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t l·∫°i v·ªÅ 0.
      final categoriesToReset = post.reviews.where((item) => item.rating == 0).map((item) => item.category.name).toList();

      if (categoriesToReset.isNotEmpty) {
        _log.fine('üóëÔ∏è ƒêang x√≥a c√°c review ƒë√£ b·ªã ƒë·∫∑t l·∫°i v·ªÅ 0 sao cho c√°c category: $categoriesToReset');

        // B·∫Øt ƒë·∫ßu x√¢y d·ª±ng m·ªôt b·ªô l·ªçc 'OR'
        final orFilter = categoriesToReset
            .map((categoryName) => 'category.eq.$categoryName') // T·∫°o c√°c c·∫∑p 'c·ªôt.to√°n_t·ª≠.gi√°_tr·ªã'
            .join(','); // N·ªëi ch√∫ng b·∫±ng d·∫•u ph·∫©y

        await _supabase
            .from('post_reviews')
            .delete()
            .eq('post_id', post.postId) // ƒêi·ªÅu ki·ªán V√Ä: post_id ph·∫£i kh·ªõp
            .or(orFilter); // ƒêi·ªÅu ki·ªán HO·∫∂C: category l√† m·ªôt trong c√°c gi√° tr·ªã trong danh s√°ch

        _log.fine('‚úÖ X√≥a c√°c review kh√¥ng h·ª£p l·ªá th√†nh c√¥ng.');
      }

      _log.info('üéâ Ho√†n th√†nh c·∫≠p nh·∫≠t b√†i vi·∫øt v√† c√°c review cho ID: ${post.postId}');
    });
  }

  @override
  Future<Either<PostFailure, void>> deletePost({required String postId}) {
    // 1. S·ª≠ d·ª•ng helper _handleErrors ƒë·ªÉ b·ªçc to√†n b·ªô logic.
    // N√≥ s·∫Ω b·∫Øt c√°c l·ªói nghi√™m tr·ªçng t·ª´ _dbService (nh∆∞ PermissionDenied)
    // v√† d·ªãch ch√∫ng sang Failure t∆∞∆°ng ·ª©ng.
    return _handleErrors(() async {
      _log.info('üóëÔ∏è B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√≥a b√†i vi·∫øt ID: $postId');

      // B∆Ø·ªöC QUAN TR·ªåNG: X√≥a b·∫£n ghi trong c∆° s·ªü d·ªØ li·ªáu tr∆∞·ªõc ti√™n.
      // N·∫øu b∆∞·ªõc n√†y th·∫•t b·∫°i (v√≠ d·ª•: kh√¥ng c√≥ quy·ªÅn x√≥a), _handleErrors s·∫Ω b·∫Øt
      // v√† n√©m ra Failure, k·∫øt th√∫c qu√° tr√¨nh ngay l·∫≠p t·ª©c.
      _log.fine('üóÉÔ∏è ƒêang x√≥a b·∫£n ghi trong b·∫£ng "posts"...');
      await _dbService.delete(
        tableName: 'posts',
        id: postId,
      );
      _log.fine('‚úÖ X√≥a b·∫£n ghi trong database th√†nh c√¥ng. C√°c likes/saves li√™n quan ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a (ON DELETE CASCADE).');

      // B∆Ø·ªöC D·ªåN D·∫∏P: X√≥a ·∫£nh t∆∞∆°ng ·ª©ng kh·ªèi Cloudinary.
      // Ch√∫ng ta b·ªçc thao t√°c n√†y trong m·ªôt kh·ªëi try-catch ri√™ng ƒë·ªÉ n√≥ kh√¥ng
      // l√†m h·ªèng to√†n b·ªô qu√° tr√¨nh n·∫øu c√≥ l·ªói kh√¥ng nghi√™m tr·ªçng.
      try {
        _log.fine('üñºÔ∏è ƒêang x√≥a ·∫£nh t·ª´ Cloudinary...');
        await _storageService.deleteFile(
          folder: 'posts', // Th∆∞ m·ª•c ch·ª©a ·∫£nh b√†i vi·∫øt tr√™n Cloudinary
          publicId: postId,
        );
        // Log th√†nh c√¥ng s·∫Ω ƒë∆∞·ª£c ghi b·ªüi ch√≠nh StorageService.
      } on StorageServiceException catch (e, st) {
        // 2. Ghi nh·∫≠n l·ªói nh∆∞ng kh√¥ng n√©m l·∫°i.
        // Qu√° tr√¨nh x√≥a post v·∫´n ƒë∆∞·ª£c coi l√† th√†nh c√¥ng ƒë·ªëi v·ªõi ng∆∞·ªùi d√πng
        // v√¨ b·∫£n ghi DB ƒë√£ bi·∫øn m·∫•t. L·ªói n√†y d√†nh cho ƒë·ªôi ng≈© ph√°t tri·ªÉn ƒë·ªÉ theo d√µi.
        _log.warning(
          '‚ö†Ô∏è L·ªói kh√¥ng nghi√™m tr·ªçng khi x√≥a ·∫£nh cho postId: $postId. '
          'B·∫£n ghi DB ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng. L·ªói Storage: ${e.message}',
          e,
          st,
        );
      }

      _log.info('üéâ Ho√†n th√†nh x√≥a b√†i vi·∫øt ID: $postId.');
    });
  }

  Future<String?> _getLatLngForGeoSearch() async {
    // Logic l·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng t·ª´ LocationService
    // v√† tr·∫£ v·ªÅ chu·ªói "lat,lng", v√≠ d·ª•: "21.028511,105.804817"
    // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠.
    try {
      final position = await _locationService.getCurrentPosition();
      return '${position.latitude},${position.longitude}';
    } catch (e) {
      return null;
    }
  }

  @override
  Future<Either<PostFailure, List<Post>>> searchPosts({
    required String query,
    int page = 0,
    int hitsPerPage = 20,
    FilterSortParams? filterParams,
  }) async {
    _log.info('üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm b√†i vi·∫øt v·ªõi query: "$query"');
    try {
      // =======================================================================
      // === THAY ƒê·ªîI QUAN TR·ªåNG ·ªû ƒê√ÇY ==========================================
      // =======================================================================

      // 1. Khai b√°o latLngForGeoSearch l√† null ban ƒë·∫ßu
      String? latLngForGeoSearch;

      // 2. Ch·ªâ l·∫•y v·ªã tr√≠ v√† g√°n gi√° tr·ªã cho latLngForGeoSearch
      //    N·∫æU ng∆∞·ªùi d√πng ƒë√£ ch·ªçn m·ªôt b·ªô l·ªçc kho·∫£ng c√°ch.
      if (filterParams?.distance != null) {
        _log.info('üö∂ Ng∆∞·ªùi d√πng ƒë√£ l·ªçc theo kho·∫£ng c√°ch, ƒëang l·∫•y v·ªã tr√≠...');
        latLngForGeoSearch = await _getLatLngForGeoSearch();
      }

      // 3. Truy·ªÅn c√°c gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω xu·ªëng SearchService
      final searchResult = await _searchService.search(
        query: query,
        searchType: SearchableItem.posts,
        page: page,
        hitsPerPage: hitsPerPage,
        filterParams: filterParams,
        latLongForGeoSearch: latLngForGeoSearch, // C√≥ th·ªÉ l√† null ho·∫∑c m·ªôt chu·ªói
      );
      _log.info('‚úÖ T√¨m ki·∫øm th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c ${searchResult.objectIds.length} ID b√†i vi·∫øt.');

      if (searchResult.objectIds.isEmpty) {
        return const Right([]); // Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
      }

      // 2. L·∫•y chi ti·∫øt c·ªßa T·∫§T C·∫¢ b√†i vi·∫øt trong M·ªòT l·∫ßn g·ªçi RPC
      _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt cho ${searchResult.objectIds.length} b√†i vi·∫øt trong m·ªôt l·∫ßn g·ªçi...');
      final currentUserId = _authenticationService.getCurrentUserId();

      final List<dynamic> postsData = await _supabase.rpc('get_post_details_by_ids', params: {
        'p_post_ids': searchResult.objectIds, // <<< Truy·ªÅn v√†o to√†n b·ªô m·∫£ng ID
        'p_user_id': currentUserId,
      });

      // Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ JSON th√†nh danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng Post
      final List<Post> unsortedPosts = postsData.map((json) => Post.fromJson(json as Map<String, dynamic>)).toList();

      // 3. S·∫ÆP X·∫æP L·∫†I K·∫æT QU·∫¢ THEO TH·ª® T·ª∞ T·ª™ D·ªäCH V·ª§ T√åM KI·∫æM
      // Database kh√¥ng ƒë·∫£m b·∫£o th·ª© t·ª± tr·∫£ v·ªÅ, nh∆∞ng Algolia ƒë√£ s·∫Øp x·∫øp theo m·ª©c ƒë·ªô li√™n quan.
      // Ch√∫ng ta c·∫ßn s·∫Øp x·∫øp l·∫°i danh s√°ch `unsortedPosts` ƒë·ªÉ kh·ªõp v·ªõi th·ª© t·ª± c·ªßa `searchResult.objectIds`.
      final postsById = {for (var post in unsortedPosts) post.postId: post};
      final List<Post> sortedPosts = searchResult.objectIds
          .map((id) => postsById[id])
          .whereType<Post>() // L·ªçc ra c√°c post kh√¥ng t√¨m th·∫•y (n·∫øu c√≥)
          .toList();

      _log.info('‚úÖ L·∫•y v√† s·∫Øp x·∫øp chi ti·∫øt b√†i vi·∫øt th√†nh c√¥ng.');

      // 4. L√†m gi√†u d·ªØ li·ªáu v·ªõi kho·∫£ng c√°ch (enrichment)
      // B∆∞·ªõc n√†y v·∫´n c·∫ßn thi·∫øt v√¨ h√†m RPC t√¨m ki·∫øm kh√¥ng t√≠nh kho·∫£ng c√°ch ƒë·ªÉ t·ªëi ∆∞u.
      final enrichedPosts = await _enrichPostsWithDistance(sortedPosts);

      // 5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
      return Right(enrichedPosts);
    } on SearchServiceException catch (e, st) {
      // 4. B·∫Øt c√°c l·ªói ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a t·ª´ SearchService v√† √°nh x·∫° ch√∫ng sang PostFailure
      _log.severe('‚ùå L·ªói t·ª´ SearchService: ${e.runtimeType}', e, st);

      // S·ª≠ d·ª•ng switch expression ƒë·ªÉ √°nh x·∫° m·ªôt c√°ch g·ªçn g√†ng v√† an to√†n
      final failure = switch (e) {
        // L·ªói k·∫øt n·ªëi ho·∫∑c timeout t·ª´ Algolia -> ConnectionFailure
        SearchConnectionException() => const ConnectionFailure(),

        // L·ªói truy v·∫•n kh√¥ng h·ª£p l·ªá -> PostOperationFailure
        InvalidSearchQueryException() => PostOperationFailure(e.message),

        // L·ªói x√°c th·ª±c, kh√¥ng t√¨m th·∫•y index, l·ªói server Algolia -> gom v√†o m·ªôt l·ªói ho·∫°t ƒë·ªông chung
        // v√¨ t·ª´ g√≥c ƒë·ªô ng∆∞·ªùi d√πng, ƒë√¢y l√† l·ªói h·ªá th·ªëng.
        SearchApiException() => const PostOperationFailure('D·ªãch v·ª• t√¨m ki·∫øm ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.'),

        // L·ªói ph√¢n t√≠ch d·ªØ li·ªáu -> L·ªói h·ªá th·ªëng/D·ªØ li·ªáu kh√¥ng nh·∫•t qu√°n
        SearchDataParsingException() => const PostOperationFailure('Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t√¨m ki·∫øm.'),
      };
      return Left(failure);
    } on Exception catch (e, st) {
      // 5. B·∫Øt t·∫•t c·∫£ c√°c l·ªói kh√¥ng mong mu·ªën kh√°c
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh t√¨m ki·∫øm', e, st);
      return const Left(UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, List<Post>>> getRecommendedPosts({
    required int page,
    required int pageSize,
  }) {
    return _handleErrors(() async {
      _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y trang $page c√°c b√†i vi·∫øt ƒë∆∞·ª£c g·ª£i √Ω (k√≠ch th∆∞·ªõc trang: $pageSize)...');

      // =======================================================================
      // === B∆Ø·ªöC 1: G·ªåI RPC V√Ä LOG D·ªÆ LI·ªÜU TH√î (RAW DATA) ======================
      // =======================================================================
      final List<dynamic> data = await _supabase.rpc(
        'get_recommended_posts_paginated',
        params: {
          'p_page_number': page,
          'p_page_size': pageSize,
        },
      );

      // In ra d·ªØ li·ªáu th√¥ ƒë·ªÉ ki·ªÉm tra th·ª© t·ª± t·ª´ server
      _log.info('üóÑÔ∏è D·ªÆ LI·ªÜU TH√î T·ª™ SUPABASE RPC:');
      for (var i = 0; i < data.length; i++) {
        final item = data[i] as Map<String, dynamic>;
        // In ra t√™n m√≥n ƒÉn v√† ƒëi·ªÉm s·ªë ƒë·ªÉ d·ªÖ so s√°nh
        _log.info('  [${i + 1}] ${item['dishName']} - score: ${item['score']}');
      }

      // =======================================================================
      // === B∆Ø·ªöC 2: CHUY·ªÇN ƒê·ªîI V√Ä LOG DANH S√ÅCH POST ==========================
      // =======================================================================
      final posts = data.map((json) => Post.fromJson(json as Map<String, dynamic>)).toList();
      _log.info('‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng ${posts.length} b√†i vi·∫øt g·ª£i √Ω.');

      // In ra danh s√°ch Post sau khi chuy·ªÉn ƒë·ªïi
      _log.info('üìú DANH S√ÅCH POST SAU KHI CHUY·ªÇN ƒê·ªîI (TR∆Ø·ªöC KHI L√ÄM GI√ÄU):');
      for (var i = 0; i < posts.length; i++) {
        _log.info('  [${i + 1}] ${posts[i].dishName} - score: ${posts[i].score} (l·∫•y t·ª´ Post object)');
      }

      // =======================================================================
      // === B∆Ø·ªöC 3: L√ÄM GI√ÄU D·ªÆ LI·ªÜU V√Ä LOG K·∫æT QU·∫¢ CU·ªêI C√ôNG =================
      // =======================================================================
      if (posts.isNotEmpty) {
        final enrichedPosts = await _enrichPostsWithDistance(posts);

        // In ra danh s√°ch Post sau khi ƒë√£ ƒë∆∞·ª£c l√†m gi√†u
        _log.info('‚ú® DANH S√ÅCH POST SAU KHI L√ÄM GI√ÄU (TR∆Ø·ªöC KHI TR·∫¢ V·ªÄ):');
        for (var i = 0; i < enrichedPosts.length; i++) {
          _log.info('  [${i + 1}] ${enrichedPosts[i].dishName} - distance: ${enrichedPosts[i].distance}');
        }

        return enrichedPosts;
      }

      return posts;
    });
  }

  @override
  Future<Either<PostFailure, void>> recordPostView({
    required String postId,
    int? durationInMs,
  }) {
    // S·ª≠ d·ª•ng helper `_handleErrors` ƒë·ªÉ t·ª± ƒë·ªông b·∫Øt l·ªói v√† chuy·ªÉn ƒë·ªïi sang PostFailure
    return _handleErrors(() async {
      _log.info('üìù Ghi nh·∫≠n l∆∞·ª£t xem cho b√†i vi·∫øt ID: $postId...');

      // 1. Chu·∫©n b·ªã c√°c tham s·ªë cho l·ªánh g·ªçi RPC
      final params = <String, dynamic>{
        'p_post_id': postId,
      };

      // 2. Ch·ªâ th√™m tham s·ªë th·ªùi gian xem n·∫øu n√≥ h·ª£p l·ªá
      if (durationInMs != null && durationInMs > 0) {
        params['p_view_duration_ms'] = durationInMs;
        _log.fine('... v·ªõi th·ªùi gian xem: ${durationInMs}ms');
      }

      // 3. G·ªçi h√†m RPC tr√™n Supabase
      // H√†m n√†y kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu (void), n√™n ch√∫ng ta ch·ªâ c·∫ßn `await` n√≥
      // ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ ho√†n th√†nh ho·∫∑c n√©m ra l·ªói.
      await _supabase.rpc(
        'record_post_view',
        params: params,
      );

      _log.fine('‚úÖ Ghi nh·∫≠n l∆∞·ª£t xem th√†nh c√¥ng.');
    });
  }

  @override
  Future<Either<PostFailure, List<Post>>> getTrendingPosts({
    required int page,
    required int pageSize,
  }) {
    // T·∫≠n d·ª•ng l·∫°i c∆° ch·∫ø x·ª≠ l√Ω l·ªói hi·ªán c√≥
    return _handleErrors(() async {
      _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y trang $page c√°c b√†i vi·∫øt th·ªãnh h√†nh (fallback)...');

      final List<dynamic> data = await _supabase.rpc(
        'get_trending_posts_paginated',
        params: {
          'p_page_number': page,
          'p_page_size': pageSize,
        },
      );

      final posts = data.map((json) => Post.fromJson(json as Map<String, dynamic>)).toList();
      _log.info('‚úÖ L·∫•y th√†nh c√¥ng ${posts.length} b√†i vi·∫øt th·ªãnh h√†nh.');

      // V·∫´n l√†m gi√†u d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
      if (posts.isNotEmpty) {
        return _enrichPostsWithDistance(posts);
      }

      return posts;
    });
  }
}
