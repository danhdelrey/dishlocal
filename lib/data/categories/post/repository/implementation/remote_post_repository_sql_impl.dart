// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:io';

import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/services/database_service/entity/post_entity.dart';
import 'package:dishlocal/data/services/database_service/exception/sql_database_service_exception.dart';
import 'package:dishlocal/data/services/geocoding_service/interface/geocoding_service.dart';
import 'package:dishlocal/data/services/search_service/exception/search_service_exception.dart';
import 'package:dishlocal/data/services/search_service/interface/search_service.dart';
import 'package:dishlocal/data/services/storage_service/exception/storage_service_exception.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

import 'package:dishlocal/data/categories/post/failure/post_failure.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:dishlocal/data/services/authentication_service/interface/authentication_service.dart';
import 'package:dishlocal/data/services/database_service/interface/sql_database_service.dart';
import 'package:dishlocal/data/services/distance_service/interface/distance_service.dart';
import 'package:dishlocal/data/services/location_service/interface/location_service.dart';
import 'package:dishlocal/data/services/storage_service/interface/storage_service.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

@LazySingleton(as: PostRepository)
class RemotePostRepositorySqlImpl implements PostRepository {
  final _log = Logger('RemotePostRepositorySqlImpl');
  final _supabase = Supabase.instance.client; // D√πng cho c√°c thao t√°c ph·ª©c t·∫°p (RPC, match)
  final StorageService _storageService;
  final SqlDatabaseService _dbService;
  final DistanceService _distanceService;
  final LocationService _locationService;
  final GeocodingService _geocodingService;
  final AuthenticationService _authenticationService;
  final SearchService _searchService;

  RemotePostRepositorySqlImpl(
    this._storageService,
    this._dbService,
    this._distanceService,
    this._locationService,
    this._authenticationService,
    this._geocodingService,
    this._searchService,
  );

  // Helper ƒë·ªÉ b·∫Øt v√† d·ªãch l·ªói
  Future<Either<PostFailure, T>> _handleErrors<T>(Future<T> Function() future) async {
    try {
      return Right(await future());
    } on SqlDatabaseServiceException catch (e) {
      _log.severe('‚ùå L·ªói t·ª´ SqlDatabaseService', e);
      return Left(switch (e) {
        PermissionDeniedException() => const PermissionFailure(),
        RecordNotFoundException() => const PostNotFoundFailure(),
        UniqueConstraintViolationException() => const PostOperationFailure('D·ªØ li·ªáu n√†y ƒë√£ t·ªìn t·∫°i.'),
        CheckConstraintViolationException() => const PostOperationFailure('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.'),
        DatabaseConnectionException() => const ConnectionFailure(),
        _ => const UnknownFailure(),
      });
    } on StorageException catch (e) {
      _log.severe('‚ùå L·ªói t·ª´ StorageService', e);
      return const Left(ImageUploadFailure());
    } catch (e, st) {
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong Repository', e, st);
      return const Left(UnknownFailure());
    }
  }

  // Helper ƒë·ªÉ l√†m gi√†u d·ªØ li·ªáu (ch·ªâ t√≠nh kho·∫£ng c√°ch)
  Future<List<Post>> _enrichPostsWithDistance(List<Post> posts) async {
    if (posts.isEmpty) return [];
    _log.fine('üìè B·∫Øt ƒë·∫ßu t√≠nh kho·∫£ng c√°ch cho ${posts.length} b√†i vi·∫øt...');
    final userPosition = await _locationService.getCurrentPosition();
    final enriched = await Future.wait(posts.map((post) async {
      if (post.address?.latitude != null && post.address?.longitude != null) {
        final distance = await _distanceService.calculateDistance(
          fromLat: userPosition.latitude,
          fromLong: userPosition.longitude,
          toLat: post.address!.latitude,
          toLong: post.address!.longitude,
        );
        return post.copyWith(distance: distance);
      }
      return post;
    }));
    _log.fine('‚úÖ Ho√†n th√†nh t√≠nh kho·∫£ng c√°ch.');
    return enriched;
  }

  Future<List<Post>> _enrichPostsWithLocationDisplayName(List<Post> posts) async {
    if (posts.isEmpty) return [];
    _log.fine('üìè B·∫Øt ƒë·∫ßu l·∫•y t√™n ƒë·ªãa ƒëi·ªÉm cho ${posts.length} b√†i vi·∫øt...');
    final enriched = await Future.wait(posts.map((post) async {
      if (post.address?.latitude != null && post.address?.longitude != null) {
        final name = await _geocodingService.getAddressFromPosition(post.address!.latitude, post.address!.longitude);
        final address = post.address!.copyWith(
          displayName: name,
        );
        return post.copyWith(address: address);
      }
      return post;
    }));
    _log.fine('‚úÖ Ho√†n th√†nh t√≠nh kho·∫£ng c√°ch.');
    return enriched;
  }

  @override
  Future<Either<PostFailure, void>> createPost({required Post post, required File imageFile}) async {
    return _handleErrors(() async {
      _log.info('üëâ B·∫Øt ƒë·∫ßu t·∫°o b√†i vi·∫øt m·ªõi...');

      _log.fine('üîÑ ƒêang t·∫£i ·∫£nh l√™n Storage...');
      final imageUrl = await _storageService.uploadFile(
        folder: 'posts',
        file: imageFile,
        publicId: post.postId,
      );
      _log.fine('‚úÖ T·∫£i ·∫£nh th√†nh c√¥ng. URL: $imageUrl');

      // Chuy·ªÉn ƒë·ªïi t·ª´ UI Model 'Post' sang 'PostEntity' ƒë·ªÉ l∆∞u v√†o DB
      final postEntity = PostEntity(
        id: post.postId,
        authorId: post.authorUserId,
        imageUrl: imageUrl,
        blurHash: post.blurHash,
        dishName: post.dishName,
        locationName: post.diningLocationName,
        locationAddress: post.address?.exactAddress,
        latitude: post.address?.latitude,
        longitude: post.address?.longitude,
        price: post.price,
        insight: post.insight,
        createdAt: post.createdAt,
      );

      _log.fine('üì§ ƒêang l∆∞u b√†i vi·∫øt v√†o b·∫£ng "posts"...');
      await _dbService.create(
        tableName: 'posts',
        data: postEntity.toJson(),
        fromJson: PostEntity.fromJson, // D√π kh√¥ng d√πng k·∫øt qu·∫£, v·∫´n c·∫ßn cung c·∫•p
      );
      _log.info('üéâ T·∫°o b√†i vi·∫øt th√†nh c√¥ng!');
    });
  }

  // Ph∆∞∆°ng th·ª©c chung ƒë·ªÉ g·ªçi RPC v√† x·ª≠ l√Ω k·∫øt qu·∫£
  Future<List<Post>> _fetchPostsViaRpc({
    required String rpcName,
    required Map<String, dynamic> params,
  }) async {
    _log.info('üì° G·ªçi RPC "$rpcName" v·ªõi params: $params');
    final data = await _supabase.rpc(rpcName, params: params);

    if (data is! List) {
      _log.warning('‚ö†Ô∏è RPC "$rpcName" kh√¥ng tr·∫£ v·ªÅ m·ªôt List. K·∫øt qu·∫£: $data');
      return [];
    }

    final posts = data.map((json) => Post.fromJson(json as Map<String, dynamic>)).toList();
    _log.info('‚úÖ RPC "$rpcName" th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c ${posts.length} b√†i vi·∫øt.');
    _log.info(posts.map(
      (post) {
        _log.info('${post.toString()} \n\n');
      },
    ));

    return await _enrichPostsWithDistance(posts);
  }

  @override
  Future<Either<PostFailure, List<Post>>> getPosts({int limit = 10, DateTime? startAfter}) {
    return _handleErrors(() async {
      final currentUserId = _authenticationService.getCurrentUserId();
      return _fetchPostsViaRpc(
        rpcName: 'get_posts_with_details',
        params: {
          'p_user_id': currentUserId,
          'p_limit': limit,
          'p_start_after': startAfter?.toUtc().toIso8601String() ?? '9999-12-31',
        },
      );
    });
  }

  @override
  Future<Either<PostFailure, List<Post>>> getFollowingPosts({int limit = 10, DateTime? startAfter}) {
    return _handleErrors(() async {
      final currentUserId = _authenticationService.getCurrentUserId();
      if (currentUserId == null) return []; // Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p
      return _fetchPostsViaRpc(
        rpcName: 'get_posts_with_details',
        params: {
          'p_user_id': currentUserId,
          'p_is_following_feed': true,
          'p_limit': limit,
          'p_start_after': startAfter?.toUtc().toIso8601String() ?? '9999-12-31',
        },
      );
    });
  }

  @override
  Future<Either<PostFailure, List<Post>>> getPostsByUserId({required String? userId, int limit = 10, DateTime? startAfter}) {
    return _handleErrors(() async {
      final targetUserId = userId ?? _authenticationService.getCurrentUserId();
      if (targetUserId == null) return [];

      return _fetchPostsViaRpc(
        rpcName: 'get_posts_with_details',
        params: {
          'p_user_id': _authenticationService.getCurrentUserId(), // User ƒëang xem
          'p_author_id': targetUserId, // L·ªçc theo t√°c gi·∫£ n√†y
          'p_limit': limit,
          'p_start_after': startAfter?.toUtc().toIso8601String() ?? '9999-12-31',
        },
      );
    });
  }

  @override
  Future<Either<PostFailure, List<Post>>> getSavedPosts({String? userId, int limit = 10, DateTime? startAfter}) {
    return _handleErrors(() async {
      final targetUserId = userId ?? _authenticationService.getCurrentUserId();
      if (targetUserId == null) return [];

      return _fetchPostsViaRpc(
        rpcName: 'get_posts_with_details',
        params: {
          'p_user_id': targetUserId, // User ƒëang xem ch√≠nh l√† ng∆∞·ªùi c√≥ b√†i vi·∫øt ƒë√£ l∆∞u
          'p_is_saved_feed': true,
          'p_limit': limit,
          'p_start_after': startAfter?.toUtc().toIso8601String() ?? '9999-12-31',
        },
      );
    });
  }

  @override
  Future<Either<PostFailure, Post>> getPostWithId(String postId) {
    // _handleErrors l√† m·ªôt wrapper tuy·ªát v·ªùi ƒë·ªÉ x·ª≠ l√Ω l·ªói m·ªôt c√°ch t·∫≠p trung.
    return _handleErrors(() async {
      _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt b√†i vi·∫øt ID: $postId');
      final currentUserId = _authenticationService.getCurrentUserId();

      // S·ª¨A ƒê·ªîI:
      // 1. G·ªçi h√†m m·ªõi: 'get_post_details_by_id'
      // 2. Truy·ªÅn postId v√† userId V√ÄO B√äN TRONG params, n∆°i ch√∫ng th·ª±c s·ª± thu·ªôc v·ªÅ.
      final data = await _supabase.rpc('get_post_details_by_id', params: {
        'p_post_id': postId,
        'p_user_id': currentUserId,
      }).single(); // Gi·ªù ƒë√¢y .single() s·∫Ω ho·∫°t ƒë·ªông ch√≠nh x√°c v√¨ h√†m RPC
      // ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tr·∫£ v·ªÅ ƒë√∫ng m·ªôt d√≤ng.

      final post = Post.fromJson(data);
      _log.info('‚úÖ L·∫•y chi ti·∫øt b√†i vi·∫øt th√†nh c√¥ng.: ${post.toString()}');

      // C√°c logic enrich (l√†m gi√†u d·ªØ li·ªáu) c·ªßa b·∫°n v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n v√† ho·∫°t ƒë·ªông t·ªët.
      final enrichedList = await _enrichPostsWithLocationDisplayName(await _enrichPostsWithDistance([post]));

      return enrichedList.first;
    });
  }

  @override
  Future<Either<PostFailure, void>> likePost({required String postId, required String userId, required bool isLiked}) {
    return _handleErrors(() async {
      final action = isLiked ? "th√≠ch" : "b·ªè th√≠ch";
      _log.info('üîÑ B·∫Øt ƒë·∫ßu $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.');

      if (isLiked) {
        // Ch√®n v√†o b·∫£ng post_likes. Trigger s·∫Ω t·ª± tƒÉng like_count.
        await _dbService.create(
          tableName: 'post_likes',
          data: {'post_id': postId, 'user_id': userId},
          fromJson: (json) => {}, // Dummy fromJson
        );
      } else {
        // X√≥a kh·ªèi b·∫£ng post_likes. Trigger s·∫Ω t·ª± gi·∫£m like_count.
        // D√πng raw client v√¨ _dbService.delete ch·ªâ ho·∫°t ƒë·ªông v·ªõi 1 PK.
        await _supabase.from('post_likes').delete().match({'post_id': postId, 'user_id': userId});
      }
      _log.info('‚úÖ Ho√†n th√†nh $action b√†i vi·∫øt $postId th√†nh c√¥ng.');
    });
  }

  @override
  Future<Either<PostFailure, void>> savePost({required String postId, required String userId, required bool isSaved}) {
    return _handleErrors(() async {
      final action = isSaved ? "l∆∞u" : "b·ªè l∆∞u";
      _log.info('üîÑ B·∫Øt ƒë·∫ßu $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.');

      if (isSaved) {
        await _dbService.create(
          tableName: 'post_saves',
          data: {'post_id': postId, 'user_id': userId},
          fromJson: (json) => {},
        );
      } else {
        await _supabase.from('post_saves').delete().match({'post_id': postId, 'user_id': userId});
      }
      _log.info('‚úÖ Ho√†n th√†nh $action b√†i vi·∫øt $postId th√†nh c√¥ng.');
    });
  }

  @override
  Future<Either<PostFailure, void>> updatePost(Post post) {
    return _handleErrors(() async {
      _log.info('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t b√†i vi·∫øt ID: ${post.postId}');
      final dataToUpdate = {
        'dish_name': post.dishName,
        'location_name': post.diningLocationName,
        'location_address': post.address?.exactAddress,
        'latitude': post.address?.latitude,
        'longitude': post.address?.longitude,
        'price': post.price,
        'insight': post.insight,
      };

      // Lo·∫°i b·ªè c√°c gi√° tr·ªã null ƒë·ªÉ kh√¥ng ghi ƒë√® d·ªØ li·ªáu hi·ªán c√≥ b·∫±ng null
      dataToUpdate.removeWhere((key, value) => value == null);

      await _dbService.update(
        tableName: 'posts',
        id: post.postId,
        data: dataToUpdate,
        fromJson: (json) => {},
      );
      _log.info('‚úÖ C·∫≠p nh·∫≠t b√†i vi·∫øt ${post.postId} th√†nh c√¥ng.');
    });
  }

  @override
  Future<Either<PostFailure, void>> deletePost({required String postId}) {
    // 1. S·ª≠ d·ª•ng helper _handleErrors ƒë·ªÉ b·ªçc to√†n b·ªô logic.
    // N√≥ s·∫Ω b·∫Øt c√°c l·ªói nghi√™m tr·ªçng t·ª´ _dbService (nh∆∞ PermissionDenied)
    // v√† d·ªãch ch√∫ng sang Failure t∆∞∆°ng ·ª©ng.
    return _handleErrors(() async {
      _log.info('üóëÔ∏è B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√≥a b√†i vi·∫øt ID: $postId');

      // B∆Ø·ªöC QUAN TR·ªåNG: X√≥a b·∫£n ghi trong c∆° s·ªü d·ªØ li·ªáu tr∆∞·ªõc ti√™n.
      // N·∫øu b∆∞·ªõc n√†y th·∫•t b·∫°i (v√≠ d·ª•: kh√¥ng c√≥ quy·ªÅn x√≥a), _handleErrors s·∫Ω b·∫Øt
      // v√† n√©m ra Failure, k·∫øt th√∫c qu√° tr√¨nh ngay l·∫≠p t·ª©c.
      _log.fine('üóÉÔ∏è ƒêang x√≥a b·∫£n ghi trong b·∫£ng "posts"...');
      await _dbService.delete(
        tableName: 'posts',
        id: postId,
      );
      _log.fine('‚úÖ X√≥a b·∫£n ghi trong database th√†nh c√¥ng. C√°c likes/saves li√™n quan ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a (ON DELETE CASCADE).');

      // B∆Ø·ªöC D·ªåN D·∫∏P: X√≥a ·∫£nh t∆∞∆°ng ·ª©ng kh·ªèi Cloudinary.
      // Ch√∫ng ta b·ªçc thao t√°c n√†y trong m·ªôt kh·ªëi try-catch ri√™ng ƒë·ªÉ n√≥ kh√¥ng
      // l√†m h·ªèng to√†n b·ªô qu√° tr√¨nh n·∫øu c√≥ l·ªói kh√¥ng nghi√™m tr·ªçng.
      try {
        _log.fine('üñºÔ∏è ƒêang x√≥a ·∫£nh t·ª´ Cloudinary...');
        await _storageService.deleteFile(
          folder: 'posts', // Th∆∞ m·ª•c ch·ª©a ·∫£nh b√†i vi·∫øt tr√™n Cloudinary
          publicId: postId,
        );
        // Log th√†nh c√¥ng s·∫Ω ƒë∆∞·ª£c ghi b·ªüi ch√≠nh StorageService.
      } on StorageServiceException catch (e, st) {
        // 2. Ghi nh·∫≠n l·ªói nh∆∞ng kh√¥ng n√©m l·∫°i.
        // Qu√° tr√¨nh x√≥a post v·∫´n ƒë∆∞·ª£c coi l√† th√†nh c√¥ng ƒë·ªëi v·ªõi ng∆∞·ªùi d√πng
        // v√¨ b·∫£n ghi DB ƒë√£ bi·∫øn m·∫•t. L·ªói n√†y d√†nh cho ƒë·ªôi ng≈© ph√°t tri·ªÉn ƒë·ªÉ theo d√µi.
        _log.warning(
          '‚ö†Ô∏è L·ªói kh√¥ng nghi√™m tr·ªçng khi x√≥a ·∫£nh cho postId: $postId. '
          'B·∫£n ghi DB ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng. L·ªói Storage: ${e.message}',
          e,
          st,
        );
      }

      _log.info('üéâ Ho√†n th√†nh x√≥a b√†i vi·∫øt ID: $postId.');
    });
  }

  @override
  Future<Either<PostFailure, List<Post>>> searchPosts({
    required String query,
    int page = 0,
    int hitsPerPage = 20,
  }) async {
    _log.info('üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm b√†i vi·∫øt v·ªõi query: "$query"');
    try {
      // 1. ·ª¶y quy·ªÅn c√¥ng vi·ªác t√¨m ki·∫øm cho SearchService
      final searchResult = await _searchService.search(
        query: query,
        searchType: SearchableItem.posts,
        page: page,
        hitsPerPage: hitsPerPage,
      );
      _log.info('‚úÖ T√¨m ki·∫øm th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c ${searchResult.objectIds.length} b√†i vi·∫øt.');
      if (searchResult.objectIds.isEmpty) {
        _log.info('üîç Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o v·ªõi query: "$query"');
        return const Right([]); // Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
      }
      _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt cho ${searchResult.objectIds.length} b√†i vi·∫øt...');
      // 2. L·∫•y chi ti·∫øt b√†i vi·∫øt t·ª´ Supabase b·∫±ng RPC;

      final currentUserId = _authenticationService.getCurrentUserId();
      final List<Post> posts = [];

      for (var postId in searchResult.objectIds) {
        _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt b√†i vi·∫øt ID: $postId');
        final data = await _supabase.rpc('get_post_details_by_id', params: {
          'p_post_id': postId,
          'p_user_id': currentUserId,
        }).single();

        final post = Post.fromJson(data);
        posts.add(post);
        _log.info('‚úÖ L·∫•y chi ti·∫øt b√†i vi·∫øt th√†nh c√¥ng.: ${post.toString()}');
      }

      // 2. L√†m gi√†u d·ªØ li·ªáu v·ªõi kho·∫£ng c√°ch
      final enrichedPosts = await _enrichPostsWithDistance(posts);

      // 3. Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
      return Right(enrichedPosts);
    } on SearchServiceException catch (e, st) {
      // 4. B·∫Øt c√°c l·ªói ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a t·ª´ SearchService v√† √°nh x·∫° ch√∫ng sang PostFailure
      _log.severe('‚ùå L·ªói t·ª´ SearchService: ${e.runtimeType}', e, st);

      // S·ª≠ d·ª•ng switch expression ƒë·ªÉ √°nh x·∫° m·ªôt c√°ch g·ªçn g√†ng v√† an to√†n
      final failure = switch (e) {
        // L·ªói k·∫øt n·ªëi ho·∫∑c timeout t·ª´ Algolia -> ConnectionFailure
        SearchConnectionException() => const ConnectionFailure(),

        // L·ªói truy v·∫•n kh√¥ng h·ª£p l·ªá -> PostOperationFailure
        InvalidSearchQueryException() => PostOperationFailure(e.message),

        // L·ªói x√°c th·ª±c, kh√¥ng t√¨m th·∫•y index, l·ªói server Algolia -> gom v√†o m·ªôt l·ªói ho·∫°t ƒë·ªông chung
        // v√¨ t·ª´ g√≥c ƒë·ªô ng∆∞·ªùi d√πng, ƒë√¢y l√† l·ªói h·ªá th·ªëng.
        SearchApiException() => const PostOperationFailure('D·ªãch v·ª• t√¨m ki·∫øm ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.'),

        // L·ªói ph√¢n t√≠ch d·ªØ li·ªáu -> L·ªói h·ªá th·ªëng/D·ªØ li·ªáu kh√¥ng nh·∫•t qu√°n
        SearchDataParsingException() => const PostOperationFailure('Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t√¨m ki·∫øm.'),
      };
      return Left(failure);
    } on Exception catch (e, st) {
      // 5. B·∫Øt t·∫•t c·∫£ c√°c l·ªói kh√¥ng mong mu·ªën kh√°c
      _log.severe('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh t√¨m ki·∫øm', e, st);
      return const Left(UnknownFailure());
    }
  }
}
