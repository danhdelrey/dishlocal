// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/services/authentication_service/interface/authentication_service.dart';
import 'package:dishlocal/data/services/database_service/model/batch_operation.dart';
import 'package:dishlocal/data/services/database_service/model/server_timestamp.dart';
import 'package:dishlocal/data/services/distance_service/interface/distance_service.dart';
import 'package:dishlocal/data/services/location_service/interface/location_service.dart';
import 'package:dishlocal/data/services/storage_service/interface/storage_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

import 'package:dishlocal/data/categories/post/failure/post_failure.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:dishlocal/data/services/database_service/interface/no_sql_database_service.dart';
import 'package:dishlocal/ui/features/post/view/small_post.dart';

@LazySingleton(as: PostRepository)
class RemotePostRepositoryImpl implements PostRepository {
  final _log = Logger('RemotePostRepositoryImpl');
  final StorageService _storageService;
  final NoSqlDatabaseService _databaseService;
  final DistanceService _distanceService;
  final LocationService _locationService;
  final AuthenticationService _authenticationService;

  RemotePostRepositoryImpl(
    this._storageService,
    this._databaseService,
    this._distanceService,
    this._locationService,
    this._authenticationService,
  );

  Future<List<Post>> _enrichPostsWithUserData(List<Post> posts) async {
    if (posts.isEmpty) return [];

    // L·∫•y ID ng∆∞·ªùi d√πng hi·ªán t·∫°i
    final currentUserId = _authenticationService.getCurrentUserId();

    // Tr√≠ch xu·∫•t danh s√°ch Post ID
    final postIds = posts.map((p) => p.postId).toList();

    // L·∫•y tr·∫°ng th√°i Like v√† Save h√†ng lo·∫°t (ch·ªâ khi user ƒë√£ ƒëƒÉng nh·∫≠p)
    Set<String> likedPostIds = {};
    Set<String> savedPostIds = {};

    if (currentUserId != null && currentUserId.isNotEmpty) {
      final results = await Future.wait([
        _databaseService.getDocumentsWhereIdIn(
          collection: 'users/$currentUserId/likes',
          ids: postIds,
        ),
        _databaseService.getDocumentsWhereIdIn(
          collection: 'users/$currentUserId/savedPosts',
          ids: postIds,
        ),
      ]);
      likedPostIds = results[0].map((doc) => doc['id'] as String).toSet();
      savedPostIds = results[1].map((doc) => doc['id'] as String).toSet();
    }

    // L·∫•y t·ªça ƒë·ªô ng∆∞·ªùi d√πng hi·ªán t·∫°i
    final userPosition = await _locationService.getCurrentPosition();

    // T·ªïng h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu
    final postsWithFullData = await Future.wait(posts.map((post) async {
      final distance = (post.address?.latitude != null && post.address?.longitude != null)
          ? await _distanceService.calculateDistance(
              fromLat: userPosition.latitude,
              fromLong: userPosition.longitude,
              toLat: post.address!.latitude,
              toLong: post.address!.longitude,
            )
          : null;

      final isLiked = likedPostIds.contains(post.postId);
      final isSaved = savedPostIds.contains(post.postId);

      return post.copyWith(
        distance: distance,
        isLiked: isLiked,
        isSaved: isSaved,
      );
    }));

    return postsWithFullData;
  }

  @override
  Future<Either<PostFailure, void>> createPost({
    required Post post,
    required File imageFile,
  }) async {
    _log.info('üëâ B·∫Øt ƒë·∫ßu t·∫°o b√†i vi·∫øt v·ªõi postId: ${post.postId}');

    try {
      _log.fine('üîÑ ƒêang t·∫£i ·∫£nh l√™n Storage v·ªõi postId: ${post.postId}...');
      final url = await _storageService.uploadFile(
        path: 'path',
        file: imageFile,
        publicId: post.postId,
      );
      _log.fine('‚úÖ T·∫£i ·∫£nh th√†nh c√¥ng. URL: $url');

      final postWithImage = post.copyWith(imageUrl: url);
      _log.fine('üì§ ƒêang l∆∞u b√†i vi·∫øt v√†o Firestore v·ªõi d·ªØ li·ªáu: ${postWithImage.toJson()}');

      await _databaseService.setDocument(
        collection: 'posts',
        docId: post.postId,
        data: postWithImage.toJson(),
      );

      _log.info('üéâ T·∫°o b√†i vi·∫øt th√†nh c√¥ng: ${post.postId}');
      return const Right(null);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi t·∫°o b√†i vi·∫øt: ${post.postId}', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, List<Post>>> getPosts({
    int limit = 10,
    DateTime? startAfter,
  }) async {
    _log.info('üì• L·∫•y danh s√°ch post M·ªöI NH·∫§T...');
    try {
      final rawPostsData = await _databaseService.getDocuments(
        collection: 'posts',
        orderBy: 'createdAt',
        descending: true,
        limit: limit,
        startAfter: startAfter,
      );

      if (rawPostsData.isEmpty) {
        return right([]);
      }

      final posts = rawPostsData.map((json) => Post.fromJson(json)).toList();

      // G·ªçi h√†m helper ƒë·ªÉ l√†m gi√†u d·ªØ li·ªáu
      final enrichedPosts = await _enrichPostsWithUserData(posts);

      _log.info('üéâ Ho√†n th√†nh l·∫•y v√† t·ªïng h·ª£p d·ªØ li·ªáu cho ${enrichedPosts.length} b√†i vi·∫øt m·ªõi nh·∫•t.');
      return right(enrichedPosts);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt m·ªõi nh·∫•t', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, void>> likePost({
    required String postId,
    required String userId,
    required bool isLiked,
  }) async {
    final action = isLiked ? "th√≠ch" : "b·ªè th√≠ch";
    _log.info('üîÑ B·∫Øt ƒë·∫ßu $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.');

    try {
      // 1. ƒê·ªãnh nghƒ©a c√°c ƒë∆∞·ªùng d·∫´n c·∫ßn thao t√°c
      final postPath = 'posts/$postId';
      final userLikePath = 'users/$userId/likes/$postId';
      // (Optional) ƒê∆∞·ªùng d·∫´n ƒë·ªÉ tra c·ª©u ng∆∞·ª£c, n·∫øu b·∫°n c·∫ßn
      // final postLikePath = 'likes/$postId/users/$userId';

      // 2. Chu·∫©n b·ªã danh s√°ch c√°c thao t√°c
      final List<BatchOperation> operations = [];
      final incrementValue = isLiked ? 1 : -1;

      // Thao t√°c 1: C·∫≠p nh·∫≠t `likeCount` tr√™n t√†i li·ªáu `post`
      operations.add(BatchOperation.update(
        path: postPath,
        data: {'likeCount': FieldIncrement(incrementValue)},
      ));

      if (isLiked) {
        // Thao t√°c 2 (khi th√≠ch): Ghi l·∫°i r·∫±ng user n√†y ƒë√£ th√≠ch b√†i vi·∫øt
        operations.add(BatchOperation.set(
          path: userLikePath,
          data: {'likedAt': const ServerTimestamp()},
        ));
      } else {
        // Thao t√°c 2 (khi b·ªè th√≠ch): X√≥a b·∫£n ghi user ƒë√£ th√≠ch b√†i vi·∫øt
        operations.add(BatchOperation.delete(path: userLikePath));
      }

      // 3. G·ª≠i to√†n b·ªô c√°c thao t√°c ƒë·∫øn service ƒë·ªÉ th·ª±c thi nguy√™n t·ª≠
      await _databaseService.executeBatch(operations);

      _log.info('‚úÖ Ho√†n th√†nh $action b√†i vi·∫øt $postId th√†nh c√¥ng.');
      return right(null);
    } catch (e, stackTrace) {
      _log.severe(
        '‚ùå L·ªói khi $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.',
        e,
        stackTrace,
      );
      // B·∫°n c√≥ th·ªÉ t·∫°o m·ªôt l·ªõp Failure c·ª• th·ªÉ h∆°n n·∫øu c·∫ßn
      return left(const UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, void>> savePost({
    required String postId,
    required String userId,
    required bool isSaved,
  }) async {
    final action = isSaved ? "l∆∞u" : "b·ªè l∆∞u";
    _log.info('üîÑ B·∫Øt ƒë·∫ßu $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.');

    try {
      // 1. ƒê·ªãnh nghƒ©a c√°c ƒë∆∞·ªùng d·∫´n c·∫ßn thao t√°c
      final postPath = 'posts/$postId';
      final userSavedPostPath = 'users/$userId/savedPosts/$postId';
      // (Optional) ƒê∆∞·ªùng d·∫´n ƒë·ªÉ tra c·ª©u ng∆∞·ª£c, n·∫øu b·∫°n c·∫ßn
      // final postSavedByPath = 'posts/$postId/savedBy/$userId';

      // 2. Chu·∫©n b·ªã danh s√°ch c√°c thao t√°c
      final List<BatchOperation> operations = [];
      final incrementValue = isSaved ? 1 : -1;

      // Thao t√°c 1: C·∫≠p nh·∫≠t `saveCount` tr√™n t√†i li·ªáu `post`
      operations.add(BatchOperation.update(
        path: postPath,
        data: {'saveCount': FieldIncrement(incrementValue)},
      ));

      if (isSaved) {
        // Thao t√°c 2 (khi l∆∞u): Ghi l·∫°i r·∫±ng user n√†y ƒë√£ l∆∞u b√†i vi·∫øt
        operations.add(BatchOperation.set(
          path: userSavedPostPath,
          data: {'savedAt': const ServerTimestamp()},
        ));
      } else {
        // Thao t√°c 2 (khi b·ªè l∆∞u): X√≥a b·∫£n ghi user ƒë√£ l∆∞u b√†i vi·∫øt
        operations.add(BatchOperation.delete(path: userSavedPostPath));
      }

      // 3. G·ª≠i to√†n b·ªô c√°c thao t√°c ƒë·∫øn service ƒë·ªÉ th·ª±c thi nguy√™n t·ª≠
      await _databaseService.executeBatch(operations);

      _log.info('‚úÖ Ho√†n th√†nh $action b√†i vi·∫øt $postId th√†nh c√¥ng.');
      return right(null);
    } catch (e, stackTrace) {
      _log.severe(
        '‚ùå L·ªói khi $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.',
        e,
        stackTrace,
      );
      return left(const UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, Post>> getPostWithId(String postId) async {
    _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y post v·ªõi postId: $postId');

    try {
      // B∆∞·ªõc 1: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      final currentUserId = _authenticationService.getCurrentUserId();
      _log.fine('üÜî User ID hi·ªán t·∫°i: $currentUserId');

      // B∆∞·ªõc 2: L·∫•y d·ªØ li·ªáu b√†i vi·∫øt t·ª´ Firestore
      final json = await _databaseService.getDocument(
        collection: 'posts',
        docId: postId,
      );

      if (json == null) {
        _log.warning('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y post v·ªõi postId: $postId');
        return left(const UnknownFailure()); // B·∫°n c√≥ th·ªÉ ƒë·ªãnh nghƒ©a PostNotFound() n·∫øu ch∆∞a c√≥
      }

      final post = Post.fromJson(json);

      // B∆∞·ªõc 3: Tr·∫°ng th√°i liked/saved
      bool isLiked = false;
      bool isSaved = false;

      if (currentUserId != null && currentUserId.isNotEmpty) {
        final results = await Future.wait([
          _databaseService.getDocument(
            collection: 'users/$currentUserId/likes',
            docId: postId,
          ),
          _databaseService.getDocument(
            collection: 'users/$currentUserId/savedPosts',
            docId: postId,
          ),
        ]);

        isLiked = results[0] != null;
        isSaved = results[1] != null;
      }

      // B∆∞·ªõc 4: T√≠nh kho·∫£ng c√°ch n·∫øu c√≥ ƒë·ªãa ch·ªâ
      double? distance;
      if (post.address?.latitude != null && post.address?.longitude != null) {
        final userPosition = await _locationService.getCurrentPosition();
        distance = await _distanceService.calculateDistance(
          fromLat: userPosition.latitude,
          fromLong: userPosition.longitude,
          toLat: post.address!.latitude,
          toLong: post.address!.longitude,
        );
      }

      final enrichedPost = post.copyWith(
        isLiked: isLiked,
        isSaved: isSaved,
        distance: distance,
      );

      _log.info('‚úÖ L·∫•y b√†i vi·∫øt th√†nh c√¥ng: $postId');
      return right(enrichedPost);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi l·∫•y b√†i vi·∫øt v·ªõi postId: $postId', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, List<Post>>> getSavedPosts({
    String? userId, // <-- Th√™m v√†o ƒë√¢y
    int limit = 10,
    DateTime? startAfter,
  }) async {
    _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch b√†i vi·∫øt ƒë√£ l∆∞u...');
    try {
      // --- B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI ---

      // B∆∞·ªõc 1: X√°c ƒë·ªãnh ID m·ª•c ti√™u (gi·ªëng h·ªát c√°ch l√†m v·ªõi getPostsByUserId)
      final String? targetUserId = userId ?? _authenticationService.getCurrentUserId();

      // B∆∞·ªõc 2: Ki·ªÉm tra ID m·ª•c ti√™u
      if (targetUserId == null || targetUserId.isEmpty) {
        _log.warning('‚ö†Ô∏è UserID m·ª•c ti√™u r·ªóng. Kh√¥ng th·ªÉ l·∫•y b√†i vi·∫øt ƒë√£ l∆∞u.');
        return right([]);
      }
      _log.fine('üÜî L·∫•y b√†i vi·∫øt ƒë√£ l∆∞u cho ng∆∞·ªùi d√πng: $targetUserId');

      // B∆∞·ªõc 3: L·∫•y danh s√°ch tham chi·∫øu b√†i vi·∫øt ƒë√£ l∆∞u t·ª´ ng∆∞·ªùi d√πng m·ª•c ti√™u
      final savedPostRefs = await _databaseService.getDocuments(
        collection: 'users/$targetUserId/savedPosts', // <-- S·ª¨ D·ª§NG targetUserId
        orderBy: 'savedAt',
        descending: true,
        limit: limit,
        startAfter: startAfter,
      );

      // --- K·∫æT TH√öC S·ª¨A ƒê·ªîI --- (Ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n logic)

      if (savedPostRefs.isEmpty) {
        _log.info('‚úÖ Kh√¥ng c√≤n b√†i vi·∫øt n√†o ƒë√£ l∆∞u ƒë·ªÉ hi·ªÉn th·ªã.');
        return right([]);
      }

      final postIds = savedPostRefs.map((ref) => ref['id'] as String).toList();
      _log.fine('üîç T√¨m th·∫•y ${postIds.length} ID b√†i vi·∫øt ƒë√£ l∆∞u: $postIds');

      final rawPostsData = await _databaseService.getDocumentsWhereIdIn(
        collection: 'posts',
        ids: postIds,
      );

      final posts = rawPostsData.map((json) => Post.fromJson(json)).toList();
      final enrichedPosts = await _enrichPostsWithUserData(posts);

      final postIdToPostMap = {for (var post in enrichedPosts) post.postId: post};
      final sortedEnrichedPosts = postIds.map((id) => postIdToPostMap[id]).where((post) => post != null).cast<Post>().toList();

      _log.info('üéâ L·∫•y th√†nh c√¥ng ${sortedEnrichedPosts.length} b√†i vi·∫øt ƒë√£ l∆∞u.');
      return right(sortedEnrichedPosts);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt ƒë√£ l∆∞u', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, List<Post>>> getFollowingPosts({
    int limit = 10,
    DateTime? startAfter,
  }) async {
    _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch b√†i vi·∫øt t·ª´ nh·ªØng ng∆∞·ªùi ƒëang theo d√µi...');
    try {
      // B∆∞·ªõc 1: L·∫•y ID ng∆∞·ªùi d√πng hi·ªán t·∫°i
      final currentUserId = _authenticationService.getCurrentUserId();
      if (currentUserId == null || currentUserId.isEmpty) {
        _log.warning('‚ö†Ô∏è Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p. Kh√¥ng th·ªÉ l·∫•y b√†i vi·∫øt ƒëang theo d√µi.');
        return right([]);
      }

      // B∆∞·ªõc 2: L·∫•y danh s√°ch ID c·ªßa nh·ªØng ng∆∞·ªùi m√† user n√†y ƒëang theo d√µi
      final followingDocs = await _databaseService.getDocuments(
        collection: 'users/$currentUserId/following',
        limit: 1000, // L·∫•y t·ªëi ƒëa 1000 ng∆∞·ªùi ƒëang theo d√µi
      );
      final followingUserIds = followingDocs.map((doc) => doc['id'] as String).toList();

      if (followingUserIds.isEmpty) {
        _log.info('‚úÖ Ng∆∞·ªùi d√πng ch∆∞a theo d√µi ai. Tr·∫£ v·ªÅ danh s√°ch tr·ªëng.');
        return right([]);
      }
      _log.fine('üîç Ng∆∞·ªùi d√πng ƒëang theo d√µi ${followingUserIds.length} ng∆∞·ªùi.');

      // B∆∞·ªõc 3: S·ª≠ d·ª•ng h√†m m·ªõi getDocumentsWhere ƒë·ªÉ l·∫•y b√†i vi·∫øt c√≥ authorId n·∫±m trong danh s√°ch
      final rawPostsData = await _databaseService.getDocumentsWhere(
        collection: 'posts',
        field: 'authorUserId', // T√™n tr∆∞·ªùng ch·ª©a ID c·ªßa ng∆∞·ªùi ƒëƒÉng b√†i
        values: followingUserIds,
        orderBy: 'createdAt',
        descending: true,
        limit: limit,
        startAfter: startAfter,
      );

      final posts = rawPostsData.map((json) => Post.fromJson(json)).toList();

      // B∆∞·ªõc 4: L√†m gi√†u d·ªØ li·ªáu (t√≠nh kho·∫£ng c√°ch, tr·∫°ng th√°i like/save)
      final enrichedPosts = await _enrichPostsWithUserData(posts);

      _log.info('üéâ L·∫•y th√†nh c√¥ng ${enrichedPosts.length} b√†i vi·∫øt t·ª´ nh·ªØng ng∆∞·ªùi ƒëang theo d√µi.');
      return right(enrichedPosts);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt ƒëang theo d√µi', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  /// IMPLEMENT T√çNH NƒÇNG M·ªöI: L·∫§Y B√ÄI VI·∫æT C·ª¶A M·ªòT USER
  @override
  Future<Either<PostFailure, List<Post>>> getPostsByUserId({
    required String? userId,
    int limit = 10,
    DateTime? startAfter,
  }) async {
    // --- B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI ---

    // B∆∞·ªõc 1: X√°c ƒë·ªãnh ID m·ª•c ti√™u
    // N·∫øu userId ƒë∆∞·ª£c cung c·∫•p, d√πng n√≥. N·∫øu kh√¥ng, l·∫•y ID c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p.
    final String? targetUserId = userId ?? _authenticationService.getCurrentUserId();

    _log.info('üì• B·∫Øt ƒë·∫ßu l·∫•y b√†i vi·∫øt c·ªßa ng∆∞·ªùi d√πng: $targetUserId');

    // B∆∞·ªõc 2: Ki·ªÉm tra l·∫°i ID m·ª•c ti√™u. N·∫øu v·∫´n r·ªóng (VD: ch∆∞a ƒëƒÉng nh·∫≠p v√† c≈©ng kh√¥ng c√≥ userId) th√¨ d·ª´ng l·∫°i.
    if (targetUserId == null || targetUserId.isEmpty) {
      _log.warning('‚ö†Ô∏è UserID m·ª•c ti√™u r·ªóng. Kh√¥ng th·ªÉ l·∫•y b√†i vi·∫øt.');
      return right([]);
    }

    try {
      // S·ª≠ d·ª•ng `targetUserId` ƒë√£ ƒë∆∞·ª£c x√°c ƒë·ªãnh cho truy v·∫•n
      final rawPostsData = await _databaseService.getDocumentsWhere(
        collection: 'posts',
        field: 'authorUserId',
        values: [targetUserId], // S·ª≠ d·ª•ng targetUserId ·ªü ƒë√¢y
        orderBy: 'createdAt',
        descending: true,
        limit: limit,
        startAfter: startAfter,
      );

      // --- K·∫æT TH√öC S·ª¨A ƒê·ªîI --- (Ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n)

      final posts = rawPostsData.map((json) => Post.fromJson(json)).toList();

      // L√†m gi√†u d·ªØ li·ªáu
      final enrichedPosts = await _enrichPostsWithUserData(posts);

      _log.info('üéâ L·∫•y th√†nh c√¥ng ${enrichedPosts.length} b√†i vi·∫øt c·ªßa ng∆∞·ªùi d√πng $targetUserId.');
      return right(enrichedPosts);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi l·∫•y b√†i vi·∫øt c·ªßa ng∆∞·ªùi d√πng $targetUserId', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, void>> updatePost(Post post) async {
    _log.info('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t b√†i vi·∫øt v·ªõi postId: ${post.postId}');
    try {
      // Ch√∫ng ta ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c√≥ th·ªÉ thay ƒë·ªïi,
      // kh√¥ng ghi ƒë√® to√†n b·ªô document ƒë·ªÉ tr√°nh x√≥a nh·∫ßm c√°c tr∆∞·ªùng
      // ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi server nh∆∞ likeCount, saveCount.
      final Map<String, dynamic> dataToUpdate = {
        'address': post.address?.toJson(),
        'diningLocationName': post.diningLocationName,
        'dishName': post.dishName,
        'insight': post.insight,
        'price': post.price,
      };

      // N·∫øu ng∆∞·ªùi d√πng c√≥ th·ªÉ thay ƒë·ªïi c·∫£ ·∫£nh, logic s·∫Ω ph·ª©c t·∫°p h∆°n m·ªôt ch√∫t
      // (x√≥a ·∫£nh c≈©, upload ·∫£nh m·ªõi, l·∫•y url m·ªõi r·ªìi c·∫≠p nh·∫≠t v√†o dataToUpdate)
      // Nh∆∞ng ·ªü ƒë√¢y ta gi·∫£ ƒë·ªãnh ch·ªâ c·∫≠p nh·∫≠t d·ªØ li·ªáu text.

      await _databaseService.updateDocument(
        collection: 'posts',
        docId: post.postId,
        data: dataToUpdate,
      );

      _log.info('‚úÖ C·∫≠p nh·∫≠t b√†i vi·∫øt ${post.postId} th√†nh c√¥ng.');
      return right(null);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt ${post.postId}', e, stackTrace);
      return left(const UnknownFailure());
    }
  }
}
