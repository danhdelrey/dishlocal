// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:dartz/dartz.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/services/authentication_service/interface/authentication_service.dart';
import 'package:dishlocal/data/services/database_service/model/batch_operation.dart';
import 'package:dishlocal/data/services/database_service/model/server_timestamp.dart';
import 'package:dishlocal/data/services/distance_service/interface/distance_service.dart';
import 'package:dishlocal/data/services/location_service/interface/location_service.dart';
import 'package:dishlocal/data/services/storage_service/interface/storage_service.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';

import 'package:dishlocal/data/categories/post/failure/post_failure.dart';
import 'package:dishlocal/data/categories/post/model/post.dart';
import 'package:dishlocal/data/categories/post/repository/interface/post_repository.dart';
import 'package:dishlocal/data/services/database_service/interface/database_service.dart';
import 'package:dishlocal/ui/features/post/view/small_post.dart';

@LazySingleton(as: PostRepository)
class RemotePostRepositoryImpl implements PostRepository {
  final _log = Logger('RemotePostRepositoryImpl');
  final StorageService _storageService;
  final DatabaseService _databaseService;
  final DistanceService _distanceService;
  final LocationService _locationService;
  final AuthenticationService _authenticationService;

  RemotePostRepositoryImpl(
    this._storageService,
    this._databaseService,
    this._distanceService,
    this._locationService,
    this._authenticationService,
  );

  @override
  Future<Either<PostFailure, void>> createPost({
    required Post post,
    required File imageFile,
  }) async {
    _log.info('üëâ B·∫Øt ƒë·∫ßu t·∫°o b√†i vi·∫øt v·ªõi postId: ${post.postId}');

    try {
      _log.fine('üîÑ ƒêang t·∫£i ·∫£nh l√™n Storage v·ªõi postId: ${post.postId}...');
      final url = await _storageService.uploadFile(
        path: 'path',
        file: imageFile,
        publicId: post.postId,
      );
      _log.fine('‚úÖ T·∫£i ·∫£nh th√†nh c√¥ng. URL: $url');

      final postWithImage = post.copyWith(imageUrl: url);
      _log.fine('üì§ ƒêang l∆∞u b√†i vi·∫øt v√†o Firestore v·ªõi d·ªØ li·ªáu: ${postWithImage.toJson()}');

      await _databaseService.setDocument(
        collection: 'posts',
        docId: post.postId,
        data: postWithImage.toJson(),
      );

      _log.info('üéâ T·∫°o b√†i vi·∫øt th√†nh c√¥ng: ${post.postId}');
      return const Right(null);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi t·∫°o b√†i vi·∫øt: ${post.postId}', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, List<Post>>> getPosts({
    int limit = 10,
    DateTime? startAfter,
  }) async {
    _log.info('üì• L·∫•y danh s√°ch post (limit: $limit, startAfter: $startAfter)');
    // h·ªèi h√†ng lo·∫°t (batch query)
    // L·∫ßn 1: "Firebase ∆°i, cho t√¥i danh s√°ch 10 b√†i vi·∫øt m·ªõi nh·∫•t."
    // Firebase tr·∫£ v·ªÅ 10 b√†i vi·∫øt.
    // B·∫°n l·∫•y ra ID c·ªßa c·∫£ 10 b√†i vi·∫øt ƒë√≥ (gi·ªëng nh∆∞ vi·∫øt t√™n s√°ch ra gi·∫•y).
    // L·∫ßn 2: "Firebase ∆°i, trong danh s√°ch 10 ID b√†i vi·∫øt n√†y, ng∆∞·ªùi d√πng c·ªßa t√¥i ƒë√£ th√≠ch nh·ªØng b√†i n√†o? Cho t√¥i k·∫øt qu·∫£."
    // Firebase ch·ªâ c·∫ßn t√¨m 1 l·∫ßn v√† tr·∫£ v·ªÅ, v√≠ d·ª•: "Ng∆∞·ªùi d√πng ƒë√£ th√≠ch b√†i A, D, F".
    // L·∫ßn 3: "Firebase ∆°i, c≈©ng trong danh s√°ch 10 ID ƒë√≥, ng∆∞·ªùi d√πng c·ªßa t√¥i ƒë√£ l∆∞u nh·ªØng b√†i n√†o?"
    // Firebase l·∫°i t√¨m 1 l·∫ßn v√† tr·∫£ v·ªÅ, v√≠ d·ª•: "Ng∆∞·ªùi d√πng ƒë√£ l∆∞u b√†i B, D, H".
    //=> T·ªïng c·ªông, b·∫°n ch·ªâ ph·∫£i h·ªèi Firebase 3 l·∫ßn (1 l·∫ßn l·∫•y b√†i vi·∫øt, 1 l·∫ßn l·∫•y danh s√°ch th√≠ch, 1 l·∫ßn l·∫•y danh s√°ch l∆∞u).

    try {
      // B∆Ø·ªöC 1 & 2: L·∫•y UserID v√† danh s√°ch b√†i vi·∫øt
      final currentUserId = _authenticationService.getCurrentUserId();
      _log.fine('üÜî User ID hi·ªán t·∫°i: $currentUserId');

      final rawPosts = await _databaseService.getDocuments(
        collection: 'posts',
        orderBy: 'createdAt',
        descending: true,
        limit: limit,
        startAfter: startAfter,
      );

      if (rawPosts.isEmpty) {
        _log.info('‚úÖ Kh√¥ng c√≥ b√†i vi·∫øt n√†o ƒë∆∞·ª£c t√¨m th·∫•y. Tr·∫£ v·ªÅ danh s√°ch tr·ªëng.');
        return right([]);
      }

      final posts = rawPosts.map((json) => Post.fromJson(json)).toList();
      _log.info('‚úÖ L·∫•y ƒë∆∞·ª£c ${posts.length} b√†i vi·∫øt.');

      // B∆Ø·ªöC 3: Tr√≠ch xu·∫•t danh s√°ch Post ID
      final postIds = posts.map((p) => p.postId).toList();

      // B∆Ø·ªöC 4: L·∫•y tr·∫°ng th√°i Like v√† Save h√†ng lo·∫°t (ch·ªâ khi user ƒë√£ ƒëƒÉng nh·∫≠p)
      Set<String> likedPostIds = {};
      Set<String> savedPostIds = {};

      if (currentUserId != null && currentUserId.isNotEmpty) {
        _log.info('üöÄ B·∫Øt ƒë·∫ßu l·∫•y tr·∫°ng th√°i like/save cho ${postIds.length} b√†i vi·∫øt.');

        // Ch·∫°y song song 2 truy v·∫•n ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
        final results = await Future.wait([
          _databaseService.getDocumentsWhereIdIn(
            collection: 'users/$currentUserId/likes',
            ids: postIds,
          ),
          _databaseService.getDocumentsWhereIdIn(
            collection: 'users/$currentUserId/savedPosts',
            ids: postIds,
          ),
        ]);

        // D√πng Set ƒë·ªÉ tra c·ª©u O(1)
        likedPostIds = results[0].map((doc) => doc['id'] as String).toSet();
        savedPostIds = results[1].map((doc) => doc['id'] as String).toSet();
        _log.fine('üëç ƒê√£ th√≠ch ${likedPostIds.length} b√†i vi·∫øt. üìå ƒê√£ l∆∞u ${savedPostIds.length} b√†i vi·∫øt.');
      } else {
        _log.info('üë§ Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, b·ªè qua vi·ªác ki·ªÉm tra tr·∫°ng th√°i like/save.');
      }

      // üîç L·∫•y t·ªça ƒë·ªô ng∆∞·ªùi d√πng hi·ªán t·∫°i
      final userPosition = await _locationService.getCurrentPosition();

      // B∆Ø·ªöC 5: T·ªïng h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu
      _log.info('üîÑ B·∫Øt ƒë·∫ßu t·ªïng h·ª£p d·ªØ li·ªáu (kho·∫£ng c√°ch, like, save) cho c√°c b√†i vi·∫øt.');
      final postsWithFullData = await Future.wait(posts.map((post) async {
        // T√≠nh kho·∫£ng c√°ch
        final distance = (post.address?.latitude != null && post.address?.longitude != null)
            ? await _distanceService.calculateDistance(
                fromLat: userPosition.latitude,
                fromLong: userPosition.longitude,
                toLat: post.address!.latitude,
                toLong: post.address!.longitude,
              )
            : null;

        // Ki·ªÉm tra tr·∫°ng th√°i like/save
        final isLiked = likedPostIds.contains(post.postId);
        final isSaved = savedPostIds.contains(post.postId);

        return post.copyWith(
          distance: distance,
          isLiked: isLiked,
          isSaved: isSaved,
        );
      }));

      _log.info('üéâ Ho√†n th√†nh l·∫•y v√† t·ªïng h·ª£p d·ªØ li·ªáu cho ${postsWithFullData.length} b√†i vi·∫øt.');
      return right(postsWithFullData);
    } catch (e, stackTrace) {
      _log.severe('‚ùå L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt', e, stackTrace);
      return const Left(UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, void>> likePost({
    required String postId,
    required String userId,
    required bool isLiked,
  }) async {
    final action = isLiked ? "th√≠ch" : "b·ªè th√≠ch";
    _log.info('üîÑ B·∫Øt ƒë·∫ßu $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.');

    try {
      // 1. ƒê·ªãnh nghƒ©a c√°c ƒë∆∞·ªùng d·∫´n c·∫ßn thao t√°c
      final postPath = 'posts/$postId';
      final userLikePath = 'users/$userId/likes/$postId';
      // (Optional) ƒê∆∞·ªùng d·∫´n ƒë·ªÉ tra c·ª©u ng∆∞·ª£c, n·∫øu b·∫°n c·∫ßn
      // final postLikePath = 'likes/$postId/users/$userId';

      // 2. Chu·∫©n b·ªã danh s√°ch c√°c thao t√°c
      final List<BatchOperation> operations = [];
      final incrementValue = isLiked ? 1 : -1;

      // Thao t√°c 1: C·∫≠p nh·∫≠t `likeCount` tr√™n t√†i li·ªáu `post`
      operations.add(BatchOperation.update(
        path: postPath,
        data: {'likeCount': FieldIncrement(incrementValue)},
      ));

      if (isLiked) {
        // Thao t√°c 2 (khi th√≠ch): Ghi l·∫°i r·∫±ng user n√†y ƒë√£ th√≠ch b√†i vi·∫øt
        operations.add(BatchOperation.set(
          path: userLikePath,
          data: {'likedAt': const ServerTimestamp()},
        ));
      } else {
        // Thao t√°c 2 (khi b·ªè th√≠ch): X√≥a b·∫£n ghi user ƒë√£ th√≠ch b√†i vi·∫øt
        operations.add(BatchOperation.delete(path: userLikePath));
      }

      // 3. G·ª≠i to√†n b·ªô c√°c thao t√°c ƒë·∫øn service ƒë·ªÉ th·ª±c thi nguy√™n t·ª≠
      await _databaseService.executeBatch(operations);

      _log.info('‚úÖ Ho√†n th√†nh $action b√†i vi·∫øt $postId th√†nh c√¥ng.');
      return right(null);

    } catch (e, stackTrace) {
      _log.severe(
        '‚ùå L·ªói khi $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.',
        e,
        stackTrace,
      );
      // B·∫°n c√≥ th·ªÉ t·∫°o m·ªôt l·ªõp Failure c·ª• th·ªÉ h∆°n n·∫øu c·∫ßn
      return left(const UnknownFailure());
    }
  }

  @override
  Future<Either<PostFailure, void>> savePost({
    required String postId,
    required String userId,
    required bool isSaved,
  }) async {
    final action = isSaved ? "l∆∞u" : "b·ªè l∆∞u";
    _log.info('üîÑ B·∫Øt ƒë·∫ßu $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.');

    try {
      // 1. ƒê·ªãnh nghƒ©a c√°c ƒë∆∞·ªùng d·∫´n c·∫ßn thao t√°c
      final postPath = 'posts/$postId';
      final userSavedPostPath = 'users/$userId/savedPosts/$postId';
      // (Optional) ƒê∆∞·ªùng d·∫´n ƒë·ªÉ tra c·ª©u ng∆∞·ª£c, n·∫øu b·∫°n c·∫ßn
      // final postSavedByPath = 'posts/$postId/savedBy/$userId';

      // 2. Chu·∫©n b·ªã danh s√°ch c√°c thao t√°c
      final List<BatchOperation> operations = [];
      final incrementValue = isSaved ? 1 : -1;

      // Thao t√°c 1: C·∫≠p nh·∫≠t `saveCount` tr√™n t√†i li·ªáu `post`
      operations.add(BatchOperation.update(
        path: postPath,
        data: {'saveCount': FieldIncrement(incrementValue)},
      ));

      if (isSaved) {
        // Thao t√°c 2 (khi l∆∞u): Ghi l·∫°i r·∫±ng user n√†y ƒë√£ l∆∞u b√†i vi·∫øt
        operations.add(BatchOperation.set(
          path: userSavedPostPath,
          data: {'savedAt': const ServerTimestamp()},
        ));
      } else {
        // Thao t√°c 2 (khi b·ªè l∆∞u): X√≥a b·∫£n ghi user ƒë√£ l∆∞u b√†i vi·∫øt
        operations.add(BatchOperation.delete(path: userSavedPostPath));
      }

      // 3. G·ª≠i to√†n b·ªô c√°c thao t√°c ƒë·∫øn service ƒë·ªÉ th·ª±c thi nguy√™n t·ª≠
      await _databaseService.executeBatch(operations);

      _log.info('‚úÖ Ho√†n th√†nh $action b√†i vi·∫øt $postId th√†nh c√¥ng.');
      return right(null);
      
    } catch (e, stackTrace) {
      _log.severe(
        '‚ùå L·ªói khi $action b√†i vi·∫øt $postId cho ng∆∞·ªùi d√πng $userId.',
        e,
        stackTrace,
      );
      return left(const UnknownFailure());
    }
  }
}
