import 'package:freezed_annotation/freezed_annotation.dart';

part 'sort_option.freezed.dart';

// TH√äM M·ªöI: M·ªôt enum ƒë·ªÉ x√°c ƒë·ªãnh ng·ªØ c·∫£nh, gi√∫p code d·ªÖ ƒë·ªçc h∆°n.
enum FilterContext {
  explore,
  search,
}

enum SortField {
  relevance('üèÜ', 'Li√™n quan nh·∫•t'), // <-- TH√äM M·ªöI
  datePosted('üìÖ', 'Ng√†y ƒëƒÉng'),
  likes('‚ù§Ô∏è', 'L∆∞·ª£t th√≠ch'),
  comments('üí¨', 'L∆∞·ª£t b√¨nh lu·∫≠n'),
  saves('üîñ', 'L∆∞·ª£t l∆∞u');

  final String icon;
  final String label;
  const SortField(this.icon, this.label);
}

enum SortDirection { asc, desc }

@freezed
abstract class SortOption with _$SortOption {
  const SortOption._();

  const factory SortOption({
    required SortField field,
    required SortDirection direction,
  }) = _SortOption;

  /// L·ª±a ch·ªçn m·∫∑c ƒë·ªãnh cho Explore Screen
  static const SortOption defaultSort = SortOption(
    field: SortField.datePosted,
    direction: SortDirection.desc,
  );

  /// L·ª±a ch·ªçn m·∫∑c ƒë·ªãnh cho Search Result Screen
  static const SortOption relevanceSort = SortOption(
    field: SortField.relevance,
    direction: SortDirection.desc, // Direction kh√¥ng quan tr·ªçng nh∆∞ng ph·∫£i c√≥
  );

  String get displayName {
    final icon = field.icon;
    final label = field.label;

    // Kh√¥ng hi·ªÉn th·ªã m≈©i t√™n cho "Li√™n quan nh·∫•t"
    if (field == SortField.relevance) {
      return '$icon $label';
    }

    final arrow = direction == SortDirection.desc ? '‚Üì' : '‚Üë';
    return '$icon $label $arrow';
  }
  
  /// THAY ƒê·ªîI QUAN TR·ªåNG: Chuy·ªÉn `allOptions` v√† `uniqueFields` th√†nh ph∆∞∆°ng th·ª©c ƒë·ªông.

  /// L·∫•y danh s√°ch t·∫•t c·∫£ c√°c t√πy ch·ªçn s·∫Øp x·∫øp d·ª±a tr√™n ng·ªØ c·∫£nh.
  static List<SortOption> getAllOptions({
    required FilterContext forContext,
  }) {
    final baseOptions = [
      const SortOption(field: SortField.datePosted, direction: SortDirection.desc),
      const SortOption(field: SortField.datePosted, direction: SortDirection.asc),
      const SortOption(field: SortField.likes, direction: SortDirection.desc),
      const SortOption(field: SortField.likes, direction: SortDirection.asc),
      const SortOption(field: SortField.comments, direction: SortDirection.desc),
      const SortOption(field: SortField.comments, direction: SortDirection.asc),
      const SortOption(field: SortField.saves, direction: SortDirection.desc),
      const SortOption(field: SortField.saves, direction: SortDirection.asc),
    ];

    if (forContext == FilterContext.search) {
      // N·∫øu l√† m√†n h√¨nh t√¨m ki·∫øm, th√™m "Li√™n quan nh·∫•t" v√†o ƒë·∫ßu danh s√°ch.
      return [relevanceSort, ...baseOptions];
    }
    
    // Ng∆∞·ª£c l·∫°i, tr·∫£ v·ªÅ danh s√°ch c∆° b·∫£n cho Explore.
    return baseOptions;
  }
  
  /// L·∫•y danh s√°ch c√°c tr∆∞·ªùng s·∫Øp x·∫øp duy nh·∫•t d·ª±a tr√™n ng·ªØ c·∫£nh.
  static List<SortField> getUniqueFields({
    required FilterContext forContext,
  }) {
    final baseFields = [
      SortField.datePosted,
      SortField.likes,
      SortField.comments,
      SortField.saves,
    ];

    if (forContext == FilterContext.search) {
      // Th√™m "Li√™n quan nh·∫•t" v√†o ƒë·∫ßu danh s√°ch cho m√†n h√¨nh t√¨m ki·∫øm.
      return [SortField.relevance, ...baseFields];
    }

    return baseFields;
  }

  bool get isReversible {
    // Relevance kh√¥ng th·ªÉ ƒë·∫£o ng∆∞·ª£c chi·ªÅu.
    if (field == SortField.relevance) {
      return false;
    }
    return true;
  }
}