import 'dart:convert';
import 'dart:io';

import 'package:dishlocal/app/config/app_router.dart';
import 'package:dishlocal/core/app_environment/app_environment.dart';
import 'package:dishlocal/data/categories/app_user/model/app_user.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:dishlocal/data/singleton/app_route_observer.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:go_router/go_router.dart';
import 'package:http/http.dart' as http;
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:path_provider/path_provider.dart';

@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp(
    options: AppEnvironment.firebaseOption,
  );
  Logger("_firebaseMessagingBackgroundHandler").info("Handling a background message: ${message.messageId}");
}


@lazySingleton
class NotificationService {
  final _log = Logger('NotificationService');
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();
  final AppUserRepository _userRepository;
  final AppRouteObserver _routeObserver;
  final GoRouter _router;

  NotificationService(this._userRepository, this._routeObserver, this._router);

  /// Kh·ªüi t·∫°o to√†n b·ªô d·ªãch v·ª• th√¥ng b√°o.
  /// G·ªçi h√†m n√†y trong main.dart sau khi kh·ªüi t·∫°o Firebase.
  Future<void> initialize() async {
    // 1. Y√™u c·∫ßu quy·ªÅn

    // 2. L·∫•y v√† qu·∫£n l√Ω FCM token
    await _handleFcmToken();

    // 3. Thi·∫øt l·∫≠p th√¥ng b√°o Local (cho Android khi app ƒëang m·ªü)
    await _setupLocalNotifications();

    // 4. L·∫Øng nghe c√°c s·ª± ki·ªán th√¥ng b√°o
    _setupMessageListeners();
  }

  /// Y√™u c·∫ßu quy·ªÅn g·ª≠i th√¥ng b√°o t·ª´ ng∆∞·ªùi d√πng.
  Future<void> requestPermission() async {
    await _firebaseMessaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );
  }

  /// L·∫•y FCM token v√† g·ª≠i l√™n server n·∫øu c·∫ßn.
  Future<void> _handleFcmToken() async {
    final fcmToken = await _firebaseMessaging.getToken();
    if (fcmToken != null) {
      _log.info("üì± FCM Token: $fcmToken");
      // G·ª≠i token l√™n server ƒë·ªÉ l∆∞u v√†o b·∫£ng profiles
      // Gi·∫£ s·ª≠ AppUserRepository c√≥ ph∆∞∆°ng th·ª©c n√†y
      await _userRepository.updateFcmToken(fcmToken);
    }else{
      _log.warning("‚ùó FCM Token is null. Please check your Firebase configuration.");
    }

    _firebaseMessaging.onTokenRefresh.listen((newToken) {
      _log.info("üîÑ FCM Token Refreshed: $newToken");
      _userRepository.updateFcmToken(newToken);
    });
  }

  /// Thi·∫øt l·∫≠p cho th√¥ng b√°o local (hi·ªÉn th·ªã khi app ƒëang ch·∫°y ·ªü foreground).
  Future<void> _setupLocalNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');
    const InitializationSettings initializationSettings = InitializationSettings(android: initializationSettingsAndroid);
    await _localNotifications.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) {
        if (response.payload != null && response.payload!.isNotEmpty) {
          // Th√™m ki·ªÉm tra isNotEmpty
          try {
            // === THAY ƒê·ªîI QUAN TR·ªåNG ===
            // B√¢y gi·ªù ch√∫ng ta c√≥ th·ªÉ decode tr·ª±c ti·∫øp
            final Map<String, dynamic> data = json.decode(response.payload!);
            _handleNotificationTap(data);
          } catch (e) {
            _log.info("Error parsing local notification payload: $e");
            _log.info("Payload content: ${response.payload}"); // In ra payload ƒë·ªÉ g·ª° l·ªói
          }
        }
      },
    );

    // T·∫°o m·ªôt Notification Channel cho Android
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'high_importance_channel', // id
      'High Importance Notifications', // title
      description: 'This channel is used for important notifications.',
      importance: Importance.max,
    );
    await _localNotifications.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()?.createNotificationChannel(channel);
  }

  Future<String> _downloadAndSaveFile(String url, String fileName) async {
    final Directory directory = await getTemporaryDirectory();
    final String filePath = '${directory.path}/$fileName';
    final http.Response response = await http.get(Uri.parse(url));
    final File file = File(filePath);
    await file.writeAsBytes(response.bodyBytes);
    return filePath;
  }

  /// L·∫Øng nghe c√°c lo·∫°i th√¥ng b√°o kh√°c nhau t·ª´ FCM.
  void _setupMessageListeners() {
    // 1. Khi ·ª©ng d·ª•ng ƒëang m·ªü (Foreground)
    FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
      // <-- Th√™m async
      _log.info('üîî Message received in foreground: ${message.data}');

      final conversationId = message.data['conversationId'];

      // === Y√äU C·∫¶U: N·∫øu ƒëang trong route chat th√¨ kh√¥ng hi·ªán th√¥ng b√°o ===
      if (conversationId != null && _routeObserver.isInsideChatScreen(conversationId)) {
        _log.info("User is already in the target chat screen. Suppressing notification.");
        return; // Kh√¥ng l√†m g√¨ c·∫£
      }

      final notification = message.notification;
      if (notification != null) {
        // === Y√äU C·∫¶U: Hi·ªÉn th·ªã avatar c·ªßa ng∆∞·ªùi g·ª≠i ===
        String? largeIconPath;
        // L·∫•y URL ·∫£nh t·ª´ payload c·ªßa Android/APNS
        final imageUrl = message.notification?.android?.imageUrl ?? message.notification?.apple?.imageUrl;
        if (imageUrl != null) {
          largeIconPath = await _downloadAndSaveFile(imageUrl, 'largeIcon');
        }

        _localNotifications.show(
          notification.hashCode,
          notification.title,
          notification.body,
          NotificationDetails(
            android: AndroidNotificationDetails(
              'high_importance_channel',
              'High Importance Notifications',
              icon: '@mipmap/ic_launcher',
              // Th√™m avatar v√†o ƒë√¢y
              largeIcon: largeIconPath != null ? FilePathAndroidBitmap(largeIconPath) : null,
            ),
          ),
          payload: json.encode(message.data), // G·ª≠i data d∆∞·ªõi d·∫°ng chu·ªói JSON
        );
      }
    });


    // 2. Khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o (App ·ªü background nh∆∞ng ch∆∞a b·ªã ƒë√≥ng)
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      _log.info('üîî Notification tapped (app in background): ${message.data}');
      _handleNotificationTap(message.data);
    });

    // 3. X·ª≠ l√Ω th√¥ng b√°o ƒë√£ m·ªü ·ª©ng d·ª•ng t·ª´ tr·∫°ng th√°i b·ªã ƒë√≥ng (Terminated)
    _firebaseMessaging.getInitialMessage().then((RemoteMessage? message) {
      if (message != null) {
        _log.info('üîî Notification tapped (app was terminated): ${message.data}');
        _handleNotificationTap(message.data);
      }
    });

    // 4. L·∫Øng nghe th√¥ng b√°o ·ªü background
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  }

  void _handleNotificationTap(Map<String, dynamic> data) {
    // √âp ki·ªÉu an to√†n
    final String? type = data['type'] as String?;
    _log.info('Handling notification tap with type: $type');

    // X·ª≠ l√Ω th√¥ng b√°o CHAT
    if (type == 'chat') {
      final String? conversationId = data['conversationId'] as String?;
      final String? otherUserId = data['otherUserId'] as String?;
      final String? otherUserName = data['otherUserName'] as String?;
      final String? otherUserPhotoUrl = data['otherUserPhotoUrl'] as String?;

      if (conversationId != null && otherUserId != null) {
        _log.info('Navigating to chat with conversationId: $conversationId');

        // T·∫°o m·ªôt object AppUser t·ª´ d·ªØ li·ªáu trong th√¥ng b√°o.
        // Cung c·∫•p c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c tr∆∞·ªùng kh√¥ng c√≥ trong payload.
        final AppUser otherUser = AppUser(
          userId: otherUserId,
          displayName: otherUserName,
          photoUrl: otherUserPhotoUrl,
          username: data['otherUsername'] as String? ?? '', // Gi·∫£ s·ª≠ c√≥ th·ªÉ c√≥ username
          isSetupCompleted: true, // Gi·∫£ ƒë·ªãnh ng∆∞·ªùi d√πng ƒë√£ ho√†n t·∫•t setup
        );

        final context = AppRouter.rootNavigatorKey.currentContext;
        if (context != null) {
          context.push(
            '/chat',
            extra: {
              'conversationId': conversationId,
              'otherUser': otherUser,
            },
          );
        } else {
          _log.info('Error: rootNavigatorKey.currentContext is null. Cannot navigate.');
        }
      } else {
        _log.info('Warning: Missing conversationId or otherUserId in chat notification payload.');
      }
    }

    // X·ª≠ l√Ω th√¥ng b√°o B√ÄI VI·∫æT (trong t∆∞∆°ng lai)
    else if (type == 'new_post') {
      final String? postId = data['postId'] as String?;

      if (postId != null) {
        _log.info('Navigating to post with postId: $postId');

        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh chi ti·∫øt b√†i vi·∫øt.
        // Gi·∫£ s·ª≠ route c·ªßa b·∫°n c√≥ d·∫°ng /post/:postId
        
      } else {
        _log.info('Warning: Missing postId in new_post notification payload.');
      }
    }

    // X·ª≠ l√Ω c√°c lo·∫°i th√¥ng b√°o kh√°c
    else {
      _log.info('Warning: Received notification tap with unknown or missing type: $type');
      // C√≥ th·ªÉ ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang ch·ªß nh∆∞ m·ªôt gi·∫£i ph√°p d·ª± ph√≤ng
      _router.go('/home');
    }
  }
}
