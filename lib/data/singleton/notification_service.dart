import 'package:dishlocal/core/app_environment/app_environment.dart';
import 'package:dishlocal/data/categories/app_user/repository/interface/app_user_repository.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:injectable/injectable.dart';
import 'package:logging/logging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp(
    options: AppEnvironment.firebaseOption,
  );
  Logger("_firebaseMessagingBackgroundHandler").info("Handling a background message: ${message.messageId}");
}

@lazySingleton
class NotificationService {
  final _log = Logger('NotificationService');
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();
  final AppUserRepository _userRepository;

  NotificationService(this._userRepository);

  /// Kh·ªüi t·∫°o to√†n b·ªô d·ªãch v·ª• th√¥ng b√°o.
  /// G·ªçi h√†m n√†y trong main.dart sau khi kh·ªüi t·∫°o Firebase.
  Future<void> initialize() async {
    // 1. Y√™u c·∫ßu quy·ªÅn
    await _requestPermission();

    // 2. L·∫•y v√† qu·∫£n l√Ω FCM token
    await _handleFcmToken();

    // 3. Thi·∫øt l·∫≠p th√¥ng b√°o Local (cho Android khi app ƒëang m·ªü)
    await _setupLocalNotifications();

    // 4. L·∫Øng nghe c√°c s·ª± ki·ªán th√¥ng b√°o
    _setupMessageListeners();
  }

  /// Y√™u c·∫ßu quy·ªÅn g·ª≠i th√¥ng b√°o t·ª´ ng∆∞·ªùi d√πng.
  Future<void> _requestPermission() async {
    await _firebaseMessaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );
  }

  /// L·∫•y FCM token v√† g·ª≠i l√™n server n·∫øu c·∫ßn.
  Future<void> _handleFcmToken() async {
    final fcmToken = await _firebaseMessaging.getToken();
    if (fcmToken != null) {
      _log.info("üì± FCM Token: $fcmToken");
      // G·ª≠i token l√™n server ƒë·ªÉ l∆∞u v√†o b·∫£ng profiles
      // Gi·∫£ s·ª≠ AppUserRepository c√≥ ph∆∞∆°ng th·ª©c n√†y
      await _userRepository.updateFcmToken(fcmToken);
    }

    _firebaseMessaging.onTokenRefresh.listen((newToken) {
      _log.info("üîÑ FCM Token Refreshed: $newToken");
      _userRepository.updateFcmToken(newToken);
    });
  }

  /// Thi·∫øt l·∫≠p cho th√¥ng b√°o local (hi·ªÉn th·ªã khi app ƒëang ch·∫°y ·ªü foreground).
  Future<void> _setupLocalNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');
    const InitializationSettings initializationSettings = InitializationSettings(android: initializationSettingsAndroid);
    await _localNotifications.initialize(initializationSettings);

    // T·∫°o m·ªôt Notification Channel cho Android
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'high_importance_channel', // id
      'High Importance Notifications', // title
      description: 'This channel is used for important notifications.',
      importance: Importance.max,
    );
    await _localNotifications.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()?.createNotificationChannel(channel);
  }

  /// L·∫Øng nghe c√°c lo·∫°i th√¥ng b√°o kh√°c nhau t·ª´ FCM.
  void _setupMessageListeners() {
    // 1. Khi ·ª©ng d·ª•ng ƒëang m·ªü (Foreground)
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      _log.info('üîî Message received in foreground: ${message.notification?.title}');
      final notification = message.notification;
      final android = message.notification?.android;

      if (notification != null && android != null) {
        // Hi·ªÉn th·ªã th√¥ng b√°o local ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y
        _localNotifications.show(
          notification.hashCode,
          notification.title,
          notification.body,
          NotificationDetails(
            android: AndroidNotificationDetails(
              'high_importance_channel', // id k√™nh
              'High Importance Notifications',
              icon: android.smallIcon,
            ),
          ),
          payload: message.data.toString(), // Truy·ªÅn d·ªØ li·ªáu v√†o payload
        );
      }
    });

    // 2. Khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o (App ·ªü background nh∆∞ng ch∆∞a b·ªã ƒë√≥ng)
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      _log.info('üîî Notification tapped (app in background): ${message.data}');
      _handleNotificationTap(message.data);
    });

    // 3. X·ª≠ l√Ω th√¥ng b√°o ƒë√£ m·ªü ·ª©ng d·ª•ng t·ª´ tr·∫°ng th√°i b·ªã ƒë√≥ng (Terminated)
    _firebaseMessaging.getInitialMessage().then((RemoteMessage? message) {
      if (message != null) {
        _log.info('üîî Notification tapped (app was terminated): ${message.data}');
        _handleNotificationTap(message.data);
      }
    });

    // 4. L·∫Øng nghe th√¥ng b√°o ·ªü background
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  }

  /// X·ª≠ l√Ω _log.infoic ƒëi·ªÅu h∆∞·ªõng khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o.
  void _handleNotificationTap(Map<String, dynamic> data) {
    final String? type = data['type']; // 'chat', 'new_post', 'like', etc.

    if (type == 'chat') {
      final String? conversationId = data['conversationId'];
      final String? otherUserName = data['otherUserName'];
      final String? otherUserPhotoUrl = data['otherUserPhotoUrl'];
      final String? otherUserId = data['otherUserId'];

      if (conversationId != null && otherUserId != null) {
        // TODO: S·ª≠ d·ª•ng GoRouter ho·∫∑c h·ªá th·ªëng ƒëi·ªÅu h∆∞·ªõng c·ªßa b·∫°n
        // ƒë·ªÉ chuy·ªÉn ƒë·∫øn m√†n h√¨nh ChatScreen v·ªõi c√°c th√¥ng tin n√†y.
        // V√≠ d·ª•:
        // AppRouter.instance.push('/chat', extra: { ... });
        _log.info('Navigate to chat with conversationId: $conversationId');
      }
    } else if (type == 'new_post') {
      final String? postId = data['postId'];
      // TODO: ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh chi ti·∫øt b√†i post
      _log.info('Navigate to post with postId: $postId');
    }
  }
}
